

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Nov 21 12:44:51 2021

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           ; Version 1.43
    50                           ; Generated 25/07/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F4550 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	idataBANK0
    85  001D6C                     __pidataBANK0:
    86                           	opt stack 0
    87                           
    88                           ;initializer for main@F4119
    89  001D6C  78                 	db	120
    90  001D6D  20                 	db	32
    91  001D6E  3D                 	db	61
    92  001D6F  20                 	db	32
    93  001D70  00                 	db	0
    94  001D71  00                 	db	0
    95  001D72  00                 	db	0
    96  001D73  00                 	db	0
    97  001D74  00                 	db	0
    98  001D75  00                 	db	0
    99  001D76  00                 	db	0
   100  001D77  00                 	db	0
   101  001D78  00                 	db	0
   102  001D79  00                 	db	0
   103  001D7A  00                 	db	0
   104  001D7B  00                 	db	0
   105  001D7C  00                 	db	0
   106  001D7D  00                 	db	0
   107  001D7E  00                 	db	0
   108  001D7F  00                 	db	0
   109                           
   110                           	psect	mediumconst
   111  0076C2                     __pmediumconst:
   112                           	opt stack 0
   113  0076C2  00                 	db	0
   114  0076C3                     _Font8x8:
   115                           	opt stack 0
   116  0076C3  00                 	db	0
   117  0076C4  00                 	db	0
   118  0076C5  00                 	db	0
   119  0076C6  00                 	db	0
   120  0076C7  00                 	db	0
   121  0076C8  00                 	db	0
   122  0076C9  00                 	db	0
   123  0076CA  00                 	db	0
   124  0076CB  00                 	db	0
   125  0076CC  00                 	db	0
   126  0076CD  00                 	db	0
   127  0076CE  00                 	db	0
   128  0076CF  00                 	db	0
   129  0076D0  00                 	db	0
   130  0076D1  00                 	db	0
   131  0076D2  00                 	db	0
   132  0076D3  00                 	db	0
   133  0076D4  00                 	db	0
   134  0076D5  00                 	db	0
   135  0076D6  00                 	db	0
   136  0076D7  00                 	db	0
   137  0076D8  00                 	db	0
   138  0076D9  00                 	db	0
   139  0076DA  00                 	db	0
   140  0076DB  00                 	db	0
   141  0076DC  00                 	db	0
   142  0076DD  00                 	db	0
   143  0076DE  00                 	db	0
   144  0076DF  00                 	db	0
   145  0076E0  00                 	db	0
   146  0076E1  00                 	db	0
   147  0076E2  00                 	db	0
   148  0076E3  00                 	db	0
   149  0076E4  00                 	db	0
   150  0076E5  00                 	db	0
   151  0076E6  00                 	db	0
   152  0076E7  00                 	db	0
   153  0076E8  00                 	db	0
   154  0076E9  00                 	db	0
   155  0076EA  00                 	db	0
   156  0076EB  00                 	db	0
   157  0076EC  00                 	db	0
   158  0076ED  00                 	db	0
   159  0076EE  00                 	db	0
   160  0076EF  00                 	db	0
   161  0076F0  00                 	db	0
   162  0076F1  00                 	db	0
   163  0076F2  00                 	db	0
   164  0076F3  00                 	db	0
   165  0076F4  00                 	db	0
   166  0076F5  00                 	db	0
   167  0076F6  00                 	db	0
   168  0076F7  00                 	db	0
   169  0076F8  00                 	db	0
   170  0076F9  00                 	db	0
   171  0076FA  00                 	db	0
   172  0076FB  00                 	db	0
   173  0076FC  00                 	db	0
   174  0076FD  00                 	db	0
   175  0076FE  00                 	db	0
   176  0076FF  00                 	db	0
   177  007700  00                 	db	0
   178  007701  00                 	db	0
   179  007702  00                 	db	0
   180  007703  00                 	db	0
   181  007704  00                 	db	0
   182  007705  00                 	db	0
   183  007706  00                 	db	0
   184  007707  00                 	db	0
   185  007708  00                 	db	0
   186  007709  00                 	db	0
   187  00770A  00                 	db	0
   188  00770B  00                 	db	0
   189  00770C  00                 	db	0
   190  00770D  00                 	db	0
   191  00770E  00                 	db	0
   192  00770F  00                 	db	0
   193  007710  00                 	db	0
   194  007711  00                 	db	0
   195  007712  00                 	db	0
   196  007713  00                 	db	0
   197  007714  00                 	db	0
   198  007715  00                 	db	0
   199  007716  00                 	db	0
   200  007717  00                 	db	0
   201  007718  00                 	db	0
   202  007719  00                 	db	0
   203  00771A  00                 	db	0
   204  00771B  00                 	db	0
   205  00771C  00                 	db	0
   206  00771D  00                 	db	0
   207  00771E  00                 	db	0
   208  00771F  00                 	db	0
   209  007720  00                 	db	0
   210  007721  00                 	db	0
   211  007722  00                 	db	0
   212  007723  00                 	db	0
   213  007724  00                 	db	0
   214  007725  00                 	db	0
   215  007726  00                 	db	0
   216  007727  00                 	db	0
   217  007728  00                 	db	0
   218  007729  00                 	db	0
   219  00772A  00                 	db	0
   220  00772B  00                 	db	0
   221  00772C  00                 	db	0
   222  00772D  00                 	db	0
   223  00772E  00                 	db	0
   224  00772F  00                 	db	0
   225  007730  00                 	db	0
   226  007731  00                 	db	0
   227  007732  00                 	db	0
   228  007733  00                 	db	0
   229  007734  00                 	db	0
   230  007735  00                 	db	0
   231  007736  00                 	db	0
   232  007737  00                 	db	0
   233  007738  00                 	db	0
   234  007739  00                 	db	0
   235  00773A  00                 	db	0
   236  00773B  00                 	db	0
   237  00773C  00                 	db	0
   238  00773D  00                 	db	0
   239  00773E  00                 	db	0
   240  00773F  00                 	db	0
   241  007740  00                 	db	0
   242  007741  00                 	db	0
   243  007742  00                 	db	0
   244  007743  00                 	db	0
   245  007744  00                 	db	0
   246  007745  00                 	db	0
   247  007746  00                 	db	0
   248  007747  00                 	db	0
   249  007748  00                 	db	0
   250  007749  00                 	db	0
   251  00774A  00                 	db	0
   252  00774B  00                 	db	0
   253  00774C  00                 	db	0
   254  00774D  00                 	db	0
   255  00774E  00                 	db	0
   256  00774F  00                 	db	0
   257  007750  00                 	db	0
   258  007751  00                 	db	0
   259  007752  00                 	db	0
   260  007753  00                 	db	0
   261  007754  00                 	db	0
   262  007755  00                 	db	0
   263  007756  00                 	db	0
   264  007757  00                 	db	0
   265  007758  00                 	db	0
   266  007759  00                 	db	0
   267  00775A  00                 	db	0
   268  00775B  00                 	db	0
   269  00775C  00                 	db	0
   270  00775D  00                 	db	0
   271  00775E  00                 	db	0
   272  00775F  00                 	db	0
   273  007760  00                 	db	0
   274  007761  00                 	db	0
   275  007762  00                 	db	0
   276  007763  00                 	db	0
   277  007764  00                 	db	0
   278  007765  00                 	db	0
   279  007766  00                 	db	0
   280  007767  00                 	db	0
   281  007768  00                 	db	0
   282  007769  00                 	db	0
   283  00776A  00                 	db	0
   284  00776B  00                 	db	0
   285  00776C  00                 	db	0
   286  00776D  00                 	db	0
   287  00776E  00                 	db	0
   288  00776F  00                 	db	0
   289  007770  00                 	db	0
   290  007771  00                 	db	0
   291  007772  00                 	db	0
   292  007773  00                 	db	0
   293  007774  00                 	db	0
   294  007775  00                 	db	0
   295  007776  00                 	db	0
   296  007777  00                 	db	0
   297  007778  00                 	db	0
   298  007779  00                 	db	0
   299  00777A  00                 	db	0
   300  00777B  00                 	db	0
   301  00777C  00                 	db	0
   302  00777D  00                 	db	0
   303  00777E  00                 	db	0
   304  00777F  00                 	db	0
   305  007780  00                 	db	0
   306  007781  00                 	db	0
   307  007782  00                 	db	0
   308  007783  00                 	db	0
   309  007784  00                 	db	0
   310  007785  00                 	db	0
   311  007786  00                 	db	0
   312  007787  00                 	db	0
   313  007788  00                 	db	0
   314  007789  00                 	db	0
   315  00778A  00                 	db	0
   316  00778B  00                 	db	0
   317  00778C  00                 	db	0
   318  00778D  00                 	db	0
   319  00778E  00                 	db	0
   320  00778F  00                 	db	0
   321  007790  00                 	db	0
   322  007791  00                 	db	0
   323  007792  00                 	db	0
   324  007793  00                 	db	0
   325  007794  00                 	db	0
   326  007795  00                 	db	0
   327  007796  00                 	db	0
   328  007797  00                 	db	0
   329  007798  00                 	db	0
   330  007799  00                 	db	0
   331  00779A  00                 	db	0
   332  00779B  00                 	db	0
   333  00779C  00                 	db	0
   334  00779D  00                 	db	0
   335  00779E  00                 	db	0
   336  00779F  00                 	db	0
   337  0077A0  00                 	db	0
   338  0077A1  00                 	db	0
   339  0077A2  00                 	db	0
   340  0077A3  00                 	db	0
   341  0077A4  00                 	db	0
   342  0077A5  00                 	db	0
   343  0077A6  00                 	db	0
   344  0077A7  00                 	db	0
   345  0077A8  00                 	db	0
   346  0077A9  00                 	db	0
   347  0077AA  00                 	db	0
   348  0077AB  00                 	db	0
   349  0077AC  00                 	db	0
   350  0077AD  00                 	db	0
   351  0077AE  00                 	db	0
   352  0077AF  00                 	db	0
   353  0077B0  00                 	db	0
   354  0077B1  00                 	db	0
   355  0077B2  00                 	db	0
   356  0077B3  00                 	db	0
   357  0077B4  00                 	db	0
   358  0077B5  00                 	db	0
   359  0077B6  00                 	db	0
   360  0077B7  00                 	db	0
   361  0077B8  00                 	db	0
   362  0077B9  00                 	db	0
   363  0077BA  00                 	db	0
   364  0077BB  00                 	db	0
   365  0077BC  00                 	db	0
   366  0077BD  00                 	db	0
   367  0077BE  00                 	db	0
   368  0077BF  00                 	db	0
   369  0077C0  00                 	db	0
   370  0077C1  00                 	db	0
   371  0077C2  00                 	db	0
   372  0077C3  00                 	db	0
   373  0077C4  00                 	db	0
   374  0077C5  00                 	db	0
   375  0077C6  00                 	db	0
   376  0077C7  00                 	db	0
   377  0077C8  00                 	db	0
   378  0077C9  00                 	db	0
   379  0077CA  00                 	db	0
   380  0077CB  00                 	db	0
   381  0077CC  06                 	db	6
   382  0077CD  5F                 	db	95
   383  0077CE  5F                 	db	95
   384  0077CF  06                 	db	6
   385  0077D0  00                 	db	0
   386  0077D1  00                 	db	0
   387  0077D2  00                 	db	0
   388  0077D3  00                 	db	0
   389  0077D4  07                 	db	7
   390  0077D5  07                 	db	7
   391  0077D6  00                 	db	0
   392  0077D7  07                 	db	7
   393  0077D8  07                 	db	7
   394  0077D9  00                 	db	0
   395  0077DA  00                 	db	0
   396  0077DB  14                 	db	20
   397  0077DC  7F                 	db	127
   398  0077DD  7F                 	db	127
   399  0077DE  14                 	db	20
   400  0077DF  7F                 	db	127
   401  0077E0  7F                 	db	127
   402  0077E1  14                 	db	20
   403  0077E2  00                 	db	0
   404  0077E3  24                 	db	36
   405  0077E4  2E                 	db	46
   406  0077E5  6B                 	db	107
   407  0077E6  6B                 	db	107
   408  0077E7  3A                 	db	58
   409  0077E8  12                 	db	18
   410  0077E9  00                 	db	0
   411  0077EA  00                 	db	0
   412  0077EB  46                 	db	70
   413  0077EC  66                 	db	102
   414  0077ED  30                 	db	48
   415  0077EE  18                 	db	24
   416  0077EF  0C                 	db	12
   417  0077F0  66                 	db	102
   418  0077F1  62                 	db	98
   419  0077F2  00                 	db	0
   420  0077F3  30                 	db	48
   421  0077F4  7A                 	db	122
   422  0077F5  4F                 	db	79
   423  0077F6  5D                 	db	93
   424  0077F7  37                 	db	55
   425  0077F8  7A                 	db	122
   426  0077F9  48                 	db	72
   427  0077FA  00                 	db	0
   428  0077FB  04                 	db	4
   429  0077FC  07                 	db	7
   430  0077FD  03                 	db	3
   431  0077FE  00                 	db	0
   432  0077FF  00                 	db	0
   433  007800  00                 	db	0
   434  007801  00                 	db	0
   435  007802  00                 	db	0
   436  007803  00                 	db	0
   437  007804  1C                 	db	28
   438  007805  3E                 	db	62
   439  007806  63                 	db	99
   440  007807  41                 	db	65
   441  007808  00                 	db	0
   442  007809  00                 	db	0
   443  00780A  00                 	db	0
   444  00780B  00                 	db	0
   445  00780C  41                 	db	65
   446  00780D  63                 	db	99
   447  00780E  3E                 	db	62
   448  00780F  1C                 	db	28
   449  007810  00                 	db	0
   450  007811  00                 	db	0
   451  007812  00                 	db	0
   452  007813  08                 	db	8
   453  007814  2A                 	db	42
   454  007815  3E                 	db	62
   455  007816  1C                 	db	28
   456  007817  1C                 	db	28
   457  007818  3E                 	db	62
   458  007819  2A                 	db	42
   459  00781A  08                 	db	8
   460  00781B  08                 	db	8
   461  00781C  08                 	db	8
   462  00781D  3E                 	db	62
   463  00781E  3E                 	db	62
   464  00781F  08                 	db	8
   465  007820  08                 	db	8
   466  007821  00                 	db	0
   467  007822  00                 	db	0
   468  007823  00                 	db	0
   469  007824  80                 	db	128
   470  007825  E0                 	db	224
   471  007826  60                 	db	96
   472  007827  00                 	db	0
   473  007828  00                 	db	0
   474  007829  00                 	db	0
   475  00782A  00                 	db	0
   476  00782B  08                 	db	8
   477  00782C  08                 	db	8
   478  00782D  08                 	db	8
   479  00782E  08                 	db	8
   480  00782F  08                 	db	8
   481  007830  08                 	db	8
   482  007831  00                 	db	0
   483  007832  00                 	db	0
   484  007833  00                 	db	0
   485  007834  00                 	db	0
   486  007835  60                 	db	96
   487  007836  60                 	db	96
   488  007837  00                 	db	0
   489  007838  00                 	db	0
   490  007839  00                 	db	0
   491  00783A  00                 	db	0
   492  00783B  60                 	db	96
   493  00783C  30                 	db	48
   494  00783D  18                 	db	24
   495  00783E  0C                 	db	12
   496  00783F  06                 	db	6
   497  007840  03                 	db	3
   498  007841  01                 	db	1
   499  007842  00                 	db	0
   500  007843  3E                 	db	62
   501  007844  7F                 	db	127
   502  007845  71                 	db	113
   503  007846  59                 	db	89
   504  007847  4D                 	db	77
   505  007848  7F                 	db	127
   506  007849  3E                 	db	62
   507  00784A  00                 	db	0
   508  00784B  40                 	db	64
   509  00784C  42                 	db	66
   510  00784D  7F                 	db	127
   511  00784E  7F                 	db	127
   512  00784F  40                 	db	64
   513  007850  40                 	db	64
   514  007851  00                 	db	0
   515  007852  00                 	db	0
   516  007853  62                 	db	98
   517  007854  73                 	db	115
   518  007855  59                 	db	89
   519  007856  49                 	db	73
   520  007857  6F                 	db	111
   521  007858  66                 	db	102
   522  007859  00                 	db	0
   523  00785A  00                 	db	0
   524  00785B  22                 	db	34
   525  00785C  63                 	db	99
   526  00785D  49                 	db	73
   527  00785E  49                 	db	73
   528  00785F  7F                 	db	127
   529  007860  36                 	db	54
   530  007861  00                 	db	0
   531  007862  00                 	db	0
   532  007863  18                 	db	24
   533  007864  1C                 	db	28
   534  007865  16                 	db	22
   535  007866  53                 	db	83
   536  007867  7F                 	db	127
   537  007868  7F                 	db	127
   538  007869  50                 	db	80
   539  00786A  00                 	db	0
   540  00786B  27                 	db	39
   541  00786C  67                 	db	103
   542  00786D  45                 	db	69
   543  00786E  45                 	db	69
   544  00786F  7D                 	db	125
   545  007870  39                 	db	57
   546  007871  00                 	db	0
   547  007872  00                 	db	0
   548  007873  3C                 	db	60
   549  007874  7E                 	db	126
   550  007875  4B                 	db	75
   551  007876  49                 	db	73
   552  007877  79                 	db	121
   553  007878  30                 	db	48
   554  007879  00                 	db	0
   555  00787A  00                 	db	0
   556  00787B  03                 	db	3
   557  00787C  03                 	db	3
   558  00787D  71                 	db	113
   559  00787E  79                 	db	121
   560  00787F  0F                 	db	15
   561  007880  07                 	db	7
   562  007881  00                 	db	0
   563  007882  00                 	db	0
   564  007883  36                 	db	54
   565  007884  7F                 	db	127
   566  007885  49                 	db	73
   567  007886  49                 	db	73
   568  007887  7F                 	db	127
   569  007888  36                 	db	54
   570  007889  00                 	db	0
   571  00788A  00                 	db	0
   572  00788B  06                 	db	6
   573  00788C  4F                 	db	79
   574  00788D  49                 	db	73
   575  00788E  69                 	db	105
   576  00788F  3F                 	db	63
   577  007890  1E                 	db	30
   578  007891  00                 	db	0
   579  007892  00                 	db	0
   580  007893  00                 	db	0
   581  007894  00                 	db	0
   582  007895  66                 	db	102
   583  007896  66                 	db	102
   584  007897  00                 	db	0
   585  007898  00                 	db	0
   586  007899  00                 	db	0
   587  00789A  00                 	db	0
   588  00789B  00                 	db	0
   589  00789C  80                 	db	128
   590  00789D  E6                 	db	230
   591  00789E  66                 	db	102
   592  00789F  00                 	db	0
   593  0078A0  00                 	db	0
   594  0078A1  00                 	db	0
   595  0078A2  00                 	db	0
   596  0078A3  08                 	db	8
   597  0078A4  1C                 	db	28
   598  0078A5  36                 	db	54
   599  0078A6  63                 	db	99
   600  0078A7  41                 	db	65
   601  0078A8  00                 	db	0
   602  0078A9  00                 	db	0
   603  0078AA  00                 	db	0
   604  0078AB  24                 	db	36
   605  0078AC  24                 	db	36
   606  0078AD  24                 	db	36
   607  0078AE  24                 	db	36
   608  0078AF  24                 	db	36
   609  0078B0  24                 	db	36
   610  0078B1  00                 	db	0
   611  0078B2  00                 	db	0
   612  0078B3  00                 	db	0
   613  0078B4  41                 	db	65
   614  0078B5  63                 	db	99
   615  0078B6  36                 	db	54
   616  0078B7  1C                 	db	28
   617  0078B8  08                 	db	8
   618  0078B9  00                 	db	0
   619  0078BA  00                 	db	0
   620  0078BB  02                 	db	2
   621  0078BC  03                 	db	3
   622  0078BD  51                 	db	81
   623  0078BE  59                 	db	89
   624  0078BF  0F                 	db	15
   625  0078C0  06                 	db	6
   626  0078C1  00                 	db	0
   627  0078C2  00                 	db	0
   628  0078C3  3E                 	db	62
   629  0078C4  7F                 	db	127
   630  0078C5  41                 	db	65
   631  0078C6  5D                 	db	93
   632  0078C7  5D                 	db	93
   633  0078C8  1F                 	db	31
   634  0078C9  1E                 	db	30
   635  0078CA  00                 	db	0
   636  0078CB  7C                 	db	124
   637  0078CC  7E                 	db	126
   638  0078CD  13                 	db	19
   639  0078CE  13                 	db	19
   640  0078CF  7E                 	db	126
   641  0078D0  7C                 	db	124
   642  0078D1  00                 	db	0
   643  0078D2  00                 	db	0
   644  0078D3  41                 	db	65
   645  0078D4  7F                 	db	127
   646  0078D5  7F                 	db	127
   647  0078D6  49                 	db	73
   648  0078D7  49                 	db	73
   649  0078D8  7F                 	db	127
   650  0078D9  36                 	db	54
   651  0078DA  00                 	db	0
   652  0078DB  1C                 	db	28
   653  0078DC  3E                 	db	62
   654  0078DD  63                 	db	99
   655  0078DE  41                 	db	65
   656  0078DF  41                 	db	65
   657  0078E0  63                 	db	99
   658  0078E1  22                 	db	34
   659  0078E2  00                 	db	0
   660  0078E3  41                 	db	65
   661  0078E4  7F                 	db	127
   662  0078E5  7F                 	db	127
   663  0078E6  41                 	db	65
   664  0078E7  63                 	db	99
   665  0078E8  3E                 	db	62
   666  0078E9  1C                 	db	28
   667  0078EA  00                 	db	0
   668  0078EB  41                 	db	65
   669  0078EC  7F                 	db	127
   670  0078ED  7F                 	db	127
   671  0078EE  49                 	db	73
   672  0078EF  5D                 	db	93
   673  0078F0  41                 	db	65
   674  0078F1  63                 	db	99
   675  0078F2  00                 	db	0
   676  0078F3  41                 	db	65
   677  0078F4  7F                 	db	127
   678  0078F5  7F                 	db	127
   679  0078F6  49                 	db	73
   680  0078F7  1D                 	db	29
   681  0078F8  01                 	db	1
   682  0078F9  03                 	db	3
   683  0078FA  00                 	db	0
   684  0078FB  1C                 	db	28
   685  0078FC  3E                 	db	62
   686  0078FD  63                 	db	99
   687  0078FE  41                 	db	65
   688  0078FF  51                 	db	81
   689  007900  73                 	db	115
   690  007901  72                 	db	114
   691  007902  00                 	db	0
   692  007903  7F                 	db	127
   693  007904  7F                 	db	127
   694  007905  08                 	db	8
   695  007906  08                 	db	8
   696  007907  7F                 	db	127
   697  007908  7F                 	db	127
   698  007909  00                 	db	0
   699  00790A  00                 	db	0
   700  00790B  00                 	db	0
   701  00790C  41                 	db	65
   702  00790D  7F                 	db	127
   703  00790E  7F                 	db	127
   704  00790F  41                 	db	65
   705  007910  00                 	db	0
   706  007911  00                 	db	0
   707  007912  00                 	db	0
   708  007913  30                 	db	48
   709  007914  70                 	db	112
   710  007915  40                 	db	64
   711  007916  41                 	db	65
   712  007917  7F                 	db	127
   713  007918  3F                 	db	63
   714  007919  01                 	db	1
   715  00791A  00                 	db	0
   716  00791B  41                 	db	65
   717  00791C  7F                 	db	127
   718  00791D  7F                 	db	127
   719  00791E  08                 	db	8
   720  00791F  1C                 	db	28
   721  007920  77                 	db	119
   722  007921  63                 	db	99
   723  007922  00                 	db	0
   724  007923  41                 	db	65
   725  007924  7F                 	db	127
   726  007925  7F                 	db	127
   727  007926  41                 	db	65
   728  007927  40                 	db	64
   729  007928  60                 	db	96
   730  007929  70                 	db	112
   731  00792A  00                 	db	0
   732  00792B  7F                 	db	127
   733  00792C  7F                 	db	127
   734  00792D  0E                 	db	14
   735  00792E  1C                 	db	28
   736  00792F  0E                 	db	14
   737  007930  7F                 	db	127
   738  007931  7F                 	db	127
   739  007932  00                 	db	0
   740  007933  7F                 	db	127
   741  007934  7F                 	db	127
   742  007935  06                 	db	6
   743  007936  0C                 	db	12
   744  007937  18                 	db	24
   745  007938  7F                 	db	127
   746  007939  7F                 	db	127
   747  00793A  00                 	db	0
   748  00793B  1C                 	db	28
   749  00793C  3E                 	db	62
   750  00793D  63                 	db	99
   751  00793E  41                 	db	65
   752  00793F  63                 	db	99
   753  007940  3E                 	db	62
   754  007941  1C                 	db	28
   755  007942  00                 	db	0
   756  007943  41                 	db	65
   757  007944  7F                 	db	127
   758  007945  7F                 	db	127
   759  007946  49                 	db	73
   760  007947  09                 	db	9
   761  007948  0F                 	db	15
   762  007949  06                 	db	6
   763  00794A  00                 	db	0
   764  00794B  1E                 	db	30
   765  00794C  3F                 	db	63
   766  00794D  21                 	db	33
   767  00794E  71                 	db	113
   768  00794F  7F                 	db	127
   769  007950  5E                 	db	94
   770  007951  00                 	db	0
   771  007952  00                 	db	0
   772  007953  41                 	db	65
   773  007954  7F                 	db	127
   774  007955  7F                 	db	127
   775  007956  09                 	db	9
   776  007957  19                 	db	25
   777  007958  7F                 	db	127
   778  007959  66                 	db	102
   779  00795A  00                 	db	0
   780  00795B  26                 	db	38
   781  00795C  6F                 	db	111
   782  00795D  4D                 	db	77
   783  00795E  59                 	db	89
   784  00795F  73                 	db	115
   785  007960  32                 	db	50
   786  007961  00                 	db	0
   787  007962  00                 	db	0
   788  007963  03                 	db	3
   789  007964  41                 	db	65
   790  007965  7F                 	db	127
   791  007966  7F                 	db	127
   792  007967  41                 	db	65
   793  007968  03                 	db	3
   794  007969  00                 	db	0
   795  00796A  00                 	db	0
   796  00796B  7F                 	db	127
   797  00796C  7F                 	db	127
   798  00796D  40                 	db	64
   799  00796E  40                 	db	64
   800  00796F  7F                 	db	127
   801  007970  7F                 	db	127
   802  007971  00                 	db	0
   803  007972  00                 	db	0
   804  007973  1F                 	db	31
   805  007974  3F                 	db	63
   806  007975  60                 	db	96
   807  007976  60                 	db	96
   808  007977  3F                 	db	63
   809  007978  1F                 	db	31
   810  007979  00                 	db	0
   811  00797A  00                 	db	0
   812  00797B  7F                 	db	127
   813  00797C  7F                 	db	127
   814  00797D  30                 	db	48
   815  00797E  18                 	db	24
   816  00797F  30                 	db	48
   817  007980  7F                 	db	127
   818  007981  7F                 	db	127
   819  007982  00                 	db	0
   820  007983  43                 	db	67
   821  007984  67                 	db	103
   822  007985  3C                 	db	60
   823  007986  18                 	db	24
   824  007987  3C                 	db	60
   825  007988  67                 	db	103
   826  007989  43                 	db	67
   827  00798A  00                 	db	0
   828  00798B  07                 	db	7
   829  00798C  4F                 	db	79
   830  00798D  78                 	db	120
   831  00798E  78                 	db	120
   832  00798F  4F                 	db	79
   833  007990  07                 	db	7
   834  007991  00                 	db	0
   835  007992  00                 	db	0
   836  007993  47                 	db	71
   837  007994  63                 	db	99
   838  007995  71                 	db	113
   839  007996  59                 	db	89
   840  007997  4D                 	db	77
   841  007998  67                 	db	103
   842  007999  73                 	db	115
   843  00799A  00                 	db	0
   844  00799B  00                 	db	0
   845  00799C  7F                 	db	127
   846  00799D  7F                 	db	127
   847  00799E  41                 	db	65
   848  00799F  41                 	db	65
   849  0079A0  00                 	db	0
   850  0079A1  00                 	db	0
   851  0079A2  00                 	db	0
   852  0079A3  01                 	db	1
   853  0079A4  03                 	db	3
   854  0079A5  06                 	db	6
   855  0079A6  0C                 	db	12
   856  0079A7  18                 	db	24
   857  0079A8  30                 	db	48
   858  0079A9  60                 	db	96
   859  0079AA  00                 	db	0
   860  0079AB  00                 	db	0
   861  0079AC  41                 	db	65
   862  0079AD  41                 	db	65
   863  0079AE  7F                 	db	127
   864  0079AF  7F                 	db	127
   865  0079B0  00                 	db	0
   866  0079B1  00                 	db	0
   867  0079B2  00                 	db	0
   868  0079B3  08                 	db	8
   869  0079B4  0C                 	db	12
   870  0079B5  06                 	db	6
   871  0079B6  03                 	db	3
   872  0079B7  06                 	db	6
   873  0079B8  0C                 	db	12
   874  0079B9  08                 	db	8
   875  0079BA  00                 	db	0
   876  0079BB  80                 	db	128
   877  0079BC  80                 	db	128
   878  0079BD  80                 	db	128
   879  0079BE  80                 	db	128
   880  0079BF  80                 	db	128
   881  0079C0  80                 	db	128
   882  0079C1  80                 	db	128
   883  0079C2  80                 	db	128
   884  0079C3  00                 	db	0
   885  0079C4  00                 	db	0
   886  0079C5  03                 	db	3
   887  0079C6  07                 	db	7
   888  0079C7  04                 	db	4
   889  0079C8  00                 	db	0
   890  0079C9  00                 	db	0
   891  0079CA  00                 	db	0
   892  0079CB  20                 	db	32
   893  0079CC  74                 	db	116
   894  0079CD  54                 	db	84
   895  0079CE  54                 	db	84
   896  0079CF  3C                 	db	60
   897  0079D0  78                 	db	120
   898  0079D1  40                 	db	64
   899  0079D2  00                 	db	0
   900  0079D3  41                 	db	65
   901  0079D4  7F                 	db	127
   902  0079D5  3F                 	db	63
   903  0079D6  48                 	db	72
   904  0079D7  48                 	db	72
   905  0079D8  78                 	db	120
   906  0079D9  30                 	db	48
   907  0079DA  00                 	db	0
   908  0079DB  38                 	db	56
   909  0079DC  7C                 	db	124
   910  0079DD  44                 	db	68
   911  0079DE  44                 	db	68
   912  0079DF  6C                 	db	108
   913  0079E0  28                 	db	40
   914  0079E1  00                 	db	0
   915  0079E2  00                 	db	0
   916  0079E3  30                 	db	48
   917  0079E4  78                 	db	120
   918  0079E5  48                 	db	72
   919  0079E6  49                 	db	73
   920  0079E7  3F                 	db	63
   921  0079E8  7F                 	db	127
   922  0079E9  40                 	db	64
   923  0079EA  00                 	db	0
   924  0079EB  38                 	db	56
   925  0079EC  7C                 	db	124
   926  0079ED  54                 	db	84
   927  0079EE  54                 	db	84
   928  0079EF  5C                 	db	92
   929  0079F0  18                 	db	24
   930  0079F1  00                 	db	0
   931  0079F2  00                 	db	0
   932  0079F3  48                 	db	72
   933  0079F4  7E                 	db	126
   934  0079F5  7F                 	db	127
   935  0079F6  49                 	db	73
   936  0079F7  03                 	db	3
   937  0079F8  02                 	db	2
   938  0079F9  00                 	db	0
   939  0079FA  00                 	db	0
   940  0079FB  98                 	db	152
   941  0079FC  BC                 	db	188
   942  0079FD  A4                 	db	164
   943  0079FE  A4                 	db	164
   944  0079FF  F8                 	db	248
   945  007A00  7C                 	db	124
   946  007A01  04                 	db	4
   947  007A02  00                 	db	0
   948  007A03  41                 	db	65
   949  007A04  7F                 	db	127
   950  007A05  7F                 	db	127
   951  007A06  08                 	db	8
   952  007A07  04                 	db	4
   953  007A08  7C                 	db	124
   954  007A09  78                 	db	120
   955  007A0A  00                 	db	0
   956  007A0B  00                 	db	0
   957  007A0C  44                 	db	68
   958  007A0D  7D                 	db	125
   959  007A0E  7D                 	db	125
   960  007A0F  40                 	db	64
   961  007A10  00                 	db	0
   962  007A11  00                 	db	0
   963  007A12  00                 	db	0
   964  007A13  60                 	db	96
   965  007A14  E0                 	db	224
   966  007A15  80                 	db	128
   967  007A16  80                 	db	128
   968  007A17  FD                 	db	253
   969  007A18  7D                 	db	125
   970  007A19  00                 	db	0
   971  007A1A  00                 	db	0
   972  007A1B  41                 	db	65
   973  007A1C  7F                 	db	127
   974  007A1D  7F                 	db	127
   975  007A1E  10                 	db	16
   976  007A1F  38                 	db	56
   977  007A20  6C                 	db	108
   978  007A21  44                 	db	68
   979  007A22  00                 	db	0
   980  007A23  00                 	db	0
   981  007A24  41                 	db	65
   982  007A25  7F                 	db	127
   983  007A26  7F                 	db	127
   984  007A27  40                 	db	64
   985  007A28  00                 	db	0
   986  007A29  00                 	db	0
   987  007A2A  00                 	db	0
   988  007A2B  7C                 	db	124
   989  007A2C  7C                 	db	124
   990  007A2D  18                 	db	24
   991  007A2E  38                 	db	56
   992  007A2F  1C                 	db	28
   993  007A30  7C                 	db	124
   994  007A31  78                 	db	120
   995  007A32  00                 	db	0
   996  007A33  7C                 	db	124
   997  007A34  7C                 	db	124
   998  007A35  04                 	db	4
   999  007A36  04                 	db	4
  1000  007A37  7C                 	db	124
  1001  007A38  78                 	db	120
  1002  007A39  00                 	db	0
  1003  007A3A  00                 	db	0
  1004  007A3B  38                 	db	56
  1005  007A3C  7C                 	db	124
  1006  007A3D  44                 	db	68
  1007  007A3E  44                 	db	68
  1008  007A3F  7C                 	db	124
  1009  007A40  38                 	db	56
  1010  007A41  00                 	db	0
  1011  007A42  00                 	db	0
  1012  007A43  84                 	db	132
  1013  007A44  FC                 	db	252
  1014  007A45  F8                 	db	248
  1015  007A46  A4                 	db	164
  1016  007A47  24                 	db	36
  1017  007A48  3C                 	db	60
  1018  007A49  18                 	db	24
  1019  007A4A  00                 	db	0
  1020  007A4B  18                 	db	24
  1021  007A4C  3C                 	db	60
  1022  007A4D  24                 	db	36
  1023  007A4E  A4                 	db	164
  1024  007A4F  F8                 	db	248
  1025  007A50  FC                 	db	252
  1026  007A51  84                 	db	132
  1027  007A52  00                 	db	0
  1028  007A53  44                 	db	68
  1029  007A54  7C                 	db	124
  1030  007A55  78                 	db	120
  1031  007A56  4C                 	db	76
  1032  007A57  04                 	db	4
  1033  007A58  1C                 	db	28
  1034  007A59  18                 	db	24
  1035  007A5A  00                 	db	0
  1036  007A5B  48                 	db	72
  1037  007A5C  5C                 	db	92
  1038  007A5D  54                 	db	84
  1039  007A5E  54                 	db	84
  1040  007A5F  74                 	db	116
  1041  007A60  24                 	db	36
  1042  007A61  00                 	db	0
  1043  007A62  00                 	db	0
  1044  007A63  00                 	db	0
  1045  007A64  04                 	db	4
  1046  007A65  3E                 	db	62
  1047  007A66  7F                 	db	127
  1048  007A67  44                 	db	68
  1049  007A68  24                 	db	36
  1050  007A69  00                 	db	0
  1051  007A6A  00                 	db	0
  1052  007A6B  3C                 	db	60
  1053  007A6C  7C                 	db	124
  1054  007A6D  40                 	db	64
  1055  007A6E  40                 	db	64
  1056  007A6F  3C                 	db	60
  1057  007A70  7C                 	db	124
  1058  007A71  40                 	db	64
  1059  007A72  00                 	db	0
  1060  007A73  1C                 	db	28
  1061  007A74  3C                 	db	60
  1062  007A75  60                 	db	96
  1063  007A76  60                 	db	96
  1064  007A77  3C                 	db	60
  1065  007A78  1C                 	db	28
  1066  007A79  00                 	db	0
  1067  007A7A  00                 	db	0
  1068  007A7B  3C                 	db	60
  1069  007A7C  7C                 	db	124
  1070  007A7D  70                 	db	112
  1071  007A7E  38                 	db	56
  1072  007A7F  70                 	db	112
  1073  007A80  7C                 	db	124
  1074  007A81  3C                 	db	60
  1075  007A82  00                 	db	0
  1076  007A83  44                 	db	68
  1077  007A84  6C                 	db	108
  1078  007A85  38                 	db	56
  1079  007A86  10                 	db	16
  1080  007A87  38                 	db	56
  1081  007A88  6C                 	db	108
  1082  007A89  44                 	db	68
  1083  007A8A  00                 	db	0
  1084  007A8B  9C                 	db	156
  1085  007A8C  BC                 	db	188
  1086  007A8D  A0                 	db	160
  1087  007A8E  A0                 	db	160
  1088  007A8F  FC                 	db	252
  1089  007A90  7C                 	db	124
  1090  007A91  00                 	db	0
  1091  007A92  00                 	db	0
  1092  007A93  4C                 	db	76
  1093  007A94  64                 	db	100
  1094  007A95  74                 	db	116
  1095  007A96  5C                 	db	92
  1096  007A97  4C                 	db	76
  1097  007A98  64                 	db	100
  1098  007A99  00                 	db	0
  1099  007A9A  00                 	db	0
  1100  007A9B  08                 	db	8
  1101  007A9C  08                 	db	8
  1102  007A9D  3E                 	db	62
  1103  007A9E  77                 	db	119
  1104  007A9F  41                 	db	65
  1105  007AA0  41                 	db	65
  1106  007AA1  00                 	db	0
  1107  007AA2  00                 	db	0
  1108  007AA3  00                 	db	0
  1109  007AA4  00                 	db	0
  1110  007AA5  00                 	db	0
  1111  007AA6  77                 	db	119
  1112  007AA7  77                 	db	119
  1113  007AA8  00                 	db	0
  1114  007AA9  00                 	db	0
  1115  007AAA  00                 	db	0
  1116  007AAB  41                 	db	65
  1117  007AAC  41                 	db	65
  1118  007AAD  77                 	db	119
  1119  007AAE  3E                 	db	62
  1120  007AAF  08                 	db	8
  1121  007AB0  08                 	db	8
  1122  007AB1  00                 	db	0
  1123  007AB2  00                 	db	0
  1124  007AB3  02                 	db	2
  1125  007AB4  03                 	db	3
  1126  007AB5  01                 	db	1
  1127  007AB6  03                 	db	3
  1128  007AB7  02                 	db	2
  1129  007AB8  03                 	db	3
  1130  007AB9  01                 	db	1
  1131  007ABA  00                 	db	0
  1132  007ABB  70                 	db	112
  1133  007ABC  78                 	db	120
  1134  007ABD  4C                 	db	76
  1135  007ABE  46                 	db	70
  1136  007ABF  4C                 	db	76
  1137  007AC0  78                 	db	120
  1138  007AC1  70                 	db	112
  1139  007AC2  00                 	db	0
  1140  007AC3  0E                 	db	14
  1141  007AC4  9F                 	db	159
  1142  007AC5  91                 	db	145
  1143  007AC6  B1                 	db	177
  1144  007AC7  FB                 	db	251
  1145  007AC8  4A                 	db	74
  1146  007AC9  00                 	db	0
  1147  007ACA  00                 	db	0
  1148  007ACB  3A                 	db	58
  1149  007ACC  7A                 	db	122
  1150  007ACD  40                 	db	64
  1151  007ACE  40                 	db	64
  1152  007ACF  7A                 	db	122
  1153  007AD0  7A                 	db	122
  1154  007AD1  40                 	db	64
  1155  007AD2  00                 	db	0
  1156  007AD3  38                 	db	56
  1157  007AD4  7C                 	db	124
  1158  007AD5  54                 	db	84
  1159  007AD6  55                 	db	85
  1160  007AD7  5D                 	db	93
  1161  007AD8  19                 	db	25
  1162  007AD9  00                 	db	0
  1163  007ADA  00                 	db	0
  1164  007ADB  02                 	db	2
  1165  007ADC  23                 	db	35
  1166  007ADD  75                 	db	117
  1167  007ADE  55                 	db	85
  1168  007ADF  55                 	db	85
  1169  007AE0  7D                 	db	125
  1170  007AE1  7B                 	db	123
  1171  007AE2  42                 	db	66
  1172  007AE3  21                 	db	33
  1173  007AE4  75                 	db	117
  1174  007AE5  54                 	db	84
  1175  007AE6  54                 	db	84
  1176  007AE7  7D                 	db	125
  1177  007AE8  79                 	db	121
  1178  007AE9  40                 	db	64
  1179  007AEA  00                 	db	0
  1180  007AEB  21                 	db	33
  1181  007AEC  75                 	db	117
  1182  007AED  55                 	db	85
  1183  007AEE  54                 	db	84
  1184  007AEF  7C                 	db	124
  1185  007AF0  78                 	db	120
  1186  007AF1  40                 	db	64
  1187  007AF2  00                 	db	0
  1188  007AF3  20                 	db	32
  1189  007AF4  74                 	db	116
  1190  007AF5  57                 	db	87
  1191  007AF6  57                 	db	87
  1192  007AF7  7C                 	db	124
  1193  007AF8  78                 	db	120
  1194  007AF9  40                 	db	64
  1195  007AFA  00                 	db	0
  1196  007AFB  18                 	db	24
  1197  007AFC  3C                 	db	60
  1198  007AFD  A4                 	db	164
  1199  007AFE  A4                 	db	164
  1200  007AFF  E4                 	db	228
  1201  007B00  40                 	db	64
  1202  007B01  00                 	db	0
  1203  007B02  00                 	db	0
  1204  007B03  02                 	db	2
  1205  007B04  3B                 	db	59
  1206  007B05  7D                 	db	125
  1207  007B06  55                 	db	85
  1208  007B07  55                 	db	85
  1209  007B08  5D                 	db	93
  1210  007B09  1B                 	db	27
  1211  007B0A  02                 	db	2
  1212  007B0B  39                 	db	57
  1213  007B0C  7D                 	db	125
  1214  007B0D  54                 	db	84
  1215  007B0E  54                 	db	84
  1216  007B0F  5D                 	db	93
  1217  007B10  19                 	db	25
  1218  007B11  00                 	db	0
  1219  007B12  00                 	db	0
  1220  007B13  39                 	db	57
  1221  007B14  7D                 	db	125
  1222  007B15  55                 	db	85
  1223  007B16  54                 	db	84
  1224  007B17  5C                 	db	92
  1225  007B18  18                 	db	24
  1226  007B19  00                 	db	0
  1227  007B1A  00                 	db	0
  1228  007B1B  01                 	db	1
  1229  007B1C  45                 	db	69
  1230  007B1D  7C                 	db	124
  1231  007B1E  7C                 	db	124
  1232  007B1F  41                 	db	65
  1233  007B20  01                 	db	1
  1234  007B21  00                 	db	0
  1235  007B22  00                 	db	0
  1236  007B23  02                 	db	2
  1237  007B24  03                 	db	3
  1238  007B25  45                 	db	69
  1239  007B26  7D                 	db	125
  1240  007B27  7D                 	db	125
  1241  007B28  43                 	db	67
  1242  007B29  02                 	db	2
  1243  007B2A  00                 	db	0
  1244  007B2B  01                 	db	1
  1245  007B2C  45                 	db	69
  1246  007B2D  7D                 	db	125
  1247  007B2E  7C                 	db	124
  1248  007B2F  40                 	db	64
  1249  007B30  00                 	db	0
  1250  007B31  00                 	db	0
  1251  007B32  00                 	db	0
  1252  007B33  79                 	db	121
  1253  007B34  7D                 	db	125
  1254  007B35  16                 	db	22
  1255  007B36  12                 	db	18
  1256  007B37  16                 	db	22
  1257  007B38  7D                 	db	125
  1258  007B39  79                 	db	121
  1259  007B3A  00                 	db	0
  1260  007B3B  70                 	db	112
  1261  007B3C  78                 	db	120
  1262  007B3D  2B                 	db	43
  1263  007B3E  2B                 	db	43
  1264  007B3F  78                 	db	120
  1265  007B40  70                 	db	112
  1266  007B41  00                 	db	0
  1267  007B42  00                 	db	0
  1268  007B43  44                 	db	68
  1269  007B44  7C                 	db	124
  1270  007B45  7C                 	db	124
  1271  007B46  55                 	db	85
  1272  007B47  55                 	db	85
  1273  007B48  45                 	db	69
  1274  007B49  00                 	db	0
  1275  007B4A  00                 	db	0
  1276  007B4B  20                 	db	32
  1277  007B4C  74                 	db	116
  1278  007B4D  54                 	db	84
  1279  007B4E  54                 	db	84
  1280  007B4F  7C                 	db	124
  1281  007B50  7C                 	db	124
  1282  007B51  54                 	db	84
  1283  007B52  54                 	db	84
  1284  007B53  7C                 	db	124
  1285  007B54  7E                 	db	126
  1286  007B55  0B                 	db	11
  1287  007B56  09                 	db	9
  1288  007B57  7F                 	db	127
  1289  007B58  7F                 	db	127
  1290  007B59  49                 	db	73
  1291  007B5A  00                 	db	0
  1292  007B5B  32                 	db	50
  1293  007B5C  7B                 	db	123
  1294  007B5D  49                 	db	73
  1295  007B5E  49                 	db	73
  1296  007B5F  7B                 	db	123
  1297  007B60  32                 	db	50
  1298  007B61  00                 	db	0
  1299  007B62  00                 	db	0
  1300  007B63  32                 	db	50
  1301  007B64  7A                 	db	122
  1302  007B65  48                 	db	72
  1303  007B66  48                 	db	72
  1304  007B67  7A                 	db	122
  1305  007B68  32                 	db	50
  1306  007B69  00                 	db	0
  1307  007B6A  00                 	db	0
  1308  007B6B  32                 	db	50
  1309  007B6C  7A                 	db	122
  1310  007B6D  4A                 	db	74
  1311  007B6E  48                 	db	72
  1312  007B6F  78                 	db	120
  1313  007B70  30                 	db	48
  1314  007B71  00                 	db	0
  1315  007B72  00                 	db	0
  1316  007B73  3A                 	db	58
  1317  007B74  7B                 	db	123
  1318  007B75  41                 	db	65
  1319  007B76  41                 	db	65
  1320  007B77  7B                 	db	123
  1321  007B78  7A                 	db	122
  1322  007B79  40                 	db	64
  1323  007B7A  00                 	db	0
  1324  007B7B  3A                 	db	58
  1325  007B7C  7A                 	db	122
  1326  007B7D  42                 	db	66
  1327  007B7E  40                 	db	64
  1328  007B7F  78                 	db	120
  1329  007B80  78                 	db	120
  1330  007B81  40                 	db	64
  1331  007B82  00                 	db	0
  1332  007B83  9A                 	db	154
  1333  007B84  BA                 	db	186
  1334  007B85  A0                 	db	160
  1335  007B86  A0                 	db	160
  1336  007B87  FA                 	db	250
  1337  007B88  7A                 	db	122
  1338  007B89  00                 	db	0
  1339  007B8A  00                 	db	0
  1340  007B8B  01                 	db	1
  1341  007B8C  19                 	db	25
  1342  007B8D  3C                 	db	60
  1343  007B8E  66                 	db	102
  1344  007B8F  66                 	db	102
  1345  007B90  3C                 	db	60
  1346  007B91  19                 	db	25
  1347  007B92  01                 	db	1
  1348  007B93  3D                 	db	61
  1349  007B94  7D                 	db	125
  1350  007B95  40                 	db	64
  1351  007B96  40                 	db	64
  1352  007B97  7D                 	db	125
  1353  007B98  3D                 	db	61
  1354  007B99  00                 	db	0
  1355  007B9A  00                 	db	0
  1356  007B9B  18                 	db	24
  1357  007B9C  3C                 	db	60
  1358  007B9D  24                 	db	36
  1359  007B9E  E7                 	db	231
  1360  007B9F  E7                 	db	231
  1361  007BA0  24                 	db	36
  1362  007BA1  24                 	db	36
  1363  007BA2  00                 	db	0
  1364  007BA3  68                 	db	104
  1365  007BA4  7E                 	db	126
  1366  007BA5  7F                 	db	127
  1367  007BA6  49                 	db	73
  1368  007BA7  43                 	db	67
  1369  007BA8  66                 	db	102
  1370  007BA9  20                 	db	32
  1371  007BAA  00                 	db	0
  1372  007BAB  2B                 	db	43
  1373  007BAC  2F                 	db	47
  1374  007BAD  FC                 	db	252
  1375  007BAE  FC                 	db	252
  1376  007BAF  2F                 	db	47
  1377  007BB0  2B                 	db	43
  1378  007BB1  00                 	db	0
  1379  007BB2  00                 	db	0
  1380  007BB3  FF                 	db	255
  1381  007BB4  FF                 	db	255
  1382  007BB5  09                 	db	9
  1383  007BB6  09                 	db	9
  1384  007BB7  2F                 	db	47
  1385  007BB8  F6                 	db	246
  1386  007BB9  F8                 	db	248
  1387  007BBA  A0                 	db	160
  1388  007BBB  40                 	db	64
  1389  007BBC  C0                 	db	192
  1390  007BBD  88                 	db	136
  1391  007BBE  FE                 	db	254
  1392  007BBF  7F                 	db	127
  1393  007BC0  09                 	db	9
  1394  007BC1  03                 	db	3
  1395  007BC2  02                 	db	2
  1396  007BC3  20                 	db	32
  1397  007BC4  74                 	db	116
  1398  007BC5  54                 	db	84
  1399  007BC6  55                 	db	85
  1400  007BC7  7D                 	db	125
  1401  007BC8  79                 	db	121
  1402  007BC9  40                 	db	64
  1403  007BCA  00                 	db	0
  1404  007BCB  00                 	db	0
  1405  007BCC  44                 	db	68
  1406  007BCD  7D                 	db	125
  1407  007BCE  7D                 	db	125
  1408  007BCF  41                 	db	65
  1409  007BD0  00                 	db	0
  1410  007BD1  00                 	db	0
  1411  007BD2  00                 	db	0
  1412  007BD3  30                 	db	48
  1413  007BD4  78                 	db	120
  1414  007BD5  48                 	db	72
  1415  007BD6  4A                 	db	74
  1416  007BD7  7A                 	db	122
  1417  007BD8  32                 	db	50
  1418  007BD9  00                 	db	0
  1419  007BDA  00                 	db	0
  1420  007BDB  38                 	db	56
  1421  007BDC  78                 	db	120
  1422  007BDD  40                 	db	64
  1423  007BDE  42                 	db	66
  1424  007BDF  7A                 	db	122
  1425  007BE0  7A                 	db	122
  1426  007BE1  40                 	db	64
  1427  007BE2  00                 	db	0
  1428  007BE3  7A                 	db	122
  1429  007BE4  7A                 	db	122
  1430  007BE5  0A                 	db	10
  1431  007BE6  0A                 	db	10
  1432  007BE7  7A                 	db	122
  1433  007BE8  70                 	db	112
  1434  007BE9  00                 	db	0
  1435  007BEA  00                 	db	0
  1436  007BEB  7D                 	db	125
  1437  007BEC  7D                 	db	125
  1438  007BED  19                 	db	25
  1439  007BEE  31                 	db	49
  1440  007BEF  7D                 	db	125
  1441  007BF0  7D                 	db	125
  1442  007BF1  00                 	db	0
  1443  007BF2  00                 	db	0
  1444  007BF3  00                 	db	0
  1445  007BF4  26                 	db	38
  1446  007BF5  2F                 	db	47
  1447  007BF6  29                 	db	41
  1448  007BF7  2F                 	db	47
  1449  007BF8  2F                 	db	47
  1450  007BF9  28                 	db	40
  1451  007BFA  00                 	db	0
  1452  007BFB  00                 	db	0
  1453  007BFC  26                 	db	38
  1454  007BFD  2F                 	db	47
  1455  007BFE  29                 	db	41
  1456  007BFF  2F                 	db	47
  1457  007C00  26                 	db	38
  1458  007C01  00                 	db	0
  1459  007C02  00                 	db	0
  1460  007C03  30                 	db	48
  1461  007C04  78                 	db	120
  1462  007C05  4D                 	db	77
  1463  007C06  45                 	db	69
  1464  007C07  60                 	db	96
  1465  007C08  20                 	db	32
  1466  007C09  00                 	db	0
  1467  007C0A  00                 	db	0
  1468  007C0B  38                 	db	56
  1469  007C0C  38                 	db	56
  1470  007C0D  08                 	db	8
  1471  007C0E  08                 	db	8
  1472  007C0F  08                 	db	8
  1473  007C10  08                 	db	8
  1474  007C11  00                 	db	0
  1475  007C12  00                 	db	0
  1476  007C13  08                 	db	8
  1477  007C14  08                 	db	8
  1478  007C15  08                 	db	8
  1479  007C16  08                 	db	8
  1480  007C17  38                 	db	56
  1481  007C18  38                 	db	56
  1482  007C19  00                 	db	0
  1483  007C1A  00                 	db	0
  1484  007C1B  4F                 	db	79
  1485  007C1C  6F                 	db	111
  1486  007C1D  30                 	db	48
  1487  007C1E  18                 	db	24
  1488  007C1F  CC                 	db	204
  1489  007C20  EE                 	db	238
  1490  007C21  BB                 	db	187
  1491  007C22  91                 	db	145
  1492  007C23  4F                 	db	79
  1493  007C24  6F                 	db	111
  1494  007C25  30                 	db	48
  1495  007C26  18                 	db	24
  1496  007C27  6C                 	db	108
  1497  007C28  76                 	db	118
  1498  007C29  FB                 	db	251
  1499  007C2A  F9                 	db	249
  1500  007C2B  00                 	db	0
  1501  007C2C  00                 	db	0
  1502  007C2D  00                 	db	0
  1503  007C2E  7B                 	db	123
  1504  007C2F  7B                 	db	123
  1505  007C30  00                 	db	0
  1506  007C31  00                 	db	0
  1507  007C32  00                 	db	0
  1508  007C33  08                 	db	8
  1509  007C34  1C                 	db	28
  1510  007C35  36                 	db	54
  1511  007C36  22                 	db	34
  1512  007C37  08                 	db	8
  1513  007C38  1C                 	db	28
  1514  007C39  36                 	db	54
  1515  007C3A  22                 	db	34
  1516  007C3B  22                 	db	34
  1517  007C3C  36                 	db	54
  1518  007C3D  1C                 	db	28
  1519  007C3E  08                 	db	8
  1520  007C3F  22                 	db	34
  1521  007C40  36                 	db	54
  1522  007C41  1C                 	db	28
  1523  007C42  08                 	db	8
  1524  007C43  AA                 	db	170
  1525  007C44  00                 	db	0
  1526  007C45  55                 	db	85
  1527  007C46  00                 	db	0
  1528  007C47  AA                 	db	170
  1529  007C48  00                 	db	0
  1530  007C49  55                 	db	85
  1531  007C4A  00                 	db	0
  1532  007C4B  AA                 	db	170
  1533  007C4C  55                 	db	85
  1534  007C4D  AA                 	db	170
  1535  007C4E  55                 	db	85
  1536  007C4F  AA                 	db	170
  1537  007C50  55                 	db	85
  1538  007C51  AA                 	db	170
  1539  007C52  55                 	db	85
  1540  007C53  DD                 	db	221
  1541  007C54  FF                 	db	255
  1542  007C55  AA                 	db	170
  1543  007C56  77                 	db	119
  1544  007C57  DD                 	db	221
  1545  007C58  AA                 	db	170
  1546  007C59  FF                 	db	255
  1547  007C5A  77                 	db	119
  1548  007C5B  00                 	db	0
  1549  007C5C  00                 	db	0
  1550  007C5D  00                 	db	0
  1551  007C5E  FF                 	db	255
  1552  007C5F  FF                 	db	255
  1553  007C60  00                 	db	0
  1554  007C61  00                 	db	0
  1555  007C62  00                 	db	0
  1556  007C63  10                 	db	16
  1557  007C64  10                 	db	16
  1558  007C65  10                 	db	16
  1559  007C66  FF                 	db	255
  1560  007C67  FF                 	db	255
  1561  007C68  00                 	db	0
  1562  007C69  00                 	db	0
  1563  007C6A  00                 	db	0
  1564  007C6B  14                 	db	20
  1565  007C6C  14                 	db	20
  1566  007C6D  14                 	db	20
  1567  007C6E  FF                 	db	255
  1568  007C6F  FF                 	db	255
  1569  007C70  00                 	db	0
  1570  007C71  00                 	db	0
  1571  007C72  00                 	db	0
  1572  007C73  10                 	db	16
  1573  007C74  10                 	db	16
  1574  007C75  FF                 	db	255
  1575  007C76  FF                 	db	255
  1576  007C77  00                 	db	0
  1577  007C78  FF                 	db	255
  1578  007C79  FF                 	db	255
  1579  007C7A  00                 	db	0
  1580  007C7B  10                 	db	16
  1581  007C7C  10                 	db	16
  1582  007C7D  F0                 	db	240
  1583  007C7E  F0                 	db	240
  1584  007C7F  10                 	db	16
  1585  007C80  F0                 	db	240
  1586  007C81  F0                 	db	240
  1587  007C82  00                 	db	0
  1588  007C83  14                 	db	20
  1589  007C84  14                 	db	20
  1590  007C85  14                 	db	20
  1591  007C86  FC                 	db	252
  1592  007C87  FC                 	db	252
  1593  007C88  00                 	db	0
  1594  007C89  00                 	db	0
  1595  007C8A  00                 	db	0
  1596  007C8B  14                 	db	20
  1597  007C8C  14                 	db	20
  1598  007C8D  F7                 	db	247
  1599  007C8E  F7                 	db	247
  1600  007C8F  00                 	db	0
  1601  007C90  FF                 	db	255
  1602  007C91  FF                 	db	255
  1603  007C92  00                 	db	0
  1604  007C93  00                 	db	0
  1605  007C94  00                 	db	0
  1606  007C95  FF                 	db	255
  1607  007C96  FF                 	db	255
  1608  007C97  00                 	db	0
  1609  007C98  FF                 	db	255
  1610  007C99  FF                 	db	255
  1611  007C9A  00                 	db	0
  1612  007C9B  14                 	db	20
  1613  007C9C  14                 	db	20
  1614  007C9D  F4                 	db	244
  1615  007C9E  F4                 	db	244
  1616  007C9F  04                 	db	4
  1617  007CA0  FC                 	db	252
  1618  007CA1  FC                 	db	252
  1619  007CA2  00                 	db	0
  1620  007CA3  14                 	db	20
  1621  007CA4  14                 	db	20
  1622  007CA5  17                 	db	23
  1623  007CA6  17                 	db	23
  1624  007CA7  10                 	db	16
  1625  007CA8  1F                 	db	31
  1626  007CA9  1F                 	db	31
  1627  007CAA  00                 	db	0
  1628  007CAB  10                 	db	16
  1629  007CAC  10                 	db	16
  1630  007CAD  1F                 	db	31
  1631  007CAE  1F                 	db	31
  1632  007CAF  10                 	db	16
  1633  007CB0  1F                 	db	31
  1634  007CB1  1F                 	db	31
  1635  007CB2  00                 	db	0
  1636  007CB3  14                 	db	20
  1637  007CB4  14                 	db	20
  1638  007CB5  14                 	db	20
  1639  007CB6  1F                 	db	31
  1640  007CB7  1F                 	db	31
  1641  007CB8  00                 	db	0
  1642  007CB9  00                 	db	0
  1643  007CBA  00                 	db	0
  1644  007CBB  10                 	db	16
  1645  007CBC  10                 	db	16
  1646  007CBD  10                 	db	16
  1647  007CBE  F0                 	db	240
  1648  007CBF  F0                 	db	240
  1649  007CC0  00                 	db	0
  1650  007CC1  00                 	db	0
  1651  007CC2  00                 	db	0
  1652  007CC3  00                 	db	0
  1653  007CC4  00                 	db	0
  1654  007CC5  00                 	db	0
  1655  007CC6  1F                 	db	31
  1656  007CC7  1F                 	db	31
  1657  007CC8  10                 	db	16
  1658  007CC9  10                 	db	16
  1659  007CCA  10                 	db	16
  1660  007CCB  10                 	db	16
  1661  007CCC  10                 	db	16
  1662  007CCD  10                 	db	16
  1663  007CCE  1F                 	db	31
  1664  007CCF  1F                 	db	31
  1665  007CD0  10                 	db	16
  1666  007CD1  10                 	db	16
  1667  007CD2  10                 	db	16
  1668  007CD3  10                 	db	16
  1669  007CD4  10                 	db	16
  1670  007CD5  10                 	db	16
  1671  007CD6  F0                 	db	240
  1672  007CD7  F0                 	db	240
  1673  007CD8  10                 	db	16
  1674  007CD9  10                 	db	16
  1675  007CDA  10                 	db	16
  1676  007CDB  00                 	db	0
  1677  007CDC  00                 	db	0
  1678  007CDD  00                 	db	0
  1679  007CDE  FF                 	db	255
  1680  007CDF  FF                 	db	255
  1681  007CE0  10                 	db	16
  1682  007CE1  10                 	db	16
  1683  007CE2  10                 	db	16
  1684  007CE3  10                 	db	16
  1685  007CE4  10                 	db	16
  1686  007CE5  10                 	db	16
  1687  007CE6  10                 	db	16
  1688  007CE7  10                 	db	16
  1689  007CE8  10                 	db	16
  1690  007CE9  10                 	db	16
  1691  007CEA  10                 	db	16
  1692  007CEB  10                 	db	16
  1693  007CEC  10                 	db	16
  1694  007CED  10                 	db	16
  1695  007CEE  FF                 	db	255
  1696  007CEF  FF                 	db	255
  1697  007CF0  10                 	db	16
  1698  007CF1  10                 	db	16
  1699  007CF2  10                 	db	16
  1700  007CF3  00                 	db	0
  1701  007CF4  00                 	db	0
  1702  007CF5  00                 	db	0
  1703  007CF6  FF                 	db	255
  1704  007CF7  FF                 	db	255
  1705  007CF8  14                 	db	20
  1706  007CF9  14                 	db	20
  1707  007CFA  14                 	db	20
  1708  007CFB  00                 	db	0
  1709  007CFC  00                 	db	0
  1710  007CFD  FF                 	db	255
  1711  007CFE  FF                 	db	255
  1712  007CFF  00                 	db	0
  1713  007D00  FF                 	db	255
  1714  007D01  FF                 	db	255
  1715  007D02  10                 	db	16
  1716  007D03  00                 	db	0
  1717  007D04  00                 	db	0
  1718  007D05  1F                 	db	31
  1719  007D06  1F                 	db	31
  1720  007D07  10                 	db	16
  1721  007D08  17                 	db	23
  1722  007D09  17                 	db	23
  1723  007D0A  14                 	db	20
  1724  007D0B  00                 	db	0
  1725  007D0C  00                 	db	0
  1726  007D0D  FC                 	db	252
  1727  007D0E  FC                 	db	252
  1728  007D0F  04                 	db	4
  1729  007D10  F4                 	db	244
  1730  007D11  F4                 	db	244
  1731  007D12  14                 	db	20
  1732  007D13  14                 	db	20
  1733  007D14  14                 	db	20
  1734  007D15  17                 	db	23
  1735  007D16  17                 	db	23
  1736  007D17  10                 	db	16
  1737  007D18  17                 	db	23
  1738  007D19  17                 	db	23
  1739  007D1A  14                 	db	20
  1740  007D1B  14                 	db	20
  1741  007D1C  14                 	db	20
  1742  007D1D  F4                 	db	244
  1743  007D1E  F4                 	db	244
  1744  007D1F  04                 	db	4
  1745  007D20  F4                 	db	244
  1746  007D21  F4                 	db	244
  1747  007D22  14                 	db	20
  1748  007D23  00                 	db	0
  1749  007D24  00                 	db	0
  1750  007D25  FF                 	db	255
  1751  007D26  FF                 	db	255
  1752  007D27  00                 	db	0
  1753  007D28  F7                 	db	247
  1754  007D29  F7                 	db	247
  1755  007D2A  14                 	db	20
  1756  007D2B  14                 	db	20
  1757  007D2C  14                 	db	20
  1758  007D2D  14                 	db	20
  1759  007D2E  14                 	db	20
  1760  007D2F  14                 	db	20
  1761  007D30  14                 	db	20
  1762  007D31  14                 	db	20
  1763  007D32  14                 	db	20
  1764  007D33  14                 	db	20
  1765  007D34  14                 	db	20
  1766  007D35  F7                 	db	247
  1767  007D36  F7                 	db	247
  1768  007D37  00                 	db	0
  1769  007D38  F7                 	db	247
  1770  007D39  F7                 	db	247
  1771  007D3A  14                 	db	20
  1772  007D3B  14                 	db	20
  1773  007D3C  14                 	db	20
  1774  007D3D  14                 	db	20
  1775  007D3E  17                 	db	23
  1776  007D3F  17                 	db	23
  1777  007D40  14                 	db	20
  1778  007D41  14                 	db	20
  1779  007D42  14                 	db	20
  1780  007D43  10                 	db	16
  1781  007D44  10                 	db	16
  1782  007D45  1F                 	db	31
  1783  007D46  1F                 	db	31
  1784  007D47  10                 	db	16
  1785  007D48  1F                 	db	31
  1786  007D49  1F                 	db	31
  1787  007D4A  10                 	db	16
  1788  007D4B  14                 	db	20
  1789  007D4C  14                 	db	20
  1790  007D4D  14                 	db	20
  1791  007D4E  F4                 	db	244
  1792  007D4F  F4                 	db	244
  1793  007D50  14                 	db	20
  1794  007D51  14                 	db	20
  1795  007D52  14                 	db	20
  1796  007D53  10                 	db	16
  1797  007D54  10                 	db	16
  1798  007D55  F0                 	db	240
  1799  007D56  F0                 	db	240
  1800  007D57  10                 	db	16
  1801  007D58  F0                 	db	240
  1802  007D59  F0                 	db	240
  1803  007D5A  10                 	db	16
  1804  007D5B  00                 	db	0
  1805  007D5C  00                 	db	0
  1806  007D5D  1F                 	db	31
  1807  007D5E  1F                 	db	31
  1808  007D5F  10                 	db	16
  1809  007D60  1F                 	db	31
  1810  007D61  1F                 	db	31
  1811  007D62  10                 	db	16
  1812  007D63  00                 	db	0
  1813  007D64  00                 	db	0
  1814  007D65  00                 	db	0
  1815  007D66  1F                 	db	31
  1816  007D67  1F                 	db	31
  1817  007D68  14                 	db	20
  1818  007D69  14                 	db	20
  1819  007D6A  14                 	db	20
  1820  007D6B  00                 	db	0
  1821  007D6C  00                 	db	0
  1822  007D6D  00                 	db	0
  1823  007D6E  FC                 	db	252
  1824  007D6F  FC                 	db	252
  1825  007D70  14                 	db	20
  1826  007D71  14                 	db	20
  1827  007D72  14                 	db	20
  1828  007D73  00                 	db	0
  1829  007D74  00                 	db	0
  1830  007D75  F0                 	db	240
  1831  007D76  F0                 	db	240
  1832  007D77  10                 	db	16
  1833  007D78  F0                 	db	240
  1834  007D79  F0                 	db	240
  1835  007D7A  10                 	db	16
  1836  007D7B  10                 	db	16
  1837  007D7C  10                 	db	16
  1838  007D7D  FF                 	db	255
  1839  007D7E  FF                 	db	255
  1840  007D7F  10                 	db	16
  1841  007D80  FF                 	db	255
  1842  007D81  FF                 	db	255
  1843  007D82  10                 	db	16
  1844  007D83  14                 	db	20
  1845  007D84  14                 	db	20
  1846  007D85  14                 	db	20
  1847  007D86  FF                 	db	255
  1848  007D87  FF                 	db	255
  1849  007D88  14                 	db	20
  1850  007D89  14                 	db	20
  1851  007D8A  14                 	db	20
  1852  007D8B  10                 	db	16
  1853  007D8C  10                 	db	16
  1854  007D8D  10                 	db	16
  1855  007D8E  1F                 	db	31
  1856  007D8F  1F                 	db	31
  1857  007D90  00                 	db	0
  1858  007D91  00                 	db	0
  1859  007D92  00                 	db	0
  1860  007D93  00                 	db	0
  1861  007D94  00                 	db	0
  1862  007D95  00                 	db	0
  1863  007D96  F0                 	db	240
  1864  007D97  F0                 	db	240
  1865  007D98  10                 	db	16
  1866  007D99  10                 	db	16
  1867  007D9A  10                 	db	16
  1868  007D9B  FF                 	db	255
  1869  007D9C  FF                 	db	255
  1870  007D9D  FF                 	db	255
  1871  007D9E  FF                 	db	255
  1872  007D9F  FF                 	db	255
  1873  007DA0  FF                 	db	255
  1874  007DA1  FF                 	db	255
  1875  007DA2  FF                 	db	255
  1876  007DA3  F0                 	db	240
  1877  007DA4  F0                 	db	240
  1878  007DA5  F0                 	db	240
  1879  007DA6  F0                 	db	240
  1880  007DA7  F0                 	db	240
  1881  007DA8  F0                 	db	240
  1882  007DA9  F0                 	db	240
  1883  007DAA  F0                 	db	240
  1884  007DAB  FF                 	db	255
  1885  007DAC  FF                 	db	255
  1886  007DAD  FF                 	db	255
  1887  007DAE  FF                 	db	255
  1888  007DAF  00                 	db	0
  1889  007DB0  00                 	db	0
  1890  007DB1  00                 	db	0
  1891  007DB2  00                 	db	0
  1892  007DB3  00                 	db	0
  1893  007DB4  00                 	db	0
  1894  007DB5  00                 	db	0
  1895  007DB6  00                 	db	0
  1896  007DB7  FF                 	db	255
  1897  007DB8  FF                 	db	255
  1898  007DB9  FF                 	db	255
  1899  007DBA  FF                 	db	255
  1900  007DBB  0F                 	db	15
  1901  007DBC  0F                 	db	15
  1902  007DBD  0F                 	db	15
  1903  007DBE  0F                 	db	15
  1904  007DBF  0F                 	db	15
  1905  007DC0  0F                 	db	15
  1906  007DC1  0F                 	db	15
  1907  007DC2  0F                 	db	15
  1908  007DC3  38                 	db	56
  1909  007DC4  7C                 	db	124
  1910  007DC5  44                 	db	68
  1911  007DC6  6C                 	db	108
  1912  007DC7  38                 	db	56
  1913  007DC8  6C                 	db	108
  1914  007DC9  44                 	db	68
  1915  007DCA  00                 	db	0
  1916  007DCB  FC                 	db	252
  1917  007DCC  FE                 	db	254
  1918  007DCD  2A                 	db	42
  1919  007DCE  2A                 	db	42
  1920  007DCF  3E                 	db	62
  1921  007DD0  14                 	db	20
  1922  007DD1  00                 	db	0
  1923  007DD2  00                 	db	0
  1924  007DD3  7E                 	db	126
  1925  007DD4  7E                 	db	126
  1926  007DD5  02                 	db	2
  1927  007DD6  02                 	db	2
  1928  007DD7  06                 	db	6
  1929  007DD8  06                 	db	6
  1930  007DD9  00                 	db	0
  1931  007DDA  00                 	db	0
  1932  007DDB  02                 	db	2
  1933  007DDC  7E                 	db	126
  1934  007DDD  7E                 	db	126
  1935  007DDE  02                 	db	2
  1936  007DDF  7E                 	db	126
  1937  007DE0  7E                 	db	126
  1938  007DE1  02                 	db	2
  1939  007DE2  00                 	db	0
  1940  007DE3  63                 	db	99
  1941  007DE4  77                 	db	119
  1942  007DE5  5D                 	db	93
  1943  007DE6  49                 	db	73
  1944  007DE7  63                 	db	99
  1945  007DE8  63                 	db	99
  1946  007DE9  00                 	db	0
  1947  007DEA  00                 	db	0
  1948  007DEB  38                 	db	56
  1949  007DEC  7C                 	db	124
  1950  007DED  44                 	db	68
  1951  007DEE  7C                 	db	124
  1952  007DEF  3C                 	db	60
  1953  007DF0  04                 	db	4
  1954  007DF1  04                 	db	4
  1955  007DF2  00                 	db	0
  1956  007DF3  80                 	db	128
  1957  007DF4  FE                 	db	254
  1958  007DF5  7E                 	db	126
  1959  007DF6  20                 	db	32
  1960  007DF7  20                 	db	32
  1961  007DF8  3E                 	db	62
  1962  007DF9  1E                 	db	30
  1963  007DFA  00                 	db	0
  1964  007DFB  04                 	db	4
  1965  007DFC  06                 	db	6
  1966  007DFD  02                 	db	2
  1967  007DFE  7E                 	db	126
  1968  007DFF  7C                 	db	124
  1969  007E00  06                 	db	6
  1970  007E01  02                 	db	2
  1971  007E02  00                 	db	0
  1972  007E03  99                 	db	153
  1973  007E04  BD                 	db	189
  1974  007E05  E7                 	db	231
  1975  007E06  E7                 	db	231
  1976  007E07  BD                 	db	189
  1977  007E08  99                 	db	153
  1978  007E09  00                 	db	0
  1979  007E0A  00                 	db	0
  1980  007E0B  1C                 	db	28
  1981  007E0C  3E                 	db	62
  1982  007E0D  6B                 	db	107
  1983  007E0E  49                 	db	73
  1984  007E0F  6B                 	db	107
  1985  007E10  3E                 	db	62
  1986  007E11  1C                 	db	28
  1987  007E12  00                 	db	0
  1988  007E13  4C                 	db	76
  1989  007E14  7E                 	db	126
  1990  007E15  73                 	db	115
  1991  007E16  01                 	db	1
  1992  007E17  73                 	db	115
  1993  007E18  7E                 	db	126
  1994  007E19  4C                 	db	76
  1995  007E1A  00                 	db	0
  1996  007E1B  30                 	db	48
  1997  007E1C  78                 	db	120
  1998  007E1D  4A                 	db	74
  1999  007E1E  4F                 	db	79
  2000  007E1F  7D                 	db	125
  2001  007E20  39                 	db	57
  2002  007E21  00                 	db	0
  2003  007E22  00                 	db	0
  2004  007E23  18                 	db	24
  2005  007E24  3C                 	db	60
  2006  007E25  24                 	db	36
  2007  007E26  3C                 	db	60
  2008  007E27  3C                 	db	60
  2009  007E28  24                 	db	36
  2010  007E29  3C                 	db	60
  2011  007E2A  18                 	db	24
  2012  007E2B  98                 	db	152
  2013  007E2C  FC                 	db	252
  2014  007E2D  64                 	db	100
  2015  007E2E  3C                 	db	60
  2016  007E2F  3E                 	db	62
  2017  007E30  27                 	db	39
  2018  007E31  3D                 	db	61
  2019  007E32  18                 	db	24
  2020  007E33  00                 	db	0
  2021  007E34  00                 	db	0
  2022  007E35  00                 	db	0
  2023  007E36  00                 	db	0
  2024  007E37  00                 	db	0
  2025  007E38  00                 	db	0
  2026  007E39  00                 	db	0
  2027  007E3A  00                 	db	0
  2028  007E3B  00                 	db	0
  2029  007E3C  00                 	db	0
  2030  007E3D  00                 	db	0
  2031  007E3E  00                 	db	0
  2032  007E3F  00                 	db	0
  2033  007E40  00                 	db	0
  2034  007E41  00                 	db	0
  2035  007E42  00                 	db	0
  2036  007E43  00                 	db	0
  2037  007E44  00                 	db	0
  2038  007E45  00                 	db	0
  2039  007E46  00                 	db	0
  2040  007E47  00                 	db	0
  2041  007E48  00                 	db	0
  2042  007E49  00                 	db	0
  2043  007E4A  00                 	db	0
  2044  007E4B  00                 	db	0
  2045  007E4C  00                 	db	0
  2046  007E4D  00                 	db	0
  2047  007E4E  00                 	db	0
  2048  007E4F  00                 	db	0
  2049  007E50  00                 	db	0
  2050  007E51  00                 	db	0
  2051  007E52  00                 	db	0
  2052  007E53  00                 	db	0
  2053  007E54  00                 	db	0
  2054  007E55  00                 	db	0
  2055  007E56  00                 	db	0
  2056  007E57  00                 	db	0
  2057  007E58  00                 	db	0
  2058  007E59  00                 	db	0
  2059  007E5A  00                 	db	0
  2060  007E5B  00                 	db	0
  2061  007E5C  00                 	db	0
  2062  007E5D  00                 	db	0
  2063  007E5E  00                 	db	0
  2064  007E5F  00                 	db	0
  2065  007E60  00                 	db	0
  2066  007E61  00                 	db	0
  2067  007E62  00                 	db	0
  2068  007E63  00                 	db	0
  2069  007E64  00                 	db	0
  2070  007E65  00                 	db	0
  2071  007E66  00                 	db	0
  2072  007E67  00                 	db	0
  2073  007E68  00                 	db	0
  2074  007E69  00                 	db	0
  2075  007E6A  00                 	db	0
  2076  007E6B  00                 	db	0
  2077  007E6C  00                 	db	0
  2078  007E6D  00                 	db	0
  2079  007E6E  00                 	db	0
  2080  007E6F  00                 	db	0
  2081  007E70  00                 	db	0
  2082  007E71  00                 	db	0
  2083  007E72  00                 	db	0
  2084  007E73  00                 	db	0
  2085  007E74  00                 	db	0
  2086  007E75  00                 	db	0
  2087  007E76  00                 	db	0
  2088  007E77  00                 	db	0
  2089  007E78  00                 	db	0
  2090  007E79  00                 	db	0
  2091  007E7A  00                 	db	0
  2092  007E7B  00                 	db	0
  2093  007E7C  00                 	db	0
  2094  007E7D  00                 	db	0
  2095  007E7E  00                 	db	0
  2096  007E7F  00                 	db	0
  2097  007E80  00                 	db	0
  2098  007E81  00                 	db	0
  2099  007E82  00                 	db	0
  2100  007E83  00                 	db	0
  2101  007E84  00                 	db	0
  2102  007E85  00                 	db	0
  2103  007E86  00                 	db	0
  2104  007E87  00                 	db	0
  2105  007E88  00                 	db	0
  2106  007E89  00                 	db	0
  2107  007E8A  00                 	db	0
  2108  007E8B  00                 	db	0
  2109  007E8C  00                 	db	0
  2110  007E8D  00                 	db	0
  2111  007E8E  00                 	db	0
  2112  007E8F  00                 	db	0
  2113  007E90  00                 	db	0
  2114  007E91  00                 	db	0
  2115  007E92  00                 	db	0
  2116  007E93  00                 	db	0
  2117  007E94  00                 	db	0
  2118  007E95  00                 	db	0
  2119  007E96  00                 	db	0
  2120  007E97  00                 	db	0
  2121  007E98  00                 	db	0
  2122  007E99  00                 	db	0
  2123  007E9A  00                 	db	0
  2124  007E9B  00                 	db	0
  2125  007E9C  00                 	db	0
  2126  007E9D  00                 	db	0
  2127  007E9E  00                 	db	0
  2128  007E9F  00                 	db	0
  2129  007EA0  00                 	db	0
  2130  007EA1  00                 	db	0
  2131  007EA2  00                 	db	0
  2132  007EA3  00                 	db	0
  2133  007EA4  00                 	db	0
  2134  007EA5  00                 	db	0
  2135  007EA6  00                 	db	0
  2136  007EA7  00                 	db	0
  2137  007EA8  00                 	db	0
  2138  007EA9  00                 	db	0
  2139  007EAA  00                 	db	0
  2140  007EAB  00                 	db	0
  2141  007EAC  00                 	db	0
  2142  007EAD  00                 	db	0
  2143  007EAE  00                 	db	0
  2144  007EAF  00                 	db	0
  2145  007EB0  00                 	db	0
  2146  007EB1  00                 	db	0
  2147  007EB2  00                 	db	0
  2148  007EB3  00                 	db	0
  2149  007EB4  00                 	db	0
  2150  007EB5  00                 	db	0
  2151  007EB6  00                 	db	0
  2152  007EB7  00                 	db	0
  2153  007EB8  00                 	db	0
  2154  007EB9  00                 	db	0
  2155  007EBA  00                 	db	0
  2156  007EBB  00                 	db	0
  2157  007EBC  00                 	db	0
  2158  007EBD  00                 	db	0
  2159  007EBE  00                 	db	0
  2160  007EBF  00                 	db	0
  2161  007EC0  00                 	db	0
  2162  007EC1  00                 	db	0
  2163  007EC2  00                 	db	0
  2164  007EC3                     __end_of_Font8x8:
  2165                           	opt stack 0
  2166  007EC3                     _Font3x6:
  2167                           	opt stack 0
  2168  007EC3  00                 	db	0
  2169  007EC4  00                 	db	0
  2170  007EC5  00                 	db	0
  2171  007EC6  00                 	db	0
  2172  007EC7  5C                 	db	92
  2173  007EC8  00                 	db	0
  2174  007EC9  0C                 	db	12
  2175  007ECA  00                 	db	0
  2176  007ECB  0C                 	db	12
  2177  007ECC  7C                 	db	124
  2178  007ECD  28                 	db	40
  2179  007ECE  7C                 	db	124
  2180  007ECF  7C                 	db	124
  2181  007ED0  44                 	db	68
  2182  007ED1  7C                 	db	124
  2183  007ED2  24                 	db	36
  2184  007ED3  10                 	db	16
  2185  007ED4  48                 	db	72
  2186  007ED5  28                 	db	40
  2187  007ED6  54                 	db	84
  2188  007ED7  08                 	db	8
  2189  007ED8  00                 	db	0
  2190  007ED9  0C                 	db	12
  2191  007EDA  00                 	db	0
  2192  007EDB  38                 	db	56
  2193  007EDC  44                 	db	68
  2194  007EDD  00                 	db	0
  2195  007EDE  44                 	db	68
  2196  007EDF  38                 	db	56
  2197  007EE0  00                 	db	0
  2198  007EE1  20                 	db	32
  2199  007EE2  10                 	db	16
  2200  007EE3  08                 	db	8
  2201  007EE4  10                 	db	16
  2202  007EE5  38                 	db	56
  2203  007EE6  10                 	db	16
  2204  007EE7  80                 	db	128
  2205  007EE8  40                 	db	64
  2206  007EE9  00                 	db	0
  2207  007EEA  10                 	db	16
  2208  007EEB  10                 	db	16
  2209  007EEC  10                 	db	16
  2210  007EED  00                 	db	0
  2211  007EEE  40                 	db	64
  2212  007EEF  00                 	db	0
  2213  007EF0  20                 	db	32
  2214  007EF1  10                 	db	16
  2215  007EF2  08                 	db	8
  2216  007EF3  38                 	db	56
  2217  007EF4  44                 	db	68
  2218  007EF5  38                 	db	56
  2219  007EF6  00                 	db	0
  2220  007EF7  7C                 	db	124
  2221  007EF8  00                 	db	0
  2222  007EF9  64                 	db	100
  2223  007EFA  54                 	db	84
  2224  007EFB  48                 	db	72
  2225  007EFC  44                 	db	68
  2226  007EFD  54                 	db	84
  2227  007EFE  28                 	db	40
  2228  007EFF  1C                 	db	28
  2229  007F00  10                 	db	16
  2230  007F01  7C                 	db	124
  2231  007F02  4C                 	db	76
  2232  007F03  54                 	db	84
  2233  007F04  24                 	db	36
  2234  007F05  38                 	db	56
  2235  007F06  54                 	db	84
  2236  007F07  20                 	db	32
  2237  007F08  04                 	db	4
  2238  007F09  74                 	db	116
  2239  007F0A  0C                 	db	12
  2240  007F0B  28                 	db	40
  2241  007F0C  54                 	db	84
  2242  007F0D  28                 	db	40
  2243  007F0E  08                 	db	8
  2244  007F0F  54                 	db	84
  2245  007F10  38                 	db	56
  2246  007F11  00                 	db	0
  2247  007F12  50                 	db	80
  2248  007F13  00                 	db	0
  2249  007F14  80                 	db	128
  2250  007F15  50                 	db	80
  2251  007F16  00                 	db	0
  2252  007F17  10                 	db	16
  2253  007F18  28                 	db	40
  2254  007F19  44                 	db	68
  2255  007F1A  28                 	db	40
  2256  007F1B  28                 	db	40
  2257  007F1C  28                 	db	40
  2258  007F1D  44                 	db	68
  2259  007F1E  28                 	db	40
  2260  007F1F  10                 	db	16
  2261  007F20  04                 	db	4
  2262  007F21  54                 	db	84
  2263  007F22  08                 	db	8
  2264  007F23  38                 	db	56
  2265  007F24  4C                 	db	76
  2266  007F25  5C                 	db	92
  2267  007F26  78                 	db	120
  2268  007F27  14                 	db	20
  2269  007F28  78                 	db	120
  2270  007F29  7C                 	db	124
  2271  007F2A  54                 	db	84
  2272  007F2B  28                 	db	40
  2273  007F2C  38                 	db	56
  2274  007F2D  44                 	db	68
  2275  007F2E  44                 	db	68
  2276  007F2F  7C                 	db	124
  2277  007F30  44                 	db	68
  2278  007F31  38                 	db	56
  2279  007F32  7C                 	db	124
  2280  007F33  54                 	db	84
  2281  007F34  44                 	db	68
  2282  007F35  7C                 	db	124
  2283  007F36  14                 	db	20
  2284  007F37  04                 	db	4
  2285  007F38  38                 	db	56
  2286  007F39  44                 	db	68
  2287  007F3A  34                 	db	52
  2288  007F3B  7C                 	db	124
  2289  007F3C  10                 	db	16
  2290  007F3D  7C                 	db	124
  2291  007F3E  00                 	db	0
  2292  007F3F  7C                 	db	124
  2293  007F40  00                 	db	0
  2294  007F41  20                 	db	32
  2295  007F42  40                 	db	64
  2296  007F43  3C                 	db	60
  2297  007F44  7C                 	db	124
  2298  007F45  10                 	db	16
  2299  007F46  6C                 	db	108
  2300  007F47  7C                 	db	124
  2301  007F48  40                 	db	64
  2302  007F49  40                 	db	64
  2303  007F4A  7C                 	db	124
  2304  007F4B  08                 	db	8
  2305  007F4C  7C                 	db	124
  2306  007F4D  7C                 	db	124
  2307  007F4E  04                 	db	4
  2308  007F4F  7C                 	db	124
  2309  007F50  7C                 	db	124
  2310  007F51  44                 	db	68
  2311  007F52  7C                 	db	124
  2312  007F53  7C                 	db	124
  2313  007F54  14                 	db	20
  2314  007F55  08                 	db	8
  2315  007F56  38                 	db	56
  2316  007F57  44                 	db	68
  2317  007F58  78                 	db	120
  2318  007F59  7C                 	db	124
  2319  007F5A  14                 	db	20
  2320  007F5B  68                 	db	104
  2321  007F5C  48                 	db	72
  2322  007F5D  54                 	db	84
  2323  007F5E  24                 	db	36
  2324  007F5F  04                 	db	4
  2325  007F60  7C                 	db	124
  2326  007F61  04                 	db	4
  2327  007F62  7C                 	db	124
  2328  007F63  40                 	db	64
  2329  007F64  7C                 	db	124
  2330  007F65  3C                 	db	60
  2331  007F66  40                 	db	64
  2332  007F67  3C                 	db	60
  2333  007F68  7C                 	db	124
  2334  007F69  20                 	db	32
  2335  007F6A  7C                 	db	124
  2336  007F6B  6C                 	db	108
  2337  007F6C  10                 	db	16
  2338  007F6D  6C                 	db	108
  2339  007F6E  1C                 	db	28
  2340  007F6F  60                 	db	96
  2341  007F70  1C                 	db	28
  2342  007F71  64                 	db	100
  2343  007F72  54                 	db	84
  2344  007F73  4C                 	db	76
  2345  007F74  7C                 	db	124
  2346  007F75  44                 	db	68
  2347  007F76  00                 	db	0
  2348  007F77  08                 	db	8
  2349  007F78  10                 	db	16
  2350  007F79  20                 	db	32
  2351  007F7A  44                 	db	68
  2352  007F7B  7C                 	db	124
  2353  007F7C  00                 	db	0
  2354  007F7D  08                 	db	8
  2355  007F7E  04                 	db	4
  2356  007F7F  08                 	db	8
  2357  007F80  80                 	db	128
  2358  007F81  80                 	db	128
  2359  007F82  80                 	db	128
  2360  007F83  04                 	db	4
  2361  007F84  08                 	db	8
  2362  007F85  00                 	db	0
  2363  007F86                     __end_of_Font3x6:
  2364                           	opt stack 0
  2365  007F86                     _dpowers:
  2366                           	opt stack 0
  2367  007F86  0001               	dw	1
  2368  007F88  0000               	dw	0
  2369  007F8A  000A               	dw	10
  2370  007F8C  0000               	dw	0
  2371  007F8E  0064               	dw	100
  2372  007F90  0000               	dw	0
  2373  007F92  03E8               	dw	1000
  2374  007F94  0000               	dw	0
  2375  007F96  2710               	dw	10000
  2376  007F98  0000               	dw	0
  2377  007F9A  86A0               	dw	34464
  2378  007F9C  0001               	dw	1
  2379  007F9E  4240               	dw	16960
  2380  007FA0  000F               	dw	15
  2381  007FA2  9680               	dw	38528
  2382  007FA4  0098               	dw	152
  2383  007FA6  E100               	dw	57600
  2384  007FA8  05F5               	dw	1525
  2385  007FAA  CA00               	dw	51712
  2386  007FAC  3B9A               	dw	15258
  2387  007FAE                     __end_of_dpowers:
  2388                           	opt stack 0
  2389  007FAE                     __powers_:
  2390                           	opt stack 0
  2391  007FAE  00                 	db	0
  2392  007FAF  80                 	db	128
  2393  007FB0  3F                 	db	63
  2394  007FB1  00                 	db	0
  2395  007FB2  20                 	db	32
  2396  007FB3  41                 	db	65
  2397  007FB4  00                 	db	0
  2398  007FB5  C8                 	db	200
  2399  007FB6  42                 	db	66
  2400  007FB7  00                 	db	0
  2401  007FB8  7A                 	db	122
  2402  007FB9  44                 	db	68
  2403  007FBA  40                 	db	64
  2404  007FBB  1C                 	db	28
  2405  007FBC  46                 	db	70
  2406  007FBD  50                 	db	80
  2407  007FBE  C3                 	db	195
  2408  007FBF  47                 	db	71
  2409  007FC0  24                 	db	36
  2410  007FC1  74                 	db	116
  2411  007FC2  49                 	db	73
  2412  007FC3  97                 	db	151
  2413  007FC4  18                 	db	24
  2414  007FC5  4B                 	db	75
  2415  007FC6  BC                 	db	188
  2416  007FC7  BE                 	db	190
  2417  007FC8  4C                 	db	76
  2418  007FC9  6B                 	db	107
  2419  007FCA  6E                 	db	110
  2420  007FCB  4E                 	db	78
  2421  007FCC  03                 	db	3
  2422  007FCD  15                 	db	21
  2423  007FCE  50                 	db	80
  2424  007FCF  79                 	db	121
  2425  007FD0  AD                 	db	173
  2426  007FD1  60                 	db	96
  2427  007FD2  F3                 	db	243
  2428  007FD3  49                 	db	73
  2429  007FD4  71                 	db	113
  2430  007FD5                     __end_of__powers_:
  2431                           	opt stack 0
  2432  007FD5                     __npowers_:
  2433                           	opt stack 0
  2434  007FD5  00                 	db	0
  2435  007FD6  80                 	db	128
  2436  007FD7  3F                 	db	63
  2437  007FD8  CD                 	db	205
  2438  007FD9  CC                 	db	204
  2439  007FDA  3D                 	db	61
  2440  007FDB  D7                 	db	215
  2441  007FDC  23                 	db	35
  2442  007FDD  3C                 	db	60
  2443  007FDE  12                 	db	18
  2444  007FDF  83                 	db	131
  2445  007FE0  3A                 	db	58
  2446  007FE1  B7                 	db	183
  2447  007FE2  D1                 	db	209
  2448  007FE3  38                 	db	56
  2449  007FE4  C6                 	db	198
  2450  007FE5  27                 	db	39
  2451  007FE6  37                 	db	55
  2452  007FE7  38                 	db	56
  2453  007FE8  86                 	db	134
  2454  007FE9  35                 	db	53
  2455  007FEA  C0                 	db	192
  2456  007FEB  D6                 	db	214
  2457  007FEC  33                 	db	51
  2458  007FED  CC                 	db	204
  2459  007FEE  2B                 	db	43
  2460  007FEF  32                 	db	50
  2461  007FF0  70                 	db	112
  2462  007FF1  89                 	db	137
  2463  007FF2  30                 	db	48
  2464  007FF3  E7                 	db	231
  2465  007FF4  DB                 	db	219
  2466  007FF5  2E                 	db	46
  2467  007FF6  E5                 	db	229
  2468  007FF7  3C                 	db	60
  2469  007FF8  1E                 	db	30
  2470  007FF9  42                 	db	66
  2471  007FFA  A2                 	db	162
  2472  007FFB  0D                 	db	13
  2473  007FFC                     __end_of__npowers_:
  2474                           	opt stack 0
  2475  0000                     _ADRES	set	4035
  2476  0000                     _ADCON0bits	set	4034
  2477  0000                     _INTCONbits	set	4082
  2478  0000                     _PIE1bits	set	3997
  2479  0000                     _ADCON2bits	set	4032
  2480  0000                     _ADCON0	set	4034
  2481  0000                     _PIR1bits	set	3998
  2482  0000                     _LATD	set	3980
  2483  0000                     _LATBbits	set	3978
  2484  0000                     _PORTD	set	3971
  2485  0000                     _TRISD	set	3989
  2486  0000                     _PORTB	set	3969
  2487  0000                     _TRISB	set	3987
  2488  0000                     _ADCON1	set	4033
  2489  0000                     _PORTA	set	3968
  2490  0000                     _TRISA	set	3986
  2491  0000                     _PORTEbits	set	3972
  2492  007FFC                     STR_1:
  2493  007FFC  25                 	db	37
  2494  007FFD  66                 	db	102	;'f'
  2495  007FFE  00                 	db	0
  2496                           
  2497                           ; #config settings
  2498  007FFF  00                 	db	0	; dummy byte at the end
  2499  0000                     
  2500                           	psect	cinit
  2501  001CB4                     __pcinit:
  2502                           	opt stack 0
  2503  001CB4                     start_initialization:
  2504                           	opt stack 0
  2505  001CB4                     __initialization:
  2506                           	opt stack 0
  2507                           
  2508                           ; Initialize objects allocated to BANK0 (20 bytes)
  2509                           ; load TBLPTR registers with __pidataBANK0
  2510  001CB4  0E6C               	movlw	low __pidataBANK0
  2511  001CB6  6EF6               	movwf	tblptrl,c
  2512  001CB8  0E1D               	movlw	high __pidataBANK0
  2513  001CBA  6EF7               	movwf	tblptrh,c
  2514  001CBC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  2515  001CBE  6EF8               	movwf	tblptru,c
  2516  001CC0  EE00  F0A1         	lfsr	0,__pdataBANK0
  2517  001CC4  EE10 F014          	lfsr	1,20
  2518  001CC8                     copy_data0:
  2519  001CC8  0009               	tblrd		*+
  2520  001CCA  CFF5 FFEE          	movff	tablat,postinc0
  2521  001CCE  50E5               	movf	postdec1,w,c
  2522  001CD0  50E1               	movf	fsr1l,w,c
  2523  001CD2  E1FA               	bnz	copy_data0
  2524                           
  2525                           ; Clear objects allocated to COMRAM (2 bytes)
  2526  001CD4  6A4C               	clrf	(__pbssCOMRAM+1)& (0+255),c
  2527  001CD6  6A4B               	clrf	__pbssCOMRAM& (0+255),c
  2528  001CD8                     end_of_initialization:
  2529                           	opt stack 0
  2530  001CD8                     __end_of__initialization:
  2531                           	opt stack 0
  2532  001CD8  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2533  001CDA  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2534  001CDC  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2535  001CDE  6EF8               	movwf	tblptru,c
  2536  001CE0  0100               	movlb	0
  2537  001CE2  EF82  F00C         	goto	_main	;jump to C main() function
  2538                           tblptru	equ	0xFF8
  2539                           tblptrh	equ	0xFF7
  2540                           tblptrl	equ	0xFF6
  2541                           tablat	equ	0xFF5
  2542                           postinc0	equ	0xFEE
  2543                           postdec1	equ	0xFE5
  2544                           fsr1l	equ	0xFE1
  2545                           
  2546                           	psect	bssCOMRAM
  2547  00004B                     __pbssCOMRAM:
  2548                           	opt stack 0
  2549  00004B                     _y:
  2550                           	opt stack 0
  2551  00004B                     	ds	1
  2552  00004C                     _x:
  2553                           	opt stack 0
  2554  00004C                     	ds	1
  2555                           tblptru	equ	0xFF8
  2556                           tblptrh	equ	0xFF7
  2557                           tblptrl	equ	0xFF6
  2558                           tablat	equ	0xFF5
  2559                           postinc0	equ	0xFEE
  2560                           postdec1	equ	0xFE5
  2561                           fsr1l	equ	0xFE1
  2562                           
  2563                           	psect	dataBANK0
  2564  0000A1                     __pdataBANK0:
  2565                           	opt stack 0
  2566  0000A1                     main@F4119:
  2567                           	opt stack 0
  2568  0000A1                     	ds	20
  2569                           tblptru	equ	0xFF8
  2570                           tblptrh	equ	0xFF7
  2571                           tblptrl	equ	0xFF6
  2572                           tablat	equ	0xFF5
  2573                           postinc0	equ	0xFEE
  2574                           postdec1	equ	0xFE5
  2575                           fsr1l	equ	0xFE1
  2576                           
  2577                           	psect	cstackBANK0
  2578  000060                     __pcstackBANK0:
  2579                           	opt stack 0
  2580  000060                     ___ftadd@sign:
  2581                           	opt stack 0
  2582  000060                     ___fttol@sign1:
  2583                           	opt stack 0
  2584                           
  2585                           ; 1 bytes @ 0x0
  2586  000060                     	ds	1
  2587  000061                     ___ftadd@exp2:
  2588                           	opt stack 0
  2589  000061                     ___fttol@lval:
  2590                           	opt stack 0
  2591                           
  2592                           ; 4 bytes @ 0x1
  2593  000061                     	ds	1
  2594  000062                     ___ftadd@exp1:
  2595                           	opt stack 0
  2596                           
  2597                           ; 1 bytes @ 0x2
  2598  000062                     	ds	1
  2599  000063                     ?___ftsub:
  2600                           	opt stack 0
  2601  000063                     ___ftsub@f1:
  2602                           	opt stack 0
  2603                           
  2604                           ; 3 bytes @ 0x3
  2605  000063                     	ds	2
  2606  000065                     ___fttol@exp1:
  2607                           	opt stack 0
  2608                           
  2609                           ; 1 bytes @ 0x5
  2610  000065                     	ds	1
  2611  000066                     ___ftsub@f2:
  2612                           	opt stack 0
  2613                           
  2614                           ; 3 bytes @ 0x6
  2615  000066                     	ds	3
  2616  000069                     ?_sprintf:
  2617                           	opt stack 0
  2618  000069                     sprintf@sp:
  2619                           	opt stack 0
  2620                           
  2621                           ; 2 bytes @ 0x9
  2622  000069                     	ds	2
  2623  00006B                     sprintf@f:
  2624                           	opt stack 0
  2625                           
  2626                           ; 2 bytes @ 0xB
  2627  00006B                     	ds	5
  2628  000070                     ??_sprintf:
  2629                           
  2630                           ; 1 bytes @ 0x10
  2631  000070                     	ds	6
  2632  000076                     _sprintf$1183:
  2633                           	opt stack 0
  2634                           
  2635                           ; 3 bytes @ 0x16
  2636  000076                     	ds	3
  2637  000079                     sprintf@ap:
  2638                           	opt stack 0
  2639                           
  2640                           ; 2 bytes @ 0x19
  2641  000079                     	ds	2
  2642  00007B                     sprintf@flag:
  2643                           	opt stack 0
  2644                           
  2645                           ; 2 bytes @ 0x1B
  2646  00007B                     	ds	2
  2647  00007D                     sprintf@prec:
  2648                           	opt stack 0
  2649                           
  2650                           ; 2 bytes @ 0x1D
  2651  00007D                     	ds	2
  2652  00007F                     sprintf@val:
  2653                           	opt stack 0
  2654                           
  2655                           ; 4 bytes @ 0x1F
  2656  00007F                     	ds	4
  2657  000083                     sprintf@exp:
  2658                           	opt stack 0
  2659                           
  2660                           ; 2 bytes @ 0x23
  2661  000083                     	ds	2
  2662  000085                     sprintf@tmpval:
  2663                           	opt stack 0
  2664                           
  2665                           ; 4 bytes @ 0x25
  2666  000085                     	ds	4
  2667  000089                     sprintf@fval:
  2668                           	opt stack 0
  2669                           
  2670                           ; 3 bytes @ 0x29
  2671  000089                     	ds	3
  2672  00008C                     sprintf@c:
  2673                           	opt stack 0
  2674                           
  2675                           ; 1 bytes @ 0x2C
  2676  00008C                     	ds	1
  2677  00008D                     main@str:
  2678                           	opt stack 0
  2679                           
  2680                           ; 20 bytes @ 0x2D
  2681  00008D                     	ds	20
  2682                           tblptru	equ	0xFF8
  2683                           tblptrh	equ	0xFF7
  2684                           tblptrl	equ	0xFF6
  2685                           tablat	equ	0xFF5
  2686                           postinc0	equ	0xFEE
  2687                           postdec1	equ	0xFE5
  2688                           fsr1l	equ	0xFE1
  2689                           
  2690                           	psect	cstackCOMRAM
  2691  000001                     __pcstackCOMRAM:
  2692                           	opt stack 0
  2693  000001                     ??_ISR:
  2694                           
  2695                           ; 1 bytes @ 0x0
  2696  000001                     	ds	18
  2697  000013                     ?_R0Value:
  2698                           	opt stack 0
  2699  000013                     ?___awmod:
  2700                           	opt stack 0
  2701  000013                     ?___ftpack:
  2702                           	opt stack 0
  2703  000013                     ?___ftneg:
  2704                           	opt stack 0
  2705  000013                     ?__tdiv_to_l_:
  2706                           	opt stack 0
  2707  000013                     ?__div_to_l_:
  2708                           	opt stack 0
  2709  000013                     ?___lldiv:
  2710                           	opt stack 0
  2711  000013                     ?___llmod:
  2712                           	opt stack 0
  2713  000013                     glcd_WriteByte@data:
  2714                           	opt stack 0
  2715  000013                     ___awmod@dividend:
  2716                           	opt stack 0
  2717  000013                     __div_to_l_@f1:
  2718                           	opt stack 0
  2719  000013                     ___ftpack@arg:
  2720                           	opt stack 0
  2721  000013                     __tdiv_to_l_@f1:
  2722                           	opt stack 0
  2723  000013                     ___ftge@ff1:
  2724                           	opt stack 0
  2725  000013                     ___ftneg@f1:
  2726                           	opt stack 0
  2727  000013                     ___lldiv@dividend:
  2728                           	opt stack 0
  2729  000013                     ___llmod@dividend:
  2730                           	opt stack 0
  2731                           
  2732                           ; 4 bytes @ 0x12
  2733  000013                     	ds	1
  2734  000014                     glcd_WriteByte@side:
  2735                           	opt stack 0
  2736                           
  2737                           ; 1 bytes @ 0x13
  2738  000014                     	ds	1
  2739  000015                     glcd_FillScreen@color:
  2740                           	opt stack 0
  2741  000015                     glcd_SetCursor@ypos:
  2742                           	opt stack 0
  2743  000015                     glcd_WriteChar8X8@color:
  2744                           	opt stack 0
  2745  000015                     glcd_WriteChar3x6@color:
  2746                           	opt stack 0
  2747  000015                     ___awmod@divisor:
  2748                           	opt stack 0
  2749                           
  2750                           ; 2 bytes @ 0x14
  2751  000015                     	ds	1
  2752  000016                     ??_glcd_WriteChar8X8:
  2753  000016                     ??_glcd_WriteChar3x6:
  2754  000016                     glcd_FillScreen@j:
  2755                           	opt stack 0
  2756  000016                     glcd_SetCursor@side:
  2757                           	opt stack 0
  2758  000016                     ___ftpack@exp:
  2759                           	opt stack 0
  2760  000016                     __div_to_l_@f2:
  2761                           	opt stack 0
  2762  000016                     __tdiv_to_l_@f2:
  2763                           	opt stack 0
  2764  000016                     ___ftge@ff2:
  2765                           	opt stack 0
  2766                           
  2767                           ; 3 bytes @ 0x15
  2768  000016                     	ds	1
  2769  000017                     glcd_FillScreen@i:
  2770                           	opt stack 0
  2771  000017                     glcd_SetCursor@xpos:
  2772                           	opt stack 0
  2773  000017                     ___awmod@counter:
  2774                           	opt stack 0
  2775  000017                     ___ftpack@sign:
  2776                           	opt stack 0
  2777  000017                     ___lldiv@divisor:
  2778                           	opt stack 0
  2779  000017                     ___llmod@divisor:
  2780                           	opt stack 0
  2781                           
  2782                           ; 4 bytes @ 0x16
  2783  000017                     	ds	1
  2784  000018                     ??_glcd_Init:
  2785  000018                     ??___ftpack:
  2786  000018                     glcd_WriteChar3x6@xpos:
  2787                           	opt stack 0
  2788  000018                     ___awmod@sign:
  2789                           	opt stack 0
  2790  000018                     glcd_WriteChar8X8@chr:
  2791                           	opt stack 0
  2792                           
  2793                           ; 2 bytes @ 0x17
  2794  000018                     	ds	1
  2795  000019                     ??__tdiv_to_l_:
  2796  000019                     ??___ftge:
  2797  000019                     ?___awdiv:
  2798                           	opt stack 0
  2799  000019                     glcd_Init@mode:
  2800                           	opt stack 0
  2801  000019                     glcd_WriteChar3x6@ch:
  2802                           	opt stack 0
  2803  000019                     ___awdiv@dividend:
  2804                           	opt stack 0
  2805  000019                     __div_to_l_@quot:
  2806                           	opt stack 0
  2807                           
  2808                           ; 4 bytes @ 0x18
  2809  000019                     	ds	1
  2810  00001A                     glcd_WriteChar8X8@ch:
  2811                           	opt stack 0
  2812  00001A                     glcd_WriteChar3x6@i:
  2813                           	opt stack 0
  2814                           
  2815                           ; 1 bytes @ 0x19
  2816  00001A                     	ds	1
  2817  00001B                     ?___lltoft:
  2818                           	opt stack 0
  2819  00001B                     glcd_WriteChar8X8@xpos:
  2820                           	opt stack 0
  2821  00001B                     glcd_WriteChar3x6@side:
  2822                           	opt stack 0
  2823  00001B                     ___llmod@counter:
  2824                           	opt stack 0
  2825  00001B                     ___awdiv@divisor:
  2826                           	opt stack 0
  2827  00001B                     ___lldiv@quotient:
  2828                           	opt stack 0
  2829  00001B                     ___lltoft@c:
  2830                           	opt stack 0
  2831                           
  2832                           ; 4 bytes @ 0x1A
  2833  00001B                     	ds	1
  2834  00001C                     glcd_WriteChar8X8@i:
  2835                           	opt stack 0
  2836  00001C                     __tdiv_to_l_@quot:
  2837                           	opt stack 0
  2838                           
  2839                           ; 4 bytes @ 0x1B
  2840  00001C                     	ds	1
  2841  00001D                     glcd_WriteChar8X8@side:
  2842                           	opt stack 0
  2843  00001D                     ___awdiv@counter:
  2844                           	opt stack 0
  2845  00001D                     __div_to_l_@cntr:
  2846                           	opt stack 0
  2847                           
  2848                           ; 1 bytes @ 0x1C
  2849  00001D                     	ds	1
  2850  00001E                     ___awdiv@sign:
  2851                           	opt stack 0
  2852  00001E                     __div_to_l_@exp1:
  2853                           	opt stack 0
  2854  00001E                     glcd_WriteString@str:
  2855                           	opt stack 0
  2856                           
  2857                           ; 2 bytes @ 0x1D
  2858  00001E                     	ds	1
  2859  00001F                     ??___lltoft:
  2860  00001F                     ___lldiv@counter:
  2861                           	opt stack 0
  2862  00001F                     ___awdiv@quotient:
  2863                           	opt stack 0
  2864                           
  2865                           ; 2 bytes @ 0x1E
  2866  00001F                     	ds	1
  2867  000020                     glcd_WriteString@font:
  2868                           	opt stack 0
  2869  000020                     __tdiv_to_l_@cntr:
  2870                           	opt stack 0
  2871                           
  2872                           ; 1 bytes @ 0x1F
  2873  000020                     	ds	1
  2874  000021                     ?___wmul:
  2875                           	opt stack 0
  2876  000021                     ?___awtoft:
  2877                           	opt stack 0
  2878  000021                     glcd_WriteString@color:
  2879                           	opt stack 0
  2880  000021                     __tdiv_to_l_@exp1:
  2881                           	opt stack 0
  2882  000021                     ___wmul@multiplier:
  2883                           	opt stack 0
  2884  000021                     ___awtoft@c:
  2885                           	opt stack 0
  2886                           
  2887                           ; 2 bytes @ 0x20
  2888  000021                     	ds	1
  2889  000022                     glcd_text_write@str:
  2890                           	opt stack 0
  2891                           
  2892                           ; 2 bytes @ 0x21
  2893  000022                     	ds	1
  2894  000023                     ___lltoft@exp:
  2895                           	opt stack 0
  2896  000023                     ___wmul@multiplicand:
  2897                           	opt stack 0
  2898                           
  2899                           ; 2 bytes @ 0x22
  2900  000023                     	ds	1
  2901  000024                     glcd_text_write@x:
  2902                           	opt stack 0
  2903  000024                     ___awtoft@sign:
  2904                           	opt stack 0
  2905                           
  2906                           ; 1 bytes @ 0x23
  2907  000024                     	ds	1
  2908  000025                     ?_readX:
  2909                           	opt stack 0
  2910  000025                     glcd_text_write@y:
  2911                           	opt stack 0
  2912  000025                     ___wmul@product:
  2913                           	opt stack 0
  2914                           
  2915                           ; 2 bytes @ 0x24
  2916  000025                     	ds	1
  2917  000026                     
  2918                           ; 1 bytes @ 0x25
  2919  000026                     	ds	1
  2920  000027                     ?___ftmul:
  2921                           	opt stack 0
  2922  000027                     ___ftmul@f1:
  2923                           	opt stack 0
  2924                           
  2925                           ; 3 bytes @ 0x26
  2926  000027                     	ds	1
  2927  000028                     ??_readX:
  2928                           
  2929                           ; 1 bytes @ 0x27
  2930  000028                     	ds	2
  2931  00002A                     readX@value:
  2932                           	opt stack 0
  2933  00002A                     ___ftmul@f2:
  2934                           	opt stack 0
  2935                           
  2936                           ; 3 bytes @ 0x29
  2937  00002A                     	ds	3
  2938  00002D                     ??___ftmul:
  2939                           
  2940                           ; 1 bytes @ 0x2C
  2941  00002D                     	ds	3
  2942  000030                     ___ftmul@exp:
  2943                           	opt stack 0
  2944                           
  2945                           ; 1 bytes @ 0x2F
  2946  000030                     	ds	1
  2947  000031                     ___ftmul@f3_as_product:
  2948                           	opt stack 0
  2949                           
  2950                           ; 3 bytes @ 0x30
  2951  000031                     	ds	3
  2952  000034                     ___ftmul@cntr:
  2953                           	opt stack 0
  2954                           
  2955                           ; 1 bytes @ 0x33
  2956  000034                     	ds	1
  2957  000035                     ___ftmul@sign:
  2958                           	opt stack 0
  2959                           
  2960                           ; 1 bytes @ 0x34
  2961  000035                     	ds	1
  2962  000036                     ?_fround:
  2963                           	opt stack 0
  2964  000036                     ?_scale:
  2965                           	opt stack 0
  2966                           
  2967                           ; 3 bytes @ 0x35
  2968  000036                     	ds	3
  2969  000039                     _fround$1181:
  2970                           	opt stack 0
  2971  000039                     _scale$1182:
  2972                           	opt stack 0
  2973                           
  2974                           ; 3 bytes @ 0x38
  2975  000039                     	ds	3
  2976  00003C                     scale@scl:
  2977                           	opt stack 0
  2978  00003C                     _fround$1180:
  2979                           	opt stack 0
  2980                           
  2981                           ; 3 bytes @ 0x3B
  2982  00003C                     	ds	1
  2983  00003D                     ?___fttol:
  2984                           	opt stack 0
  2985  00003D                     ___fttol@f1:
  2986                           	opt stack 0
  2987                           
  2988                           ; 3 bytes @ 0x3C
  2989  00003D                     	ds	2
  2990  00003F                     fround@prec:
  2991                           	opt stack 0
  2992                           
  2993                           ; 1 bytes @ 0x3E
  2994  00003F                     	ds	1
  2995  000040                     ?___ftadd:
  2996                           	opt stack 0
  2997  000040                     ___ftadd@f1:
  2998                           	opt stack 0
  2999                           
  3000                           ; 3 bytes @ 0x3F
  3001  000040                     	ds	1
  3002  000041                     ??___fttol:
  3003                           
  3004                           ; 1 bytes @ 0x40
  3005  000041                     	ds	2
  3006  000043                     ___ftadd@f2:
  3007                           	opt stack 0
  3008                           
  3009                           ; 3 bytes @ 0x42
  3010  000043                     	ds	3
  3011  000046                     ??___ftadd:
  3012                           
  3013                           ; 1 bytes @ 0x45
  3014  000046                     	ds	3
  3015  000049                     ??_main:
  3016                           
  3017                           ; 1 bytes @ 0x48
  3018  000049                     	ds	2
  3019                           tblptru	equ	0xFF8
  3020                           tblptrh	equ	0xFF7
  3021                           tblptrl	equ	0xFF6
  3022                           tablat	equ	0xFF5
  3023                           postinc0	equ	0xFEE
  3024                           postdec1	equ	0xFE5
  3025                           fsr1l	equ	0xFE1
  3026                           
  3027 ;;
  3028 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3029 ;;
  3030 ;; *************** function _main *****************
  3031 ;; Defined at:
  3032 ;;		line 50 in file "main.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;		None
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;  str            20   45[BANK0 ] unsigned char [20]
  3037 ;; Return value:  Size  Location     Type
  3038 ;;                  1    wreg      void 
  3039 ;; Registers used:
  3040 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3046 ;;      Params:         0       0       0       0       0       0       0       0       0
  3047 ;;      Locals:         0      20       0       0       0       0       0       0       0
  3048 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3049 ;;      Totals:         2      20       0       0       0       0       0       0       0
  3050 ;;Total ram usage:       22 bytes
  3051 ;; Hardware stack levels required when called:    5
  3052 ;; This function calls:
  3053 ;;		_glcd_Init
  3054 ;;		_glcd_SetCursor
  3055 ;;		_glcd_text_write
  3056 ;;		_readX
  3057 ;;		_setupADC
  3058 ;;		_sprintf
  3059 ;; This function is called by:
  3060 ;;		Startup code after reset
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text0
  3065  001904                     __ptext0:
  3066                           	opt stack 0
  3067  001904                     _main:
  3068                           	opt stack 26
  3069                           
  3070                           ;main.c: 52: glcd_Init(1);
  3071                           
  3072                           ;incstack = 0
  3073  001904  0E01               	movlw	1
  3074  001906  ECB4  F00A         	call	_glcd_Init
  3075                           
  3076                           ;main.c: 53: glcd_SetCursor(1,1);
  3077  00190A  0E01               	movlw	1
  3078  00190C  6E15               	movwf	glcd_SetCursor@ypos,c
  3079  00190E  0E01               	movlw	1
  3080  001910  ECDE  F00D         	call	_glcd_SetCursor
  3081                           
  3082                           ;main.c: 54: setupADC();
  3083  001914  ECA8  F00E         	call	_setupADC	;wreg free
  3084                           
  3085                           ;main.c: 55: char str[20]="x = ";
  3086  001918  EE20  F0A1         	lfsr	2,main@F4119
  3087  00191C  EE10  F08D         	lfsr	1,main@str
  3088  001920  0E13               	movlw	19
  3089  001922                     u4751:
  3090  001922  CFDB FFE3          	movff	plusw2,plusw1
  3091  001926  06E8               	decf	wreg,f,c
  3092  001928  E2FC               	bc	u4751
  3093  00192A                     
  3094                           ;main.c: 58: _delay((unsigned long)((1000)*(4000000/4000.0)));
  3095  00192A  0E06               	movlw	6
  3096  00192C  6E4A               	movwf	(??_main+1)& (0+255),c
  3097  00192E  0E13               	movlw	19
  3098  001930  6E49               	movwf	??_main& (0+255),c
  3099  001932  0EAE               	movlw	174
  3100  001934                     u4777:
  3101  001934  2EE8               	decfsz	wreg,f,c
  3102  001936  D7FE               	bra	u4777
  3103  001938  2E49               	decfsz	??_main& (0+255),f,c
  3104  00193A  D7FC               	bra	u4777
  3105  00193C  2E4A               	decfsz	(??_main+1)& (0+255),f,c
  3106  00193E  D7FA               	bra	u4777
  3107                           
  3108                           ;main.c: 59: sprintf(str, "%f",readX());
  3109  001940  0E8D               	movlw	low main@str
  3110  001942  0100               	movlb	0	; () banked
  3111  001944  6F69               	movwf	sprintf@sp& (0+255),b
  3112  001946  0E00               	movlw	high main@str
  3113  001948  0100               	movlb	0	; () banked
  3114  00194A  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  3115  00194C  0EFC               	movlw	low STR_1
  3116  00194E  0100               	movlb	0	; () banked
  3117  001950  6F6B               	movwf	sprintf@f& (0+255),b
  3118  001952  0E7F               	movlw	high STR_1
  3119  001954  0100               	movlb	0	; () banked
  3120  001956  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  3121  001958  EC91  F00D         	call	_readX	;wreg free
  3122  00195C  C025  F06D         	movff	?_readX,?_sprintf+4
  3123  001960  C026  F06E         	movff	?_readX+1,?_sprintf+5
  3124  001964  C027  F06F         	movff	?_readX+2,?_sprintf+6
  3125  001968  EC09  F000         	call	_sprintf	;wreg free
  3126                           
  3127                           ;main.c: 60: glcd_text_write(str, 1, 1);
  3128  00196C  0E8D               	movlw	low main@str
  3129  00196E  6E22               	movwf	glcd_text_write@str,c
  3130  001970  0E00               	movlw	high main@str
  3131  001972  6E23               	movwf	glcd_text_write@str+1,c
  3132  001974  0E01               	movlw	1
  3133  001976  6E24               	movwf	glcd_text_write@x,c
  3134  001978  0E01               	movlw	1
  3135  00197A  6E25               	movwf	glcd_text_write@y,c
  3136  00197C  EC98  F00E         	call	_glcd_text_write	;wreg free
  3137  001980  D7D4               	goto	l49
  3138  001982                     __end_of_main:
  3139                           	opt stack 0
  3140                           tblptru	equ	0xFF8
  3141                           tblptrh	equ	0xFF7
  3142                           tblptrl	equ	0xFF6
  3143                           tablat	equ	0xFF5
  3144                           postinc0	equ	0xFEE
  3145                           wreg	equ	0xFE8
  3146                           postdec1	equ	0xFE5
  3147                           plusw1	equ	0xFE3
  3148                           fsr1l	equ	0xFE1
  3149                           plusw2	equ	0xFDB
  3150                           
  3151 ;; *************** function _sprintf *****************
  3152 ;; Defined at:
  3153 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;  sp              2    9[BANK0 ] PTR unsigned char 
  3156 ;;		 -> main@str(20), 
  3157 ;;  f               2   11[BANK0 ] PTR const unsigned char 
  3158 ;;		 -> STR_1(3), 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  tmpval          4   37[BANK0 ] struct .
  3161 ;;  val             4   31[BANK0 ] unsigned long 
  3162 ;;  fval            3   41[BANK0 ] unsigned long 
  3163 ;;  cp              3    0        PTR const unsigned char 
  3164 ;;  exp             2   35[BANK0 ] int 
  3165 ;;  prec            2   29[BANK0 ] int 
  3166 ;;  flag            2   27[BANK0 ] unsigned short 
  3167 ;;  ap              2   25[BANK0 ] PTR void [1]
  3168 ;;		 -> ?_sprintf(2), 
  3169 ;;  len             2    0        unsigned int 
  3170 ;;  width           2    0        int 
  3171 ;;  c               1   44[BANK0 ] char 
  3172 ;;  d               1    0        unsigned char 
  3173 ;; Return value:  Size  Location     Type
  3174 ;;                  2    9[BANK0 ] int 
  3175 ;; Registers used:
  3176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3182 ;;      Params:         0       7       0       0       0       0       0       0       0
  3183 ;;      Locals:         0      23       0       0       0       0       0       0       0
  3184 ;;      Temps:          0       6       0       0       0       0       0       0       0
  3185 ;;      Totals:         0      36       0       0       0       0       0       0       0
  3186 ;;Total ram usage:       36 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; Hardware stack levels required when called:    4
  3189 ;; This function calls:
  3190 ;;		___awdiv
  3191 ;;		___ftadd
  3192 ;;		___ftge
  3193 ;;		___ftmul
  3194 ;;		___ftneg
  3195 ;;		___ftsub
  3196 ;;		___fttol
  3197 ;;		___lldiv
  3198 ;;		___llmod
  3199 ;;		___lltoft
  3200 ;;		___wmul
  3201 ;;		__div_to_l_
  3202 ;;		__tdiv_to_l_
  3203 ;;		_fround
  3204 ;;		_scale
  3205 ;; This function is called by:
  3206 ;;		_main
  3207 ;; This function uses a non-reentrant model
  3208 ;;
  3209                           
  3210                           	psect	text1
  3211  000012                     __ptext1:
  3212                           	opt stack 0
  3213  000012                     _sprintf:
  3214                           	opt stack 26
  3215                           
  3216                           ;doprnt.c: 494: va_list ap;
  3217                           ;doprnt.c: 499: signed char c;
  3218                           ;doprnt.c: 501: int width;
  3219                           ;doprnt.c: 504: int prec;
  3220                           ;doprnt.c: 508: unsigned short flag;
  3221                           ;doprnt.c: 515: char d;
  3222                           ;doprnt.c: 516: double fval;
  3223                           ;doprnt.c: 517: int exp;
  3224                           ;doprnt.c: 523: union {
  3225                           ;doprnt.c: 524: unsigned long vd;
  3226                           ;doprnt.c: 525: double integ;
  3227                           ;doprnt.c: 526: } tmpval;
  3228                           ;doprnt.c: 528: unsigned long val;
  3229                           ;doprnt.c: 529: unsigned len;
  3230                           ;doprnt.c: 530: const char * cp;
  3231                           ;doprnt.c: 533: *ap = __va_start();
  3232                           
  3233                           ;incstack = 0
  3234  000012  0E6D               	movlw	low (?_sprintf+4)
  3235  000014  0100               	movlb	0	; () banked
  3236  000016  6F79               	movwf	sprintf@ap& (0+255),b
  3237  000018  0E00               	movlw	high (?_sprintf+4)
  3238  00001A  0100               	movlb	0	; () banked
  3239  00001C  6F7A               	movwf	(sprintf@ap+1)& (0+255),b
  3240                           
  3241                           ;doprnt.c: 536: while(c = *f++) {
  3242  00001E  D356               	goto	l309
  3243  000020                     
  3244                           ; BSR set to: 0
  3245                           ;doprnt.c: 538: if(c != '%')
  3246                           
  3247                           ; BSR set to: 0
  3248  000020  0E25               	movlw	37
  3249  000022  0100               	movlb	0	; () banked
  3250  000024  198C               	xorwf	sprintf@c& (0+255),w,b
  3251  000026  B4D8               	btfsc	status,2,c
  3252  000028  D007               	goto	l265
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;doprnt.c: 540: {
  3256                           ;doprnt.c: 541: ((*sp++ = (c)));
  3257  00002A  C069  FFD9         	movff	sprintf@sp,fsr2l
  3258  00002E  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  3259  000032  C08C  FFDF         	movff	sprintf@c,indf2
  3260  000036  D347               	goto	l3857
  3261  000038                     l265:
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;doprnt.c: 543: }
  3265                           ;doprnt.c: 548: flag = 0;
  3266                           
  3267                           ; BSR set to: 0
  3268  000038  0E00               	movlw	0
  3269  00003A  0100               	movlb	0	; () banked
  3270  00003C  6F7C               	movwf	(sprintf@flag+1)& (0+255),b
  3271  00003E  0E00               	movlw	0
  3272  000040  6F7B               	movwf	sprintf@flag& (0+255),b
  3273                           
  3274                           ;doprnt.c: 635: switch(c = *f++) {
  3275  000042  D003               	goto	l266
  3276  000044                     
  3277                           ; BSR set to: 0
  3278                           ;doprnt.c: 663: flag |= 0x400;
  3279                           
  3280                           ; BSR set to: 0
  3281  000044  0100               	movlb	0	; () banked
  3282  000046  857C               	bsf	(sprintf@flag+1)& (0+255),2,b
  3283                           
  3284                           ;doprnt.c: 664: break;
  3285  000048  D013               	goto	l270
  3286  00004A                     l266:
  3287                           
  3288                           ; BSR set to: 0
  3289                           
  3290                           ; BSR set to: 0
  3291  00004A  C06B  FFF6         	movff	sprintf@f,tblptrl
  3292  00004E  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  3293  000052  0100               	movlb	0	; () banked
  3294  000054  4B6B               	infsnz	sprintf@f& (0+255),f,b
  3295  000056  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  3296  000058                     	if	0	;tblptru may be non-zero
  3297  000058                     	endif
  3298  000058                     	if	0	;tblptru may be non-zero
  3299  000058                     	endif
  3300  000058  0008               	tblrd		*
  3301  00005A  CFF5 F08C          	movff	tablat,sprintf@c
  3302  00005E  0100               	movlb	0	; () banked
  3303  000060  518C               	movf	sprintf@c& (0+255),w,b
  3304                           
  3305                           ; Switch size 1, requested type "space"
  3306                           ; Number of cases is 2, Range of values is 0 to 102
  3307                           ; switch strategies available:
  3308                           ; Name         Instructions Cycles
  3309                           ; simple_byte            7     4 (average)
  3310                           ;	Chosen strategy is simple_byte
  3311  000062  0A00               	xorlw	0	; case 0
  3312  000064  B4D8               	btfsc	status,2,c
  3313  000066  D340               	goto	u4740
  3314  000068  0A66               	xorlw	102	; case 102
  3315  00006A  B4D8               	btfsc	status,2,c
  3316  00006C  D7EB               	goto	l269
  3317  00006E  D32E               	goto	l309
  3318  000070                     l270:
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;doprnt.c: 825: if(flag & (0x700)) {
  3322                           
  3323                           ; BSR set to: 0
  3324  000070  0E07               	movlw	7
  3325  000072  0100               	movlb	0	; () banked
  3326  000074  157C               	andwf	(sprintf@flag+1)& (0+255),w,b
  3327  000076  B4D8               	btfsc	status,2,c
  3328  000078  D310               	goto	l272
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;doprnt.c: 829: prec = 6;
  3332  00007A  0E00               	movlw	0
  3333  00007C  0100               	movlb	0	; () banked
  3334  00007E  6F7E               	movwf	(sprintf@prec+1)& (0+255),b
  3335  000080  0E06               	movlw	6
  3336  000082  6F7D               	movwf	sprintf@prec& (0+255),b
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3340  000084  C079  FFD9         	movff	sprintf@ap,fsr2l
  3341  000088  C07A  FFDA         	movff	sprintf@ap+1,fsr2h
  3342  00008C  CFDE F089          	movff	postinc2,sprintf@fval
  3343  000090  CFDE F08A          	movff	postinc2,sprintf@fval+1
  3344  000094  CFDD F08B          	movff	postdec2,sprintf@fval+2
  3345                           
  3346                           ; BSR set to: 0
  3347  000098  0E03               	movlw	3
  3348  00009A  0100               	movlb	0	; () banked
  3349  00009C  2779               	addwf	sprintf@ap& (0+255),f,b
  3350  00009E  0E00               	movlw	0
  3351  0000A0  237A               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;doprnt.c: 831: if(fval < 0.0) {
  3355  0000A2  0100               	movlb	0	; () banked
  3356  0000A4  AF8B               	btfss	(sprintf@fval+2)& (0+255),7,b
  3357  0000A6  D011               	goto	l273
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;doprnt.c: 832: fval = -fval;
  3361  0000A8  C089  F013         	movff	sprintf@fval,___ftneg@f1
  3362  0000AC  C08A  F014         	movff	sprintf@fval+1,___ftneg@f1+1
  3363  0000B0  C08B  F015         	movff	sprintf@fval+2,___ftneg@f1+2
  3364  0000B4  EC86  F00E         	call	___ftneg	;wreg free
  3365  0000B8  C013  F089         	movff	?___ftneg,sprintf@fval
  3366  0000BC  C014  F08A         	movff	?___ftneg+1,sprintf@fval+1
  3367  0000C0  C015  F08B         	movff	?___ftneg+2,sprintf@fval+2
  3368                           
  3369                           ;doprnt.c: 833: flag |= 0x03;
  3370  0000C4  0E03               	movlw	3
  3371  0000C6  0100               	movlb	0	; () banked
  3372  0000C8  137B               	iorwf	sprintf@flag& (0+255),f,b
  3373  0000CA                     l273:
  3374                           
  3375                           ; BSR set to: 0
  3376                           ;doprnt.c: 834: }
  3377                           ;doprnt.c: 835: exp = 0;
  3378                           
  3379                           ; BSR set to: 0
  3380  0000CA  0E00               	movlw	0
  3381  0000CC  0100               	movlb	0	; () banked
  3382  0000CE  6F84               	movwf	(sprintf@exp+1)& (0+255),b
  3383  0000D0  0E00               	movlw	0
  3384  0000D2  6F83               	movwf	sprintf@exp& (0+255),b
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;doprnt.c: 836: if( fval!=0) {
  3388  0000D4  0100               	movlb	0	; () banked
  3389  0000D6  5189               	movf	sprintf@fval& (0+255),w,b
  3390  0000D8  0100               	movlb	0	; () banked
  3391  0000DA  118A               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3392  0000DC  0100               	movlb	0	; () banked
  3393  0000DE  118B               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3394  0000E0  B4D8               	btfsc	status,2,c
  3395  0000E2  D091               	goto	l278
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3399  0000E4  0E82               	movlw	130
  3400  0000E6  0100               	movlb	0	; () banked
  3401  0000E8  6F70               	movwf	??_sprintf& (0+255),b
  3402  0000EA  0EFF               	movlw	255
  3403  0000EC  0100               	movlb	0	; () banked
  3404  0000EE  6F71               	movwf	(??_sprintf+1)& (0+255),b
  3405  0000F0  C089  F072         	movff	sprintf@fval,??_sprintf+2
  3406  0000F4  C08A  F073         	movff	sprintf@fval+1,??_sprintf+3
  3407  0000F8  C08B  F074         	movff	sprintf@fval+2,??_sprintf+4
  3408  0000FC  C08C  F075         	movff	sprintf@fval+3,??_sprintf+5
  3409  000100  0E10               	movlw	16
  3410  000102  D006               	goto	u4530
  3411  000104                     u4535:
  3412  000104  0100               	movlb	0	; () banked
  3413  000106  90D8               	bcf	status,0,c
  3414  000108  3375               	rrcf	(??_sprintf+5)& (0+255),f,b
  3415  00010A  3374               	rrcf	(??_sprintf+4)& (0+255),f,b
  3416  00010C  3373               	rrcf	(??_sprintf+3)& (0+255),f,b
  3417  00010E  3372               	rrcf	(??_sprintf+2)& (0+255),f,b
  3418  000110                     u4530:
  3419  000110  2EE8               	decfsz	wreg,f,c
  3420  000112  D7F8               	goto	u4535
  3421  000114  0100               	movlb	0	; () banked
  3422  000116  5172               	movf	(??_sprintf+2)& (0+255),w,b
  3423  000118  0100               	movlb	0	; () banked
  3424  00011A  2570               	addwf	??_sprintf& (0+255),w,b
  3425  00011C  0100               	movlb	0	; () banked
  3426  00011E  6F83               	movwf	sprintf@exp& (0+255),b
  3427  000120  0E00               	movlw	0
  3428  000122  0100               	movlb	0	; () banked
  3429  000124  2171               	addwfc	(??_sprintf+1)& (0+255),w,b
  3430  000126  0100               	movlb	0	; () banked
  3431  000128  6F84               	movwf	(sprintf@exp+1)& (0+255),b
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;doprnt.c: 838: exp--;
  3435  00012A  0100               	movlb	0	; () banked
  3436  00012C  0783               	decf	sprintf@exp& (0+255),f,b
  3437  00012E  A0D8               	btfss	status,0,c
  3438  000130  0784               	decf	(sprintf@exp+1)& (0+255),f,b
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;doprnt.c: 839: exp *= 3;
  3442  000132  C083  F021         	movff	sprintf@exp,___wmul@multiplier
  3443  000136  C084  F022         	movff	sprintf@exp+1,___wmul@multiplier+1
  3444  00013A  0E00               	movlw	0
  3445  00013C  6E24               	movwf	___wmul@multiplicand+1,c
  3446  00013E  0E03               	movlw	3
  3447  000140  6E23               	movwf	___wmul@multiplicand,c
  3448  000142  EC73  F00E         	call	___wmul	;wreg free
  3449  000146  C021  F083         	movff	?___wmul,sprintf@exp
  3450  00014A  C022  F084         	movff	?___wmul+1,sprintf@exp+1
  3451                           
  3452                           ;doprnt.c: 840: exp /= 10;
  3453  00014E  C083  F019         	movff	sprintf@exp,___awdiv@dividend
  3454  000152  C084  F01A         	movff	sprintf@exp+1,___awdiv@dividend+1
  3455  000156  0E00               	movlw	0
  3456  000158  6E1C               	movwf	___awdiv@divisor+1,c
  3457  00015A  0E0A               	movlw	10
  3458  00015C  6E1B               	movwf	___awdiv@divisor,c
  3459  00015E  ECFF  F00B         	call	___awdiv	;wreg free
  3460  000162  C019  F083         	movff	?___awdiv,sprintf@exp
  3461  000166  C01A  F084         	movff	?___awdiv+1,sprintf@exp+1
  3462                           
  3463                           ;doprnt.c: 841: if(exp < 0)
  3464  00016A  0100               	movlb	0	; () banked
  3465  00016C  AF84               	btfss	(sprintf@exp+1)& (0+255),7,b
  3466  00016E  D004               	goto	l275
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;doprnt.c: 842: exp--;
  3470  000170  0100               	movlb	0	; () banked
  3471  000172  0783               	decf	sprintf@exp& (0+255),f,b
  3472  000174  A0D8               	btfss	status,0,c
  3473  000176  0784               	decf	(sprintf@exp+1)& (0+255),f,b
  3474  000178                     l275:
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3478                           
  3479                           ; BSR set to: 0
  3480  000178  0100               	movlb	0	; () banked
  3481  00017A  5183               	movf	sprintf@exp& (0+255),w,b
  3482  00017C  0800               	sublw	0
  3483  00017E  EC7B  F003         	call	_scale
  3484  000182  C036  F085         	movff	?_scale,sprintf@tmpval
  3485  000186  C037  F086         	movff	?_scale+1,sprintf@tmpval+1
  3486  00018A  C038  F087         	movff	?_scale+2,sprintf@tmpval+2
  3487                           
  3488                           ;doprnt.c: 847: tmpval.integ *= fval;
  3489  00018E  C085  F027         	movff	sprintf@tmpval,___ftmul@f1
  3490  000192  C086  F028         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3491  000196  C087  F029         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3492  00019A  C089  F02A         	movff	sprintf@fval,___ftmul@f2
  3493  00019E  C08A  F02B         	movff	sprintf@fval+1,___ftmul@f2+1
  3494  0001A2  C08B  F02C         	movff	sprintf@fval+2,___ftmul@f2+2
  3495  0001A6  EC62  F009         	call	___ftmul	;wreg free
  3496  0001AA  C027  F085         	movff	?___ftmul,sprintf@tmpval
  3497  0001AE  C028  F086         	movff	?___ftmul+1,sprintf@tmpval+1
  3498  0001B2  C029  F087         	movff	?___ftmul+2,sprintf@tmpval+2
  3499                           
  3500                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3501  0001B6  C085  F013         	movff	sprintf@tmpval,___ftge@ff1
  3502  0001BA  C086  F014         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3503  0001BE  C087  F015         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3504  0001C2  0E00               	movlw	0
  3505  0001C4  6E16               	movwf	___ftge@ff2,c
  3506  0001C6  0E80               	movlw	128
  3507  0001C8  6E17               	movwf	___ftge@ff2+1,c
  3508  0001CA  0E3F               	movlw	63
  3509  0001CC  6E18               	movwf	___ftge@ff2+2,c
  3510  0001CE  ECB7  F00B         	call	___ftge	;wreg free
  3511  0001D2  B0D8               	btfsc	status,0,c
  3512  0001D4  D005               	goto	l276
  3513                           
  3514                           ;doprnt.c: 849: exp--;
  3515  0001D6  0100               	movlb	0	; () banked
  3516  0001D8  0783               	decf	sprintf@exp& (0+255),f,b
  3517  0001DA  A0D8               	btfss	status,0,c
  3518  0001DC  0784               	decf	(sprintf@exp+1)& (0+255),f,b
  3519  0001DE  D013               	goto	l278
  3520  0001E0                     l276:
  3521                           
  3522                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3523                           
  3524                           ; BSR set to: 0
  3525  0001E0  C085  F013         	movff	sprintf@tmpval,___ftge@ff1
  3526  0001E4  C086  F014         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3527  0001E8  C087  F015         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3528  0001EC  0E00               	movlw	0
  3529  0001EE  6E16               	movwf	___ftge@ff2,c
  3530  0001F0  0E20               	movlw	32
  3531  0001F2  6E17               	movwf	___ftge@ff2+1,c
  3532  0001F4  0E41               	movlw	65
  3533  0001F6  6E18               	movwf	___ftge@ff2+2,c
  3534  0001F8  ECB7  F00B         	call	___ftge	;wreg free
  3535  0001FC  A0D8               	btfss	status,0,c
  3536  0001FE  D003               	goto	l278
  3537                           
  3538                           ;doprnt.c: 851: exp++;
  3539  000200  0100               	movlb	0	; () banked
  3540  000202  4B83               	infsnz	sprintf@exp& (0+255),f,b
  3541  000204  2B84               	incf	(sprintf@exp+1)& (0+255),f,b
  3542  000206                     l278:
  3543                           
  3544                           ;doprnt.c: 852: }
  3545                           ;doprnt.c: 1112: if(prec <= 12)
  3546                           
  3547                           ; BSR set to: 0
  3548                           
  3549                           ; BSR set to: 0
  3550                           
  3551                           ; BSR set to: 0
  3552  000206  0100               	movlb	0	; () banked
  3553  000208  BF7E               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3554  00020A  D008               	goto	u4570
  3555  00020C  0100               	movlb	0	; () banked
  3556  00020E  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  3557  000210  E11D               	bnz	l3753
  3558  000212  0E0D               	movlw	13
  3559  000214  0100               	movlb	0	; () banked
  3560  000216  5D7D               	subwf	sprintf@prec& (0+255),w,b
  3561  000218  B0D8               	btfsc	status,0,c
  3562  00021A  D018               	goto	l279
  3563  00021C                     u4570:
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;doprnt.c: 1113: fval += fround(prec);
  3567  00021C  C089  F040         	movff	sprintf@fval,___ftadd@f1
  3568  000220  C08A  F041         	movff	sprintf@fval+1,___ftadd@f1+1
  3569  000224  C08B  F042         	movff	sprintf@fval+2,___ftadd@f1+2
  3570  000228  0100               	movlb	0	; () banked
  3571  00022A  517D               	movf	sprintf@prec& (0+255),w,b
  3572  00022C  EC7F  F005         	call	_fround
  3573  000230  C036  F043         	movff	?_fround,___ftadd@f2
  3574  000234  C037  F044         	movff	?_fround+1,___ftadd@f2+1
  3575  000238  C038  F045         	movff	?_fround+2,___ftadd@f2+2
  3576  00023C  ECA8  F006         	call	___ftadd	;wreg free
  3577  000240  C040  F089         	movff	?___ftadd,sprintf@fval
  3578  000244  C041  F08A         	movff	?___ftadd+1,sprintf@fval+1
  3579  000248  C042  F08B         	movff	?___ftadd+2,sprintf@fval+2
  3580  00024C                     l279:
  3581  00024C                     l3753:
  3582                           
  3583                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3584  00024C  0100               	movlb	0	; () banked
  3585  00024E  BF84               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3586  000250  D008               	goto	u4580
  3587  000252  0100               	movlb	0	; () banked
  3588  000254  5184               	movf	(sprintf@exp+1)& (0+255),w,b
  3589  000256  E126               	bnz	l3761
  3590  000258  0E0A               	movlw	10
  3591  00025A  0100               	movlb	0	; () banked
  3592  00025C  5D83               	subwf	sprintf@exp& (0+255),w,b
  3593  00025E  B0D8               	btfsc	status,0,c
  3594  000260  D021               	goto	u4610
  3595  000262                     u4580:
  3596                           
  3597                           ; BSR set to: 0
  3598  000262  0100               	movlb	0	; () banked
  3599  000264  5189               	movf	sprintf@fval& (0+255),w,b
  3600  000266  0100               	movlb	0	; () banked
  3601  000268  118A               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3602  00026A  0100               	movlb	0	; () banked
  3603  00026C  118B               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3604  00026E  B4D8               	btfsc	status,2,c
  3605  000270  D05B               	goto	l280
  3606                           
  3607                           ; BSR set to: 0
  3608  000272  C089  F03D         	movff	sprintf@fval,___fttol@f1
  3609  000276  C08A  F03E         	movff	sprintf@fval+1,___fttol@f1+1
  3610  00027A  C08B  F03F         	movff	sprintf@fval+2,___fttol@f1+2
  3611  00027E  ECD4  F008         	call	___fttol	;wreg free
  3612  000282  503D               	movf	?___fttol,w,c
  3613  000284  103E               	iorwf	?___fttol+1,w,c
  3614  000286  103F               	iorwf	?___fttol+2,w,c
  3615  000288  1040               	iorwf	?___fttol+3,w,c
  3616  00028A  A4D8               	btfss	status,2,c
  3617  00028C  D04D               	goto	l280
  3618  00028E  0100               	movlb	0	; () banked
  3619  000290  BF84               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3620  000292  D04A               	goto	l280
  3621  000294  0100               	movlb	0	; () banked
  3622  000296  5184               	movf	(sprintf@exp+1)& (0+255),w,b
  3623  000298  E105               	bnz	l3761
  3624  00029A  0E02               	movlw	2
  3625  00029C  0100               	movlb	0	; () banked
  3626  00029E  5D83               	subwf	sprintf@exp& (0+255),w,b
  3627  0002A0  A0D8               	btfss	status,0,c
  3628  0002A2  D042               	goto	l280
  3629  0002A4                     u4610:
  3630  0002A4                     l3761:
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3634  0002A4  C085  F013         	movff	sprintf@tmpval,___ftge@ff1
  3635  0002A8  C086  F014         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3636  0002AC  C087  F015         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3637  0002B0  0E70               	movlw	112
  3638  0002B2  6E16               	movwf	___ftge@ff2,c
  3639  0002B4  0E89               	movlw	137
  3640  0002B6  6E17               	movwf	___ftge@ff2+1,c
  3641  0002B8  0E40               	movlw	64
  3642  0002BA  6E18               	movwf	___ftge@ff2+2,c
  3643  0002BC  ECB7  F00B         	call	___ftge	;wreg free
  3644  0002C0  B0D8               	btfsc	status,0,c
  3645  0002C2  D003               	goto	l283
  3646                           
  3647                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3648  0002C4  0100               	movlb	0	; () banked
  3649  0002C6  0EF7               	movlw	247
  3650  0002C8  D002               	goto	L1
  3651  0002CA                     l283:
  3652                           
  3653                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3654                           
  3655                           ; BSR set to: 0
  3656  0002CA  0100               	movlb	0	; () banked
  3657  0002CC  0EF8               	movlw	248
  3658  0002CE                     L1:
  3659  0002CE  2783               	addwf	sprintf@exp& (0+255),f,b
  3660  0002D0  0EFF               	movlw	255
  3661  0002D2  2384               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;doprnt.c: 1124: }
  3665                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3666                           
  3667                           ; BSR set to: 0
  3668  0002D4  0100               	movlb	0	; () banked
  3669  0002D6  5183               	movf	sprintf@exp& (0+255),w,b
  3670  0002D8  EC7B  F003         	call	_scale
  3671  0002DC  C036  F085         	movff	?_scale,sprintf@tmpval
  3672  0002E0  C037  F086         	movff	?_scale+1,sprintf@tmpval+1
  3673  0002E4  C038  F087         	movff	?_scale+2,sprintf@tmpval+2
  3674                           
  3675                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3676  0002E8  C089  F013         	movff	sprintf@fval,__tdiv_to_l_@f1
  3677  0002EC  C08A  F014         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3678  0002F0  C08B  F015         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3679  0002F4  C085  F016         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3680  0002F8  C086  F017         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3681  0002FC  C087  F018         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3682  000300  ECA7  F007         	call	__tdiv_to_l_	;wreg free
  3683  000304  C013  F07F         	movff	?__tdiv_to_l_,sprintf@val
  3684  000308  C014  F080         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3685  00030C  C015  F081         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3686  000310  C016  F082         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3687                           
  3688                           ;doprnt.c: 1129: fval = 0.0;
  3689  000314  0E00               	movlw	0
  3690  000316  0100               	movlb	0	; () banked
  3691  000318  6F89               	movwf	sprintf@fval& (0+255),b
  3692  00031A  0E00               	movlw	0
  3693  00031C  0100               	movlb	0	; () banked
  3694  00031E  6F8A               	movwf	(sprintf@fval+1)& (0+255),b
  3695  000320  0E00               	movlw	0
  3696  000322  0100               	movlb	0	; () banked
  3697  000324  6F8B               	movwf	(sprintf@fval+2)& (0+255),b
  3698                           
  3699                           ;doprnt.c: 1130: } else {
  3700  000326  D033               	goto	l289
  3701  000328                     l280:
  3702                           
  3703                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3704                           
  3705                           ; BSR set to: 0
  3706  000328  C089  F03D         	movff	sprintf@fval,___fttol@f1
  3707  00032C  C08A  F03E         	movff	sprintf@fval+1,___fttol@f1+1
  3708  000330  C08B  F03F         	movff	sprintf@fval+2,___fttol@f1+2
  3709  000334  ECD4  F008         	call	___fttol	;wreg free
  3710  000338  C03D  F07F         	movff	?___fttol,sprintf@val
  3711  00033C  C03E  F080         	movff	?___fttol+1,sprintf@val+1
  3712  000340  C03F  F081         	movff	?___fttol+2,sprintf@val+2
  3713  000344  C040  F082         	movff	?___fttol+3,sprintf@val+3
  3714                           
  3715                           ;doprnt.c: 1132: fval -= (double)val;
  3716  000348  C089  F063         	movff	sprintf@fval,___ftsub@f1
  3717  00034C  C08A  F064         	movff	sprintf@fval+1,___ftsub@f1+1
  3718  000350  C08B  F065         	movff	sprintf@fval+2,___ftsub@f1+2
  3719  000354  C07F  F01B         	movff	sprintf@val,___lltoft@c
  3720  000358  C080  F01C         	movff	sprintf@val+1,___lltoft@c+1
  3721  00035C  C081  F01D         	movff	sprintf@val+2,___lltoft@c+2
  3722  000360  C082  F01E         	movff	sprintf@val+3,___lltoft@c+3
  3723  000364  EC63  F00D         	call	___lltoft	;wreg free
  3724  000368  C01B  F066         	movff	?___lltoft,___ftsub@f2
  3725  00036C  C01C  F067         	movff	?___lltoft+1,___ftsub@f2+1
  3726  000370  C01D  F068         	movff	?___lltoft+2,___ftsub@f2+2
  3727  000374  ECB8  F00D         	call	___ftsub	;wreg free
  3728  000378  C063  F089         	movff	?___ftsub,sprintf@fval
  3729  00037C  C064  F08A         	movff	?___ftsub+1,sprintf@fval+1
  3730  000380  C065  F08B         	movff	?___ftsub+2,sprintf@fval+2
  3731                           
  3732                           ;doprnt.c: 1133: exp = 0;
  3733  000384  0E00               	movlw	0
  3734  000386  0100               	movlb	0	; () banked
  3735  000388  6F84               	movwf	(sprintf@exp+1)& (0+255),b
  3736  00038A  0E00               	movlw	0
  3737  00038C  6F83               	movwf	sprintf@exp& (0+255),b
  3738  00038E                     l289:
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;doprnt.c: 1134: }
  3742                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3743                           
  3744                           ; BSR set to: 0
  3745  00038E  0E01               	movlw	1
  3746  000390  0100               	movlb	0	; () banked
  3747  000392  6F8C               	movwf	sprintf@c& (0+255),b
  3748  000394                     l3781:
  3749                           
  3750                           ; BSR set to: 0
  3751  000394  0E0A               	movlw	10
  3752  000396  0100               	movlb	0	; () banked
  3753  000398  198C               	xorwf	sprintf@c& (0+255),w,b
  3754  00039A  B4D8               	btfsc	status,2,c
  3755  00039C  D01E               	goto	u4650
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;doprnt.c: 1137: if(val < dpowers[c])
  3759                           
  3760                           ; BSR set to: 0
  3761                           
  3762                           ; BSR set to: 0
  3763  00039E  0100               	movlb	0	; () banked
  3764  0003A0  518C               	movf	sprintf@c& (0+255),w,b
  3765  0003A2  0D04               	mullw	4
  3766  0003A4  0E86               	movlw	low _dpowers
  3767  0003A6  24F3               	addwf	prodl,w,c
  3768  0003A8  6EF6               	movwf	tblptrl,c
  3769  0003AA  0E7F               	movlw	high _dpowers
  3770  0003AC  20F4               	addwfc	prodh,w,c
  3771  0003AE  6EF7               	movwf	tblptrh,c
  3772  0003B0                     	if	0	;There are less than 3 active tblptr bytes
  3773  0003B0                     	endif
  3774  0003B0  0009               	tblrd		*+
  3775  0003B2  50F5               	movf	tablat,w,c
  3776  0003B4  0100               	movlb	0	; () banked
  3777  0003B6  5D7F               	subwf	sprintf@val& (0+255),w,b
  3778  0003B8  0009               	tblrd		*+
  3779  0003BA  50F5               	movf	tablat,w,c
  3780  0003BC  0100               	movlb	0	; () banked
  3781  0003BE  5980               	subwfb	(sprintf@val+1)& (0+255),w,b
  3782  0003C0  0009               	tblrd		*+
  3783  0003C2  50F5               	movf	tablat,w,c
  3784  0003C4  0100               	movlb	0	; () banked
  3785  0003C6  5981               	subwfb	(sprintf@val+2)& (0+255),w,b
  3786  0003C8  0009               	tblrd		*+
  3787  0003CA  50F5               	movf	tablat,w,c
  3788  0003CC  0100               	movlb	0	; () banked
  3789  0003CE  5982               	subwfb	(sprintf@val+3)& (0+255),w,b
  3790  0003D0  A0D8               	btfss	status,0,c
  3791  0003D2  D003               	goto	u4650
  3792                           
  3793                           ; BSR set to: 0
  3794                           
  3795                           ; BSR set to: 0
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;doprnt.c: 1138: break;
  3799  0003D4  0100               	movlb	0	; () banked
  3800  0003D6  2B8C               	incf	sprintf@c& (0+255),f,b
  3801  0003D8  D7DD               	goto	l3781
  3802  0003DA                     u4650:
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;doprnt.c: 1175: {
  3806                           ;doprnt.c: 1188: if(flag & 0x03)
  3807                           
  3808                           ; BSR set to: 0
  3809  0003DA  0E03               	movlw	3
  3810  0003DC  0100               	movlb	0	; () banked
  3811  0003DE  157B               	andwf	sprintf@flag& (0+255),w,b
  3812  0003E0  0100               	movlb	0	; () banked
  3813  0003E2  6F70               	movwf	??_sprintf& (0+255),b
  3814  0003E4  0E00               	movlw	0
  3815  0003E6  0100               	movlb	0	; () banked
  3816  0003E8  157C               	andwf	(sprintf@flag+1)& (0+255),w,b
  3817  0003EA  0100               	movlb	0	; () banked
  3818  0003EC  6F71               	movwf	(??_sprintf+1)& (0+255),b
  3819  0003EE  0100               	movlb	0	; () banked
  3820  0003F0  5170               	movf	??_sprintf& (0+255),w,b
  3821  0003F2  0100               	movlb	0	; () banked
  3822  0003F4  1171               	iorwf	(??_sprintf+1)& (0+255),w,b
  3823  0003F6  B4D8               	btfsc	status,2,c
  3824  0003F8  D052               	goto	l294
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3828  0003FA  C069  FFD9         	movff	sprintf@sp,fsr2l
  3829  0003FE  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  3830  000402  0E2D               	movlw	45
  3831  000404  D048               	goto	L2
  3832  000406                     
  3833                           ; BSR set to: 0
  3834                           ;doprnt.c: 1200: {
  3835                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3836                           
  3837                           ; BSR set to: 0
  3838  000406  C07F  F013         	movff	sprintf@val,___lldiv@dividend
  3839  00040A  C080  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  3840  00040E  C081  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  3841  000412  C082  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  3842  000416  0100               	movlb	0	; () banked
  3843  000418  518C               	movf	sprintf@c& (0+255),w,b
  3844  00041A  0D04               	mullw	4
  3845  00041C  0E86               	movlw	low _dpowers
  3846  00041E  24F3               	addwf	prodl,w,c
  3847  000420  6EF6               	movwf	tblptrl,c
  3848  000422  0E7F               	movlw	high _dpowers
  3849  000424  20F4               	addwfc	prodh,w,c
  3850  000426  6EF7               	movwf	tblptrh,c
  3851  000428                     	if	0	;There are less than 3 active tblptr bytes
  3852  000428                     	endif
  3853  000428  0009               	tblrd		*+
  3854  00042A  CFF5 F017          	movff	tablat,___lldiv@divisor
  3855  00042E  0009               	tblrd		*+
  3856  000430  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  3857  000434  0009               	tblrd		*+
  3858  000436  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  3859  00043A  000A               	tblrd		*-
  3860  00043C  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  3861  000440  EC41  F00C         	call	___lldiv	;wreg free
  3862  000444  C013  F085         	movff	?___lldiv,sprintf@tmpval
  3863  000448  C014  F086         	movff	?___lldiv+1,sprintf@tmpval+1
  3864  00044C  C015  F087         	movff	?___lldiv+2,sprintf@tmpval+2
  3865  000450  C016  F088         	movff	?___lldiv+3,sprintf@tmpval+3
  3866                           
  3867                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3868  000454  C085  F013         	movff	sprintf@tmpval,___llmod@dividend
  3869  000458  C086  F014         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3870  00045C  C087  F015         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3871  000460  C088  F016         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3872  000464  0E0A               	movlw	10
  3873  000466  6E17               	movwf	___llmod@divisor,c
  3874  000468  0E00               	movlw	0
  3875  00046A  6E18               	movwf	___llmod@divisor+1,c
  3876  00046C  0E00               	movlw	0
  3877  00046E  6E19               	movwf	___llmod@divisor+2,c
  3878  000470  0E00               	movlw	0
  3879  000472  6E1A               	movwf	___llmod@divisor+3,c
  3880  000474  EC30  F00D         	call	___llmod	;wreg free
  3881  000478  C013  F085         	movff	?___llmod,sprintf@tmpval
  3882  00047C  C014  F086         	movff	?___llmod+1,sprintf@tmpval+1
  3883  000480  C015  F087         	movff	?___llmod+2,sprintf@tmpval+2
  3884  000484  C016  F088         	movff	?___llmod+3,sprintf@tmpval+3
  3885                           
  3886                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3887  000488  0100               	movlb	0	; () banked
  3888  00048A  5185               	movf	sprintf@tmpval& (0+255),w,b
  3889  00048C  0F30               	addlw	48
  3890  00048E  C069  FFD9         	movff	sprintf@sp,fsr2l
  3891  000492  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  3892  000496                     L2:
  3893  000496  6EDF               	movwf	indf2,c
  3894                           
  3895                           ; BSR set to: 0
  3896  000498  0100               	movlb	0	; () banked
  3897  00049A  4B69               	infsnz	sprintf@sp& (0+255),f,b
  3898  00049C  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  3899  00049E                     l294:
  3900                           
  3901                           ; BSR set to: 0
  3902                           
  3903                           ; BSR set to: 0
  3904  00049E  0100               	movlb	0	; () banked
  3905  0004A0  078C               	decf	sprintf@c& (0+255),f,b
  3906  0004A2  0100               	movlb	0	; () banked
  3907  0004A4  298C               	incf	sprintf@c& (0+255),w,b
  3908  0004A6  B4D8               	btfsc	status,2,c
  3909  0004A8  D00E               	goto	l297
  3910  0004AA  D7AD               	goto	l295
  3911  0004AC                     l3809:
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3915  0004AC  C069  FFD9         	movff	sprintf@sp,fsr2l
  3916  0004B0  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  3917  0004B4  0E30               	movlw	48
  3918  0004B6  6EDF               	movwf	indf2,c
  3919                           
  3920                           ; BSR set to: 0
  3921  0004B8  0100               	movlb	0	; () banked
  3922  0004BA  4B69               	infsnz	sprintf@sp& (0+255),f,b
  3923  0004BC  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;doprnt.c: 1209: exp--;
  3927  0004BE  0100               	movlb	0	; () banked
  3928  0004C0  0783               	decf	sprintf@exp& (0+255),f,b
  3929  0004C2  A0D8               	btfss	status,0,c
  3930  0004C4  0784               	decf	(sprintf@exp+1)& (0+255),f,b
  3931  0004C6                     l297:
  3932                           
  3933                           ; BSR set to: 0
  3934                           
  3935                           ; BSR set to: 0
  3936  0004C6  0100               	movlb	0	; () banked
  3937  0004C8  BF84               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3938  0004CA  D007               	goto	u4680
  3939  0004CC  0100               	movlb	0	; () banked
  3940  0004CE  5184               	movf	(sprintf@exp+1)& (0+255),w,b
  3941  0004D0  E1ED               	bnz	l3809
  3942  0004D2  0100               	movlb	0	; () banked
  3943  0004D4  0583               	decf	sprintf@exp& (0+255),w,b
  3944  0004D6  B0D8               	btfsc	status,0,c
  3945  0004D8  D7E9               	goto	l298
  3946  0004DA                     u4680:
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;doprnt.c: 1210: }
  3950                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3951                           
  3952                           ; BSR set to: 0
  3953  0004DA  0100               	movlb	0	; () banked
  3954  0004DC  BF7E               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3955  0004DE  D00C               	goto	l300
  3956  0004E0  0100               	movlb	0	; () banked
  3957  0004E2  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  3958  0004E4  E105               	bnz	u4690
  3959  0004E6  0E09               	movlw	9
  3960  0004E8  0100               	movlb	0	; () banked
  3961  0004EA  5D7D               	subwf	sprintf@prec& (0+255),w,b
  3962  0004EC  A0D8               	btfss	status,0,c
  3963  0004EE  D004               	goto	l300
  3964  0004F0                     u4690:
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3968  0004F0  0E08               	movlw	8
  3969  0004F2  0100               	movlb	0	; () banked
  3970  0004F4  6F8C               	movwf	sprintf@c& (0+255),b
  3971  0004F6  D002               	goto	l301
  3972  0004F8                     l300:
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;doprnt.c: 1213: else
  3976                           ;doprnt.c: 1214: c = prec;
  3977  0004F8  C07D  F08C         	movff	sprintf@prec,sprintf@c
  3978  0004FC                     l301:
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;doprnt.c: 1215: prec -= c;
  3982                           
  3983                           ; BSR set to: 0
  3984  0004FC  0100               	movlb	0	; () banked
  3985  0004FE  518C               	movf	sprintf@c& (0+255),w,b
  3986  000500  0100               	movlb	0	; () banked
  3987  000502  5F7D               	subwf	sprintf@prec& (0+255),f,b
  3988  000504  0E00               	movlw	0
  3989  000506  0100               	movlb	0	; () banked
  3990  000508  BF8C               	btfsc	sprintf@c& (0+255),7,b
  3991  00050A  0EFF               	movlw	255
  3992  00050C  0100               	movlb	0	; () banked
  3993  00050E  5B7E               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3994                           
  3995                           ; BSR set to: 0
  3996                           ;doprnt.c: 1219: if(c)
  3997  000510  0100               	movlb	0	; () banked
  3998  000512  518C               	movf	sprintf@c& (0+255),w,b
  3999  000514  0100               	movlb	0	; () banked
  4000  000516  B4D8               	btfsc	status,2,c
  4001  000518  D009               	goto	l302
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4005  00051A  C069  FFD9         	movff	sprintf@sp,fsr2l
  4006  00051E  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4007  000522  0E2E               	movlw	46
  4008  000524  6EDF               	movwf	indf2,c
  4009                           
  4010                           ; BSR set to: 0
  4011  000526  0100               	movlb	0	; () banked
  4012  000528  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4013  00052A  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4014  00052C                     l302:
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4018                           
  4019                           ; BSR set to: 0
  4020  00052C  0100               	movlb	0	; () banked
  4021  00052E  518C               	movf	sprintf@c& (0+255),w,b
  4022  000530  EC7B  F003         	call	_scale
  4023  000534  C036  F076         	movff	?_scale,_sprintf$1183
  4024  000538  C037  F077         	movff	?_scale+1,_sprintf$1183+1
  4025  00053C  C038  F078         	movff	?_scale+2,_sprintf$1183+2
  4026                           
  4027                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4028  000540  C089  F02A         	movff	sprintf@fval,___ftmul@f2
  4029  000544  C08A  F02B         	movff	sprintf@fval+1,___ftmul@f2+1
  4030  000548  C08B  F02C         	movff	sprintf@fval+2,___ftmul@f2+2
  4031  00054C  C076  F027         	movff	_sprintf$1183,___ftmul@f1
  4032  000550  C077  F028         	movff	_sprintf$1183+1,___ftmul@f1+1
  4033  000554  C078  F029         	movff	_sprintf$1183+2,___ftmul@f1+2
  4034  000558  EC62  F009         	call	___ftmul	;wreg free
  4035  00055C  C027  F03D         	movff	?___ftmul,___fttol@f1
  4036  000560  C028  F03E         	movff	?___ftmul+1,___fttol@f1+1
  4037  000564  C029  F03F         	movff	?___ftmul+2,___fttol@f1+2
  4038  000568  ECD4  F008         	call	___fttol	;wreg free
  4039  00056C  C03D  F07F         	movff	?___fttol,sprintf@val
  4040  000570  C03E  F080         	movff	?___fttol+1,sprintf@val+1
  4041  000574  C03F  F081         	movff	?___fttol+2,sprintf@val+2
  4042  000578  C040  F082         	movff	?___fttol+3,sprintf@val+3
  4043                           
  4044                           ;doprnt.c: 1228: while(c--) {
  4045  00057C  D073               	goto	l303
  4046  00057E                     
  4047                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4048  00057E  C07F  F013         	movff	sprintf@val,___lldiv@dividend
  4049  000582  C080  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  4050  000586  C081  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  4051  00058A  C082  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  4052  00058E  0100               	movlb	0	; () banked
  4053  000590  518C               	movf	sprintf@c& (0+255),w,b
  4054  000592  0D04               	mullw	4
  4055  000594  0E86               	movlw	low _dpowers
  4056  000596  24F3               	addwf	prodl,w,c
  4057  000598  6EF6               	movwf	tblptrl,c
  4058  00059A  0E7F               	movlw	high _dpowers
  4059  00059C  20F4               	addwfc	prodh,w,c
  4060  00059E  6EF7               	movwf	tblptrh,c
  4061  0005A0                     	if	0	;There are less than 3 active tblptr bytes
  4062  0005A0                     	endif
  4063  0005A0  0009               	tblrd		*+
  4064  0005A2  CFF5 F017          	movff	tablat,___lldiv@divisor
  4065  0005A6  0009               	tblrd		*+
  4066  0005A8  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  4067  0005AC  0009               	tblrd		*+
  4068  0005AE  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  4069  0005B2  000A               	tblrd		*-
  4070  0005B4  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  4071  0005B8  EC41  F00C         	call	___lldiv	;wreg free
  4072  0005BC  C013  F085         	movff	?___lldiv,sprintf@tmpval
  4073  0005C0  C014  F086         	movff	?___lldiv+1,sprintf@tmpval+1
  4074  0005C4  C015  F087         	movff	?___lldiv+2,sprintf@tmpval+2
  4075  0005C8  C016  F088         	movff	?___lldiv+3,sprintf@tmpval+3
  4076                           
  4077                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4078  0005CC  C085  F013         	movff	sprintf@tmpval,___llmod@dividend
  4079  0005D0  C086  F014         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4080  0005D4  C087  F015         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4081  0005D8  C088  F016         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4082  0005DC  0E0A               	movlw	10
  4083  0005DE  6E17               	movwf	___llmod@divisor,c
  4084  0005E0  0E00               	movlw	0
  4085  0005E2  6E18               	movwf	___llmod@divisor+1,c
  4086  0005E4  0E00               	movlw	0
  4087  0005E6  6E19               	movwf	___llmod@divisor+2,c
  4088  0005E8  0E00               	movlw	0
  4089  0005EA  6E1A               	movwf	___llmod@divisor+3,c
  4090  0005EC  EC30  F00D         	call	___llmod	;wreg free
  4091  0005F0  C013  F085         	movff	?___llmod,sprintf@tmpval
  4092  0005F4  C014  F086         	movff	?___llmod+1,sprintf@tmpval+1
  4093  0005F8  C015  F087         	movff	?___llmod+2,sprintf@tmpval+2
  4094  0005FC  C016  F088         	movff	?___llmod+3,sprintf@tmpval+3
  4095                           
  4096                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4097  000600  0100               	movlb	0	; () banked
  4098  000602  5185               	movf	sprintf@tmpval& (0+255),w,b
  4099  000604  0F30               	addlw	48
  4100  000606  C069  FFD9         	movff	sprintf@sp,fsr2l
  4101  00060A  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4102  00060E  6EDF               	movwf	indf2,c
  4103                           
  4104                           ; BSR set to: 0
  4105  000610  0100               	movlb	0	; () banked
  4106  000612  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4107  000614  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;doprnt.c: 1232: val %= dpowers[c];
  4111  000616  C07F  F013         	movff	sprintf@val,___llmod@dividend
  4112  00061A  C080  F014         	movff	sprintf@val+1,___llmod@dividend+1
  4113  00061E  C081  F015         	movff	sprintf@val+2,___llmod@dividend+2
  4114  000622  C082  F016         	movff	sprintf@val+3,___llmod@dividend+3
  4115  000626  0100               	movlb	0	; () banked
  4116  000628  518C               	movf	sprintf@c& (0+255),w,b
  4117  00062A  0D04               	mullw	4
  4118  00062C  0E86               	movlw	low _dpowers
  4119  00062E  24F3               	addwf	prodl,w,c
  4120  000630  6EF6               	movwf	tblptrl,c
  4121  000632  0E7F               	movlw	high _dpowers
  4122  000634  20F4               	addwfc	prodh,w,c
  4123  000636  6EF7               	movwf	tblptrh,c
  4124  000638                     	if	0	;There are less than 3 active tblptr bytes
  4125  000638                     	endif
  4126  000638  0009               	tblrd		*+
  4127  00063A  CFF5 F017          	movff	tablat,___llmod@divisor
  4128  00063E  0009               	tblrd		*+
  4129  000640  CFF5 F018          	movff	tablat,___llmod@divisor+1
  4130  000644  0009               	tblrd		*+
  4131  000646  CFF5 F019          	movff	tablat,___llmod@divisor+2
  4132  00064A  000A               	tblrd		*-
  4133  00064C  CFF5 F01A          	movff	tablat,___llmod@divisor+3
  4134  000650  EC30  F00D         	call	___llmod	;wreg free
  4135  000654  C013  F07F         	movff	?___llmod,sprintf@val
  4136  000658  C014  F080         	movff	?___llmod+1,sprintf@val+1
  4137  00065C  C015  F081         	movff	?___llmod+2,sprintf@val+2
  4138  000660  C016  F082         	movff	?___llmod+3,sprintf@val+3
  4139  000664                     l303:
  4140  000664  0100               	movlb	0	; () banked
  4141  000666  078C               	decf	sprintf@c& (0+255),f,b
  4142  000668  0100               	movlb	0	; () banked
  4143  00066A  298C               	incf	sprintf@c& (0+255),w,b
  4144  00066C  B4D8               	btfsc	status,2,c
  4145  00066E  D00E               	goto	l306
  4146  000670  D786               	goto	l304
  4147  000672                     
  4148                           ; BSR set to: 0
  4149                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4150                           
  4151                           ; BSR set to: 0
  4152  000672  C069  FFD9         	movff	sprintf@sp,fsr2l
  4153  000676  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4154  00067A  0E30               	movlw	48
  4155  00067C  6EDF               	movwf	indf2,c
  4156                           
  4157                           ; BSR set to: 0
  4158  00067E  0100               	movlb	0	; () banked
  4159  000680  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4160  000682  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;doprnt.c: 1237: prec--;
  4164  000684  0100               	movlb	0	; () banked
  4165  000686  077D               	decf	sprintf@prec& (0+255),f,b
  4166  000688  A0D8               	btfss	status,0,c
  4167  00068A  077E               	decf	(sprintf@prec+1)& (0+255),f,b
  4168  00068C                     l306:
  4169                           
  4170                           ; BSR set to: 0
  4171                           
  4172                           ; BSR set to: 0
  4173  00068C  0100               	movlb	0	; () banked
  4174  00068E  517D               	movf	sprintf@prec& (0+255),w,b
  4175  000690  0100               	movlb	0	; () banked
  4176  000692  117E               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4177  000694  B4D8               	btfsc	status,2,c
  4178  000696  D01A               	goto	l309
  4179  000698  D7EC               	goto	l307
  4180  00069A                     l272:
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;doprnt.c: 1246: }
  4184                           ;doprnt.c: 1422: {
  4185                           ;doprnt.c: 1438: if(flag & 0x03)
  4186                           
  4187                           ; BSR set to: 0
  4188  00069A  0E03               	movlw	3
  4189  00069C  0100               	movlb	0	; () banked
  4190  00069E  157B               	andwf	sprintf@flag& (0+255),w,b
  4191  0006A0  0100               	movlb	0	; () banked
  4192  0006A2  6F70               	movwf	??_sprintf& (0+255),b
  4193  0006A4  0E00               	movlw	0
  4194  0006A6  0100               	movlb	0	; () banked
  4195  0006A8  157C               	andwf	(sprintf@flag+1)& (0+255),w,b
  4196  0006AA  0100               	movlb	0	; () banked
  4197  0006AC  6F71               	movwf	(??_sprintf+1)& (0+255),b
  4198  0006AE  0100               	movlb	0	; () banked
  4199  0006B0  5170               	movf	??_sprintf& (0+255),w,b
  4200  0006B2  0100               	movlb	0	; () banked
  4201  0006B4  1171               	iorwf	(??_sprintf+1)& (0+255),w,b
  4202  0006B6  B4D8               	btfsc	status,2,c
  4203  0006B8  D009               	goto	l309
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4207  0006BA  C069  FFD9         	movff	sprintf@sp,fsr2l
  4208  0006BE  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4209  0006C2  0E2D               	movlw	45
  4210  0006C4  6EDF               	movwf	indf2,c
  4211  0006C6                     l3857:
  4212                           
  4213                           ; BSR set to: 0
  4214  0006C6  0100               	movlb	0	; () banked
  4215  0006C8  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4216  0006CA  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4217  0006CC                     l309:
  4218                           
  4219                           ; BSR set to: 0
  4220                           
  4221                           ; BSR set to: 0
  4222                           
  4223                           ; BSR set to: 0
  4224  0006CC  C06B  FFF6         	movff	sprintf@f,tblptrl
  4225  0006D0  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  4226  0006D4  0100               	movlb	0	; () banked
  4227  0006D6  4B6B               	infsnz	sprintf@f& (0+255),f,b
  4228  0006D8  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  4229  0006DA                     	if	0	;tblptru may be non-zero
  4230  0006DA                     	endif
  4231  0006DA                     	if	0	;tblptru may be non-zero
  4232  0006DA                     	endif
  4233  0006DA  0008               	tblrd		*
  4234  0006DC  CFF5 F08C          	movff	tablat,sprintf@c
  4235  0006E0  0100               	movlb	0	; () banked
  4236  0006E2  518C               	movf	sprintf@c& (0+255),w,b
  4237  0006E4  A4D8               	btfss	status,2,c
  4238  0006E6  D49C               	goto	l264
  4239  0006E8                     u4740:
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;doprnt.c: 1538: *sp = 0;
  4243                           
  4244                           ; BSR set to: 0
  4245                           
  4246                           ;doprnt.c: 1469: }
  4247                           ;doprnt.c: 1533: }
  4248                           ;doprnt.c: 1535: alldone:
  4249                           
  4250                           ; BSR set to: 0
  4251  0006E8  C069  FFD9         	movff	sprintf@sp,fsr2l
  4252  0006EC  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4253  0006F0  0E00               	movlw	0
  4254  0006F2  6EDF               	movwf	indf2,c
  4255  0006F4  0012               	return	
  4256  0006F6                     __end_of_sprintf:
  4257                           	opt stack 0
  4258                           tblptru	equ	0xFF8
  4259                           tblptrh	equ	0xFF7
  4260                           tblptrl	equ	0xFF6
  4261                           tablat	equ	0xFF5
  4262                           prodh	equ	0xFF4
  4263                           prodl	equ	0xFF3
  4264                           postinc0	equ	0xFEE
  4265                           wreg	equ	0xFE8
  4266                           postdec1	equ	0xFE5
  4267                           plusw1	equ	0xFE3
  4268                           fsr1l	equ	0xFE1
  4269                           indf2	equ	0xFDF
  4270                           postinc2	equ	0xFDE
  4271                           postdec2	equ	0xFDD
  4272                           plusw2	equ	0xFDB
  4273                           fsr2h	equ	0xFDA
  4274                           fsr2l	equ	0xFD9
  4275                           status	equ	0xFD8
  4276                           
  4277 ;; *************** function _scale *****************
  4278 ;; Defined at:
  4279 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;  scl             1    wreg     char 
  4282 ;; Auto vars:     Size  Location     Type
  4283 ;;  scl             1   59[COMRAM] char 
  4284 ;; Return value:  Size  Location     Type
  4285 ;;                  3   53[COMRAM] char 
  4286 ;; Registers used:
  4287 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4293 ;;      Params:         3       0       0       0       0       0       0       0       0
  4294 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4295 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4296 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4297 ;;Total ram usage:        7 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:    3
  4300 ;; This function calls:
  4301 ;;		___awdiv
  4302 ;;		___awmod
  4303 ;;		___ftmul
  4304 ;;		___wmul
  4305 ;; This function is called by:
  4306 ;;		_sprintf
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           	psect	text2
  4311  0006F6                     __ptext2:
  4312                           	opt stack 0
  4313  0006F6                     _scale:
  4314                           	opt stack 26
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;incstack = 0
  4318                           ;scale@scl stored from wreg
  4319  0006F6  6E3C               	movwf	scale@scl,c
  4320                           
  4321                           ;doprnt.c: 428: if(scl < 0) {
  4322  0006F8  AE3C               	btfss	scale@scl,7,c
  4323  0006FA  D101               	goto	l253
  4324                           
  4325                           ;doprnt.c: 429: scl = -scl;
  4326  0006FC  6C3C               	negf	scale@scl,c
  4327                           
  4328                           ;doprnt.c: 430: if(scl>=110)
  4329  0006FE  503C               	movf	scale@scl,w,c
  4330  000700  0A80               	xorlw	128
  4331  000702  0F12               	addlw	-238
  4332  000704  A0D8               	btfss	status,0,c
  4333  000706  D091               	goto	l254
  4334                           
  4335                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4336  000708  0E00               	movlw	0
  4337  00070A  6E24               	movwf	___wmul@multiplicand+1,c
  4338  00070C  0E03               	movlw	3
  4339  00070E  6E23               	movwf	___wmul@multiplicand,c
  4340  000710  0E00               	movlw	0
  4341  000712  6E1C               	movwf	___awdiv@divisor+1,c
  4342  000714  0E0A               	movlw	10
  4343  000716  6E1B               	movwf	___awdiv@divisor,c
  4344  000718  0E00               	movlw	0
  4345  00071A  6E16               	movwf	___awmod@divisor+1,c
  4346  00071C  0E64               	movlw	100
  4347  00071E  6E15               	movwf	___awmod@divisor,c
  4348  000720  503C               	movf	scale@scl,w,c
  4349  000722  6E13               	movwf	___awmod@dividend,c
  4350  000724  6A14               	clrf	___awmod@dividend+1,c
  4351  000726  BE13               	btfsc	___awmod@dividend,7,c
  4352  000728  0614               	decf	___awmod@dividend+1,f,c
  4353  00072A  ECC1  F00C         	call	___awmod	;wreg free
  4354  00072E  C013  F019         	movff	?___awmod,___awdiv@dividend
  4355  000732  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  4356  000736  ECFF  F00B         	call	___awdiv	;wreg free
  4357  00073A  0E09               	movlw	9
  4358  00073C  2419               	addwf	?___awdiv,w,c
  4359  00073E  6E21               	movwf	___wmul@multiplier,c
  4360  000740  0E00               	movlw	0
  4361  000742  201A               	addwfc	?___awdiv+1,w,c
  4362  000744  6E22               	movwf	___wmul@multiplier+1,c
  4363  000746  EC73  F00E         	call	___wmul	;wreg free
  4364  00074A  0ED5               	movlw	low __npowers_
  4365  00074C  2421               	addwf	?___wmul,w,c
  4366  00074E  6EF6               	movwf	tblptrl,c
  4367  000750  0E7F               	movlw	high __npowers_
  4368  000752  2022               	addwfc	?___wmul+1,w,c
  4369  000754  6EF7               	movwf	tblptrh,c
  4370  000756                     	if	0	;There are less than 3 active tblptr bytes
  4371  000756                     	endif
  4372  000756  0009               	tblrd		*+
  4373  000758  CFF5 F02A          	movff	tablat,___ftmul@f2
  4374  00075C  0009               	tblrd		*+
  4375  00075E  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4376  000762  000A               	tblrd		*-
  4377  000764  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4378  000768  0E00               	movlw	0
  4379  00076A  6E1C               	movwf	___awdiv@divisor+1,c
  4380  00076C  0E64               	movlw	100
  4381  00076E  6E1B               	movwf	___awdiv@divisor,c
  4382  000770  503C               	movf	scale@scl,w,c
  4383  000772  6E19               	movwf	___awdiv@dividend,c
  4384  000774  6A1A               	clrf	___awdiv@dividend+1,c
  4385  000776  BE19               	btfsc	___awdiv@dividend,7,c
  4386  000778  061A               	decf	___awdiv@dividend+1,f,c
  4387  00077A  ECFF  F00B         	call	___awdiv	;wreg free
  4388  00077E  0E12               	movlw	18
  4389  000780  2419               	addwf	?___awdiv,w,c
  4390  000782  6E21               	movwf	___wmul@multiplier,c
  4391  000784  0E00               	movlw	0
  4392  000786  201A               	addwfc	?___awdiv+1,w,c
  4393  000788  6E22               	movwf	___wmul@multiplier+1,c
  4394  00078A  0E00               	movlw	0
  4395  00078C  6E24               	movwf	___wmul@multiplicand+1,c
  4396  00078E  0E03               	movlw	3
  4397  000790  6E23               	movwf	___wmul@multiplicand,c
  4398  000792  EC73  F00E         	call	___wmul	;wreg free
  4399  000796  0ED5               	movlw	low __npowers_
  4400  000798  2421               	addwf	?___wmul,w,c
  4401  00079A  6EF6               	movwf	tblptrl,c
  4402  00079C  0E7F               	movlw	high __npowers_
  4403  00079E  2022               	addwfc	?___wmul+1,w,c
  4404  0007A0  6EF7               	movwf	tblptrh,c
  4405  0007A2                     	if	0	;There are less than 3 active tblptr bytes
  4406  0007A2                     	endif
  4407  0007A2  0009               	tblrd		*+
  4408  0007A4  CFF5 F027          	movff	tablat,___ftmul@f1
  4409  0007A8  0009               	tblrd		*+
  4410  0007AA  CFF5 F028          	movff	tablat,___ftmul@f1+1
  4411  0007AE  000A               	tblrd		*-
  4412  0007B0  CFF5 F029          	movff	tablat,___ftmul@f1+2
  4413  0007B4  EC62  F009         	call	___ftmul	;wreg free
  4414  0007B8  C027  F039         	movff	?___ftmul,_scale$1182
  4415  0007BC  C028  F03A         	movff	?___ftmul+1,_scale$1182+1
  4416  0007C0  C029  F03B         	movff	?___ftmul+2,_scale$1182+2
  4417                           
  4418                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4419  0007C4  C039  F027         	movff	_scale$1182,___ftmul@f1
  4420  0007C8  C03A  F028         	movff	_scale$1182+1,___ftmul@f1+1
  4421  0007CC  C03B  F029         	movff	_scale$1182+2,___ftmul@f1+2
  4422  0007D0  0E00               	movlw	0
  4423  0007D2  6E24               	movwf	___wmul@multiplicand+1,c
  4424  0007D4  0E03               	movlw	3
  4425  0007D6  6E23               	movwf	___wmul@multiplicand,c
  4426  0007D8  0E00               	movlw	0
  4427  0007DA  6E16               	movwf	___awmod@divisor+1,c
  4428  0007DC  0E0A               	movlw	10
  4429  0007DE  6E15               	movwf	___awmod@divisor,c
  4430  0007E0  503C               	movf	scale@scl,w,c
  4431  0007E2  6E13               	movwf	___awmod@dividend,c
  4432  0007E4  6A14               	clrf	___awmod@dividend+1,c
  4433  0007E6  BE13               	btfsc	___awmod@dividend,7,c
  4434  0007E8  0614               	decf	___awmod@dividend+1,f,c
  4435  0007EA  ECC1  F00C         	call	___awmod	;wreg free
  4436  0007EE  C013  F021         	movff	?___awmod,___wmul@multiplier
  4437  0007F2  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4438  0007F6  EC73  F00E         	call	___wmul	;wreg free
  4439  0007FA  0ED5               	movlw	low __npowers_
  4440  0007FC  2421               	addwf	?___wmul,w,c
  4441  0007FE  6EF6               	movwf	tblptrl,c
  4442  000800  0E7F               	movlw	high __npowers_
  4443  000802  2022               	addwfc	?___wmul+1,w,c
  4444  000804  6EF7               	movwf	tblptrh,c
  4445  000806                     	if	0	;There are less than 3 active tblptr bytes
  4446  000806                     	endif
  4447  000806  0009               	tblrd		*+
  4448  000808  CFF5 F02A          	movff	tablat,___ftmul@f2
  4449  00080C  0009               	tblrd		*+
  4450  00080E  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4451  000812  000A               	tblrd		*-
  4452  000814  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4453  000818  EC62  F009         	call	___ftmul	;wreg free
  4454  00081C  C027  F036         	movff	?___ftmul,?_scale
  4455  000820  C028  F037         	movff	?___ftmul+1,?_scale+1
  4456  000824  C029  F038         	movff	?___ftmul+2,?_scale+2
  4457  000828  0012               	return	
  4458  00082A                     l254:
  4459                           
  4460                           ;doprnt.c: 432: else if(scl > 10)
  4461  00082A  503C               	movf	scale@scl,w,c
  4462  00082C  0A80               	xorlw	128
  4463  00082E  0F75               	addlw	-139
  4464  000830  A0D8               	btfss	status,0,c
  4465  000832  D053               	goto	l257
  4466                           
  4467                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4468  000834  0E00               	movlw	0
  4469  000836  6E1C               	movwf	___awdiv@divisor+1,c
  4470  000838  0E0A               	movlw	10
  4471  00083A  6E1B               	movwf	___awdiv@divisor,c
  4472  00083C  503C               	movf	scale@scl,w,c
  4473  00083E  6E19               	movwf	___awdiv@dividend,c
  4474  000840  6A1A               	clrf	___awdiv@dividend+1,c
  4475  000842  BE19               	btfsc	___awdiv@dividend,7,c
  4476  000844  061A               	decf	___awdiv@dividend+1,f,c
  4477  000846  ECFF  F00B         	call	___awdiv	;wreg free
  4478  00084A  0E09               	movlw	9
  4479  00084C  2419               	addwf	?___awdiv,w,c
  4480  00084E  6E21               	movwf	___wmul@multiplier,c
  4481  000850  0E00               	movlw	0
  4482  000852  201A               	addwfc	?___awdiv+1,w,c
  4483  000854  6E22               	movwf	___wmul@multiplier+1,c
  4484  000856  0E00               	movlw	0
  4485  000858  6E24               	movwf	___wmul@multiplicand+1,c
  4486  00085A  0E03               	movlw	3
  4487  00085C  6E23               	movwf	___wmul@multiplicand,c
  4488  00085E  EC73  F00E         	call	___wmul	;wreg free
  4489  000862  0ED5               	movlw	low __npowers_
  4490  000864  2421               	addwf	?___wmul,w,c
  4491  000866  6EF6               	movwf	tblptrl,c
  4492  000868  0E7F               	movlw	high __npowers_
  4493  00086A  2022               	addwfc	?___wmul+1,w,c
  4494  00086C  6EF7               	movwf	tblptrh,c
  4495  00086E                     	if	0	;There are less than 3 active tblptr bytes
  4496  00086E                     	endif
  4497  00086E  0009               	tblrd		*+
  4498  000870  CFF5 F027          	movff	tablat,___ftmul@f1
  4499  000874  0009               	tblrd		*+
  4500  000876  CFF5 F028          	movff	tablat,___ftmul@f1+1
  4501  00087A  000A               	tblrd		*-
  4502  00087C  CFF5 F029          	movff	tablat,___ftmul@f1+2
  4503  000880  0E00               	movlw	0
  4504  000882  6E24               	movwf	___wmul@multiplicand+1,c
  4505  000884  0E03               	movlw	3
  4506  000886  6E23               	movwf	___wmul@multiplicand,c
  4507  000888  0E00               	movlw	0
  4508  00088A  6E16               	movwf	___awmod@divisor+1,c
  4509  00088C  0E0A               	movlw	10
  4510  00088E  6E15               	movwf	___awmod@divisor,c
  4511  000890  503C               	movf	scale@scl,w,c
  4512  000892  6E13               	movwf	___awmod@dividend,c
  4513  000894  6A14               	clrf	___awmod@dividend+1,c
  4514  000896  BE13               	btfsc	___awmod@dividend,7,c
  4515  000898  0614               	decf	___awmod@dividend+1,f,c
  4516  00089A  ECC1  F00C         	call	___awmod	;wreg free
  4517  00089E  C013  F021         	movff	?___awmod,___wmul@multiplier
  4518  0008A2  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4519  0008A6  EC73  F00E         	call	___wmul	;wreg free
  4520  0008AA  0ED5               	movlw	low __npowers_
  4521  0008AC  2421               	addwf	?___wmul,w,c
  4522  0008AE  6EF6               	movwf	tblptrl,c
  4523  0008B0  0E7F               	movlw	high __npowers_
  4524  0008B2  2022               	addwfc	?___wmul+1,w,c
  4525  0008B4  6EF7               	movwf	tblptrh,c
  4526  0008B6                     	if	0	;There are less than 3 active tblptr bytes
  4527  0008B6                     	endif
  4528  0008B6  0009               	tblrd		*+
  4529  0008B8  CFF5 F02A          	movff	tablat,___ftmul@f2
  4530  0008BC  0009               	tblrd		*+
  4531  0008BE  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4532  0008C2  000A               	tblrd		*-
  4533  0008C4  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4534  0008C8  EC62  F009         	call	___ftmul	;wreg free
  4535  0008CC  C027  F036         	movff	?___ftmul,?_scale
  4536  0008D0  C028  F037         	movff	?___ftmul+1,?_scale+1
  4537  0008D4  C029  F038         	movff	?___ftmul+2,?_scale+2
  4538  0008D8  0012               	return	
  4539  0008DA                     l257:
  4540                           
  4541                           ;doprnt.c: 434: return _npowers_[scl];
  4542  0008DA  503C               	movf	scale@scl,w,c
  4543  0008DC  0D03               	mullw	3
  4544  0008DE  0ED5               	movlw	low __npowers_
  4545  0008E0  24F3               	addwf	prodl,w,c
  4546  0008E2  6EF6               	movwf	tblptrl,c
  4547  0008E4  0E7F               	movlw	high __npowers_
  4548  0008E6  20F4               	addwfc	prodh,w,c
  4549  0008E8  6EF7               	movwf	tblptrh,c
  4550  0008EA                     	if	0	;There are less than 3 active tblptr bytes
  4551  0008EA                     	endif
  4552  0008EA  0009               	tblrd		*+
  4553  0008EC  CFF5 F036          	movff	tablat,?_scale
  4554  0008F0  0009               	tblrd		*+
  4555  0008F2  CFF5 F037          	movff	tablat,?_scale+1
  4556  0008F6  000A               	tblrd		*-
  4557  0008F8  CFF5 F038          	movff	tablat,?_scale+2
  4558  0008FC  0012               	return	
  4559  0008FE                     l253:
  4560                           
  4561                           ;doprnt.c: 435: }
  4562                           ;doprnt.c: 436: if(scl>=110)
  4563  0008FE  503C               	movf	scale@scl,w,c
  4564  000900  0A80               	xorlw	128
  4565  000902  0F12               	addlw	-238
  4566  000904  A0D8               	btfss	status,0,c
  4567  000906  D091               	goto	l258
  4568                           
  4569                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4570  000908  0E00               	movlw	0
  4571  00090A  6E24               	movwf	___wmul@multiplicand+1,c
  4572  00090C  0E03               	movlw	3
  4573  00090E  6E23               	movwf	___wmul@multiplicand,c
  4574  000910  0E00               	movlw	0
  4575  000912  6E1C               	movwf	___awdiv@divisor+1,c
  4576  000914  0E0A               	movlw	10
  4577  000916  6E1B               	movwf	___awdiv@divisor,c
  4578  000918  0E00               	movlw	0
  4579  00091A  6E16               	movwf	___awmod@divisor+1,c
  4580  00091C  0E64               	movlw	100
  4581  00091E  6E15               	movwf	___awmod@divisor,c
  4582  000920  503C               	movf	scale@scl,w,c
  4583  000922  6E13               	movwf	___awmod@dividend,c
  4584  000924  6A14               	clrf	___awmod@dividend+1,c
  4585  000926  BE13               	btfsc	___awmod@dividend,7,c
  4586  000928  0614               	decf	___awmod@dividend+1,f,c
  4587  00092A  ECC1  F00C         	call	___awmod	;wreg free
  4588  00092E  C013  F019         	movff	?___awmod,___awdiv@dividend
  4589  000932  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  4590  000936  ECFF  F00B         	call	___awdiv	;wreg free
  4591  00093A  0E09               	movlw	9
  4592  00093C  2419               	addwf	?___awdiv,w,c
  4593  00093E  6E21               	movwf	___wmul@multiplier,c
  4594  000940  0E00               	movlw	0
  4595  000942  201A               	addwfc	?___awdiv+1,w,c
  4596  000944  6E22               	movwf	___wmul@multiplier+1,c
  4597  000946  EC73  F00E         	call	___wmul	;wreg free
  4598  00094A  0EAE               	movlw	low __powers_
  4599  00094C  2421               	addwf	?___wmul,w,c
  4600  00094E  6EF6               	movwf	tblptrl,c
  4601  000950  0E7F               	movlw	high __powers_
  4602  000952  2022               	addwfc	?___wmul+1,w,c
  4603  000954  6EF7               	movwf	tblptrh,c
  4604  000956                     	if	0	;There are less than 3 active tblptr bytes
  4605  000956                     	endif
  4606  000956  0009               	tblrd		*+
  4607  000958  CFF5 F02A          	movff	tablat,___ftmul@f2
  4608  00095C  0009               	tblrd		*+
  4609  00095E  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4610  000962  000A               	tblrd		*-
  4611  000964  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4612  000968  0E00               	movlw	0
  4613  00096A  6E1C               	movwf	___awdiv@divisor+1,c
  4614  00096C  0E64               	movlw	100
  4615  00096E  6E1B               	movwf	___awdiv@divisor,c
  4616  000970  503C               	movf	scale@scl,w,c
  4617  000972  6E19               	movwf	___awdiv@dividend,c
  4618  000974  6A1A               	clrf	___awdiv@dividend+1,c
  4619  000976  BE19               	btfsc	___awdiv@dividend,7,c
  4620  000978  061A               	decf	___awdiv@dividend+1,f,c
  4621  00097A  ECFF  F00B         	call	___awdiv	;wreg free
  4622  00097E  0E12               	movlw	18
  4623  000980  2419               	addwf	?___awdiv,w,c
  4624  000982  6E21               	movwf	___wmul@multiplier,c
  4625  000984  0E00               	movlw	0
  4626  000986  201A               	addwfc	?___awdiv+1,w,c
  4627  000988  6E22               	movwf	___wmul@multiplier+1,c
  4628  00098A  0E00               	movlw	0
  4629  00098C  6E24               	movwf	___wmul@multiplicand+1,c
  4630  00098E  0E03               	movlw	3
  4631  000990  6E23               	movwf	___wmul@multiplicand,c
  4632  000992  EC73  F00E         	call	___wmul	;wreg free
  4633  000996  0EAE               	movlw	low __powers_
  4634  000998  2421               	addwf	?___wmul,w,c
  4635  00099A  6EF6               	movwf	tblptrl,c
  4636  00099C  0E7F               	movlw	high __powers_
  4637  00099E  2022               	addwfc	?___wmul+1,w,c
  4638  0009A0  6EF7               	movwf	tblptrh,c
  4639  0009A2                     	if	0	;There are less than 3 active tblptr bytes
  4640  0009A2                     	endif
  4641  0009A2  0009               	tblrd		*+
  4642  0009A4  CFF5 F027          	movff	tablat,___ftmul@f1
  4643  0009A8  0009               	tblrd		*+
  4644  0009AA  CFF5 F028          	movff	tablat,___ftmul@f1+1
  4645  0009AE  000A               	tblrd		*-
  4646  0009B0  CFF5 F029          	movff	tablat,___ftmul@f1+2
  4647  0009B4  EC62  F009         	call	___ftmul	;wreg free
  4648  0009B8  C027  F039         	movff	?___ftmul,_scale$1182
  4649  0009BC  C028  F03A         	movff	?___ftmul+1,_scale$1182+1
  4650  0009C0  C029  F03B         	movff	?___ftmul+2,_scale$1182+2
  4651                           
  4652                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4653  0009C4  C039  F027         	movff	_scale$1182,___ftmul@f1
  4654  0009C8  C03A  F028         	movff	_scale$1182+1,___ftmul@f1+1
  4655  0009CC  C03B  F029         	movff	_scale$1182+2,___ftmul@f1+2
  4656  0009D0  0E00               	movlw	0
  4657  0009D2  6E24               	movwf	___wmul@multiplicand+1,c
  4658  0009D4  0E03               	movlw	3
  4659  0009D6  6E23               	movwf	___wmul@multiplicand,c
  4660  0009D8  0E00               	movlw	0
  4661  0009DA  6E16               	movwf	___awmod@divisor+1,c
  4662  0009DC  0E0A               	movlw	10
  4663  0009DE  6E15               	movwf	___awmod@divisor,c
  4664  0009E0  503C               	movf	scale@scl,w,c
  4665  0009E2  6E13               	movwf	___awmod@dividend,c
  4666  0009E4  6A14               	clrf	___awmod@dividend+1,c
  4667  0009E6  BE13               	btfsc	___awmod@dividend,7,c
  4668  0009E8  0614               	decf	___awmod@dividend+1,f,c
  4669  0009EA  ECC1  F00C         	call	___awmod	;wreg free
  4670  0009EE  C013  F021         	movff	?___awmod,___wmul@multiplier
  4671  0009F2  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4672  0009F6  EC73  F00E         	call	___wmul	;wreg free
  4673  0009FA  0EAE               	movlw	low __powers_
  4674  0009FC  2421               	addwf	?___wmul,w,c
  4675  0009FE  6EF6               	movwf	tblptrl,c
  4676  000A00  0E7F               	movlw	high __powers_
  4677  000A02  2022               	addwfc	?___wmul+1,w,c
  4678  000A04  6EF7               	movwf	tblptrh,c
  4679  000A06                     	if	0	;There are less than 3 active tblptr bytes
  4680  000A06                     	endif
  4681  000A06  0009               	tblrd		*+
  4682  000A08  CFF5 F02A          	movff	tablat,___ftmul@f2
  4683  000A0C  0009               	tblrd		*+
  4684  000A0E  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4685  000A12  000A               	tblrd		*-
  4686  000A14  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4687  000A18  EC62  F009         	call	___ftmul	;wreg free
  4688  000A1C  C027  F036         	movff	?___ftmul,?_scale
  4689  000A20  C028  F037         	movff	?___ftmul+1,?_scale+1
  4690  000A24  C029  F038         	movff	?___ftmul+2,?_scale+2
  4691  000A28  0012               	return	
  4692  000A2A                     l258:
  4693                           
  4694                           ;doprnt.c: 438: else if(scl > 10)
  4695  000A2A  503C               	movf	scale@scl,w,c
  4696  000A2C  0A80               	xorlw	128
  4697  000A2E  0F75               	addlw	-139
  4698  000A30  A0D8               	btfss	status,0,c
  4699  000A32  D053               	goto	l260
  4700                           
  4701                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4702  000A34  0E00               	movlw	0
  4703  000A36  6E1C               	movwf	___awdiv@divisor+1,c
  4704  000A38  0E0A               	movlw	10
  4705  000A3A  6E1B               	movwf	___awdiv@divisor,c
  4706  000A3C  503C               	movf	scale@scl,w,c
  4707  000A3E  6E19               	movwf	___awdiv@dividend,c
  4708  000A40  6A1A               	clrf	___awdiv@dividend+1,c
  4709  000A42  BE19               	btfsc	___awdiv@dividend,7,c
  4710  000A44  061A               	decf	___awdiv@dividend+1,f,c
  4711  000A46  ECFF  F00B         	call	___awdiv	;wreg free
  4712  000A4A  0E09               	movlw	9
  4713  000A4C  2419               	addwf	?___awdiv,w,c
  4714  000A4E  6E21               	movwf	___wmul@multiplier,c
  4715  000A50  0E00               	movlw	0
  4716  000A52  201A               	addwfc	?___awdiv+1,w,c
  4717  000A54  6E22               	movwf	___wmul@multiplier+1,c
  4718  000A56  0E00               	movlw	0
  4719  000A58  6E24               	movwf	___wmul@multiplicand+1,c
  4720  000A5A  0E03               	movlw	3
  4721  000A5C  6E23               	movwf	___wmul@multiplicand,c
  4722  000A5E  EC73  F00E         	call	___wmul	;wreg free
  4723  000A62  0EAE               	movlw	low __powers_
  4724  000A64  2421               	addwf	?___wmul,w,c
  4725  000A66  6EF6               	movwf	tblptrl,c
  4726  000A68  0E7F               	movlw	high __powers_
  4727  000A6A  2022               	addwfc	?___wmul+1,w,c
  4728  000A6C  6EF7               	movwf	tblptrh,c
  4729  000A6E                     	if	0	;There are less than 3 active tblptr bytes
  4730  000A6E                     	endif
  4731  000A6E  0009               	tblrd		*+
  4732  000A70  CFF5 F027          	movff	tablat,___ftmul@f1
  4733  000A74  0009               	tblrd		*+
  4734  000A76  CFF5 F028          	movff	tablat,___ftmul@f1+1
  4735  000A7A  000A               	tblrd		*-
  4736  000A7C  CFF5 F029          	movff	tablat,___ftmul@f1+2
  4737  000A80  0E00               	movlw	0
  4738  000A82  6E24               	movwf	___wmul@multiplicand+1,c
  4739  000A84  0E03               	movlw	3
  4740  000A86  6E23               	movwf	___wmul@multiplicand,c
  4741  000A88  0E00               	movlw	0
  4742  000A8A  6E16               	movwf	___awmod@divisor+1,c
  4743  000A8C  0E0A               	movlw	10
  4744  000A8E  6E15               	movwf	___awmod@divisor,c
  4745  000A90  503C               	movf	scale@scl,w,c
  4746  000A92  6E13               	movwf	___awmod@dividend,c
  4747  000A94  6A14               	clrf	___awmod@dividend+1,c
  4748  000A96  BE13               	btfsc	___awmod@dividend,7,c
  4749  000A98  0614               	decf	___awmod@dividend+1,f,c
  4750  000A9A  ECC1  F00C         	call	___awmod	;wreg free
  4751  000A9E  C013  F021         	movff	?___awmod,___wmul@multiplier
  4752  000AA2  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4753  000AA6  EC73  F00E         	call	___wmul	;wreg free
  4754  000AAA  0EAE               	movlw	low __powers_
  4755  000AAC  2421               	addwf	?___wmul,w,c
  4756  000AAE  6EF6               	movwf	tblptrl,c
  4757  000AB0  0E7F               	movlw	high __powers_
  4758  000AB2  2022               	addwfc	?___wmul+1,w,c
  4759  000AB4  6EF7               	movwf	tblptrh,c
  4760  000AB6                     	if	0	;There are less than 3 active tblptr bytes
  4761  000AB6                     	endif
  4762  000AB6  0009               	tblrd		*+
  4763  000AB8  CFF5 F02A          	movff	tablat,___ftmul@f2
  4764  000ABC  0009               	tblrd		*+
  4765  000ABE  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4766  000AC2  000A               	tblrd		*-
  4767  000AC4  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4768  000AC8  EC62  F009         	call	___ftmul	;wreg free
  4769  000ACC  C027  F036         	movff	?___ftmul,?_scale
  4770  000AD0  C028  F037         	movff	?___ftmul+1,?_scale+1
  4771  000AD4  C029  F038         	movff	?___ftmul+2,?_scale+2
  4772  000AD8  0012               	return	
  4773  000ADA                     l260:
  4774                           
  4775                           ;doprnt.c: 440: return _powers_[scl];
  4776  000ADA  503C               	movf	scale@scl,w,c
  4777  000ADC  0D03               	mullw	3
  4778  000ADE  0EAE               	movlw	low __powers_
  4779  000AE0  24F3               	addwf	prodl,w,c
  4780  000AE2  6EF6               	movwf	tblptrl,c
  4781  000AE4  0E7F               	movlw	high __powers_
  4782  000AE6  20F4               	addwfc	prodh,w,c
  4783  000AE8  6EF7               	movwf	tblptrh,c
  4784  000AEA                     	if	0	;There are less than 3 active tblptr bytes
  4785  000AEA                     	endif
  4786  000AEA  0009               	tblrd		*+
  4787  000AEC  CFF5 F036          	movff	tablat,?_scale
  4788  000AF0  0009               	tblrd		*+
  4789  000AF2  CFF5 F037          	movff	tablat,?_scale+1
  4790  000AF6  000A               	tblrd		*-
  4791  000AF8  CFF5 F038          	movff	tablat,?_scale+2
  4792  000AFC  0012               	return	
  4793  000AFE                     __end_of_scale:
  4794                           	opt stack 0
  4795                           tblptru	equ	0xFF8
  4796                           tblptrh	equ	0xFF7
  4797                           tblptrl	equ	0xFF6
  4798                           tablat	equ	0xFF5
  4799                           prodh	equ	0xFF4
  4800                           prodl	equ	0xFF3
  4801                           postinc0	equ	0xFEE
  4802                           wreg	equ	0xFE8
  4803                           postdec1	equ	0xFE5
  4804                           plusw1	equ	0xFE3
  4805                           fsr1l	equ	0xFE1
  4806                           indf2	equ	0xFDF
  4807                           postinc2	equ	0xFDE
  4808                           postdec2	equ	0xFDD
  4809                           plusw2	equ	0xFDB
  4810                           fsr2h	equ	0xFDA
  4811                           fsr2l	equ	0xFD9
  4812                           status	equ	0xFD8
  4813                           
  4814 ;; *************** function _fround *****************
  4815 ;; Defined at:
  4816 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;  prec            1    wreg     unsigned char 
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;  prec            1   62[COMRAM] unsigned char 
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  3   53[COMRAM] unsigned char 
  4823 ;; Registers used:
  4824 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4830 ;;      Params:         3       0       0       0       0       0       0       0       0
  4831 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4832 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4833 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4834 ;;Total ram usage:       10 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    3
  4837 ;; This function calls:
  4838 ;;		___awdiv
  4839 ;;		___awmod
  4840 ;;		___ftmul
  4841 ;;		___wmul
  4842 ;; This function is called by:
  4843 ;;		_sprintf
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           	psect	text3
  4848  000AFE                     __ptext3:
  4849                           	opt stack 0
  4850  000AFE                     _fround:
  4851                           	opt stack 26
  4852                           
  4853                           ;incstack = 0
  4854                           ;fround@prec stored from wreg
  4855  000AFE  6E3F               	movwf	fround@prec,c
  4856                           
  4857                           ;doprnt.c: 413: if(prec>=110)
  4858  000B00  0E6D               	movlw	109
  4859  000B02  643F               	cpfsgt	fround@prec,c
  4860  000B04  D09F               	goto	l247
  4861                           
  4862                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4863  000B06  0E00               	movlw	0
  4864  000B08  6E24               	movwf	___wmul@multiplicand+1,c
  4865  000B0A  0E03               	movlw	3
  4866  000B0C  6E23               	movwf	___wmul@multiplicand,c
  4867  000B0E  0E00               	movlw	0
  4868  000B10  6E1C               	movwf	___awdiv@divisor+1,c
  4869  000B12  0E0A               	movlw	10
  4870  000B14  6E1B               	movwf	___awdiv@divisor,c
  4871  000B16  0E00               	movlw	0
  4872  000B18  6E16               	movwf	___awmod@divisor+1,c
  4873  000B1A  0E64               	movlw	100
  4874  000B1C  6E15               	movwf	___awmod@divisor,c
  4875  000B1E  C03F  F013         	movff	fround@prec,___awmod@dividend
  4876  000B22  6A14               	clrf	___awmod@dividend+1,c
  4877  000B24  ECC1  F00C         	call	___awmod	;wreg free
  4878  000B28  C013  F019         	movff	?___awmod,___awdiv@dividend
  4879  000B2C  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  4880  000B30  ECFF  F00B         	call	___awdiv	;wreg free
  4881  000B34  0E09               	movlw	9
  4882  000B36  2419               	addwf	?___awdiv,w,c
  4883  000B38  6E21               	movwf	___wmul@multiplier,c
  4884  000B3A  0E00               	movlw	0
  4885  000B3C  201A               	addwfc	?___awdiv+1,w,c
  4886  000B3E  6E22               	movwf	___wmul@multiplier+1,c
  4887  000B40  EC73  F00E         	call	___wmul	;wreg free
  4888  000B44  0ED5               	movlw	low __npowers_
  4889  000B46  2421               	addwf	?___wmul,w,c
  4890  000B48  6EF6               	movwf	tblptrl,c
  4891  000B4A  0E7F               	movlw	high __npowers_
  4892  000B4C  2022               	addwfc	?___wmul+1,w,c
  4893  000B4E  6EF7               	movwf	tblptrh,c
  4894  000B50                     	if	0	;There are less than 3 active tblptr bytes
  4895  000B50                     	endif
  4896  000B50  0009               	tblrd		*+
  4897  000B52  CFF5 F02A          	movff	tablat,___ftmul@f2
  4898  000B56  0009               	tblrd		*+
  4899  000B58  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4900  000B5C  000A               	tblrd		*-
  4901  000B5E  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4902  000B62  0E00               	movlw	0
  4903  000B64  6E1C               	movwf	___awdiv@divisor+1,c
  4904  000B66  0E64               	movlw	100
  4905  000B68  6E1B               	movwf	___awdiv@divisor,c
  4906  000B6A  C03F  F019         	movff	fround@prec,___awdiv@dividend
  4907  000B6E  6A1A               	clrf	___awdiv@dividend+1,c
  4908  000B70  ECFF  F00B         	call	___awdiv	;wreg free
  4909  000B74  0E12               	movlw	18
  4910  000B76  2419               	addwf	?___awdiv,w,c
  4911  000B78  6E21               	movwf	___wmul@multiplier,c
  4912  000B7A  0E00               	movlw	0
  4913  000B7C  201A               	addwfc	?___awdiv+1,w,c
  4914  000B7E  6E22               	movwf	___wmul@multiplier+1,c
  4915  000B80  0E00               	movlw	0
  4916  000B82  6E24               	movwf	___wmul@multiplicand+1,c
  4917  000B84  0E03               	movlw	3
  4918  000B86  6E23               	movwf	___wmul@multiplicand,c
  4919  000B88  EC73  F00E         	call	___wmul	;wreg free
  4920  000B8C  0ED5               	movlw	low __npowers_
  4921  000B8E  2421               	addwf	?___wmul,w,c
  4922  000B90  6EF6               	movwf	tblptrl,c
  4923  000B92  0E7F               	movlw	high __npowers_
  4924  000B94  2022               	addwfc	?___wmul+1,w,c
  4925  000B96  6EF7               	movwf	tblptrh,c
  4926  000B98                     	if	0	;There are less than 3 active tblptr bytes
  4927  000B98                     	endif
  4928  000B98  0009               	tblrd		*+
  4929  000B9A  CFF5 F027          	movff	tablat,___ftmul@f1
  4930  000B9E  0009               	tblrd		*+
  4931  000BA0  CFF5 F028          	movff	tablat,___ftmul@f1+1
  4932  000BA4  000A               	tblrd		*-
  4933  000BA6  CFF5 F029          	movff	tablat,___ftmul@f1+2
  4934  000BAA  EC62  F009         	call	___ftmul	;wreg free
  4935  000BAE  C027  F03C         	movff	?___ftmul,_fround$1180
  4936  000BB2  C028  F03D         	movff	?___ftmul+1,_fround$1180+1
  4937  000BB6  C029  F03E         	movff	?___ftmul+2,_fround$1180+2
  4938                           
  4939                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4940  000BBA  0E00               	movlw	0
  4941  000BBC  6E24               	movwf	___wmul@multiplicand+1,c
  4942  000BBE  0E03               	movlw	3
  4943  000BC0  6E23               	movwf	___wmul@multiplicand,c
  4944  000BC2  0E00               	movlw	0
  4945  000BC4  6E16               	movwf	___awmod@divisor+1,c
  4946  000BC6  0E0A               	movlw	10
  4947  000BC8  6E15               	movwf	___awmod@divisor,c
  4948  000BCA  C03F  F013         	movff	fround@prec,___awmod@dividend
  4949  000BCE  6A14               	clrf	___awmod@dividend+1,c
  4950  000BD0  ECC1  F00C         	call	___awmod	;wreg free
  4951  000BD4  C013  F021         	movff	?___awmod,___wmul@multiplier
  4952  000BD8  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4953  000BDC  EC73  F00E         	call	___wmul	;wreg free
  4954  000BE0  0ED5               	movlw	low __npowers_
  4955  000BE2  2421               	addwf	?___wmul,w,c
  4956  000BE4  6EF6               	movwf	tblptrl,c
  4957  000BE6  0E7F               	movlw	high __npowers_
  4958  000BE8  2022               	addwfc	?___wmul+1,w,c
  4959  000BEA  6EF7               	movwf	tblptrh,c
  4960  000BEC                     	if	0	;There are less than 3 active tblptr bytes
  4961  000BEC                     	endif
  4962  000BEC  0009               	tblrd		*+
  4963  000BEE  CFF5 F02A          	movff	tablat,___ftmul@f2
  4964  000BF2  0009               	tblrd		*+
  4965  000BF4  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4966  000BF8  000A               	tblrd		*-
  4967  000BFA  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4968  000BFE  C03C  F027         	movff	_fround$1180,___ftmul@f1
  4969  000C02  C03D  F028         	movff	_fround$1180+1,___ftmul@f1+1
  4970  000C06  C03E  F029         	movff	_fround$1180+2,___ftmul@f1+2
  4971  000C0A  EC62  F009         	call	___ftmul	;wreg free
  4972  000C0E  C027  F039         	movff	?___ftmul,_fround$1181
  4973  000C12  C028  F03A         	movff	?___ftmul+1,_fround$1181+1
  4974  000C16  C029  F03B         	movff	?___ftmul+2,_fround$1181+2
  4975                           
  4976                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4977  000C1A  C039  F027         	movff	_fround$1181,___ftmul@f1
  4978  000C1E  C03A  F028         	movff	_fround$1181+1,___ftmul@f1+1
  4979  000C22  C03B  F029         	movff	_fround$1181+2,___ftmul@f1+2
  4980  000C26  0E00               	movlw	0
  4981  000C28  6E2A               	movwf	___ftmul@f2,c
  4982  000C2A  0E00               	movlw	0
  4983  000C2C  6E2B               	movwf	___ftmul@f2+1,c
  4984  000C2E  0E3F               	movlw	63
  4985  000C30  6E2C               	movwf	___ftmul@f2+2,c
  4986  000C32  EC62  F009         	call	___ftmul	;wreg free
  4987  000C36  C027  F036         	movff	?___ftmul,?_fround
  4988  000C3A  C028  F037         	movff	?___ftmul+1,?_fround+1
  4989  000C3E  C029  F038         	movff	?___ftmul+2,?_fround+2
  4990  000C42  0012               	return	
  4991  000C44                     l247:
  4992                           
  4993                           ;doprnt.c: 415: else if(prec > 10)
  4994  000C44  0E0A               	movlw	10
  4995  000C46  643F               	cpfsgt	fround@prec,c
  4996  000C48  D063               	goto	l250
  4997                           
  4998                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4999  000C4A  0E00               	movlw	0
  5000  000C4C  6E24               	movwf	___wmul@multiplicand+1,c
  5001  000C4E  0E03               	movlw	3
  5002  000C50  6E23               	movwf	___wmul@multiplicand,c
  5003  000C52  0E00               	movlw	0
  5004  000C54  6E16               	movwf	___awmod@divisor+1,c
  5005  000C56  0E0A               	movlw	10
  5006  000C58  6E15               	movwf	___awmod@divisor,c
  5007  000C5A  C03F  F013         	movff	fround@prec,___awmod@dividend
  5008  000C5E  6A14               	clrf	___awmod@dividend+1,c
  5009  000C60  ECC1  F00C         	call	___awmod	;wreg free
  5010  000C64  C013  F021         	movff	?___awmod,___wmul@multiplier
  5011  000C68  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5012  000C6C  EC73  F00E         	call	___wmul	;wreg free
  5013  000C70  0ED5               	movlw	low __npowers_
  5014  000C72  2421               	addwf	?___wmul,w,c
  5015  000C74  6EF6               	movwf	tblptrl,c
  5016  000C76  0E7F               	movlw	high __npowers_
  5017  000C78  2022               	addwfc	?___wmul+1,w,c
  5018  000C7A  6EF7               	movwf	tblptrh,c
  5019  000C7C                     	if	0	;There are less than 3 active tblptr bytes
  5020  000C7C                     	endif
  5021  000C7C  0009               	tblrd		*+
  5022  000C7E  CFF5 F02A          	movff	tablat,___ftmul@f2
  5023  000C82  0009               	tblrd		*+
  5024  000C84  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5025  000C88  000A               	tblrd		*-
  5026  000C8A  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5027  000C8E  0E00               	movlw	0
  5028  000C90  6E1C               	movwf	___awdiv@divisor+1,c
  5029  000C92  0E0A               	movlw	10
  5030  000C94  6E1B               	movwf	___awdiv@divisor,c
  5031  000C96  C03F  F019         	movff	fround@prec,___awdiv@dividend
  5032  000C9A  6A1A               	clrf	___awdiv@dividend+1,c
  5033  000C9C  ECFF  F00B         	call	___awdiv	;wreg free
  5034  000CA0  0E09               	movlw	9
  5035  000CA2  2419               	addwf	?___awdiv,w,c
  5036  000CA4  6E21               	movwf	___wmul@multiplier,c
  5037  000CA6  0E00               	movlw	0
  5038  000CA8  201A               	addwfc	?___awdiv+1,w,c
  5039  000CAA  6E22               	movwf	___wmul@multiplier+1,c
  5040  000CAC  0E00               	movlw	0
  5041  000CAE  6E24               	movwf	___wmul@multiplicand+1,c
  5042  000CB0  0E03               	movlw	3
  5043  000CB2  6E23               	movwf	___wmul@multiplicand,c
  5044  000CB4  EC73  F00E         	call	___wmul	;wreg free
  5045  000CB8  0ED5               	movlw	low __npowers_
  5046  000CBA  2421               	addwf	?___wmul,w,c
  5047  000CBC  6EF6               	movwf	tblptrl,c
  5048  000CBE  0E7F               	movlw	high __npowers_
  5049  000CC0  2022               	addwfc	?___wmul+1,w,c
  5050  000CC2  6EF7               	movwf	tblptrh,c
  5051  000CC4                     	if	0	;There are less than 3 active tblptr bytes
  5052  000CC4                     	endif
  5053  000CC4  0009               	tblrd		*+
  5054  000CC6  CFF5 F027          	movff	tablat,___ftmul@f1
  5055  000CCA  0009               	tblrd		*+
  5056  000CCC  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5057  000CD0  000A               	tblrd		*-
  5058  000CD2  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5059  000CD6  EC62  F009         	call	___ftmul	;wreg free
  5060  000CDA  C027  F03C         	movff	?___ftmul,_fround$1180
  5061  000CDE  C028  F03D         	movff	?___ftmul+1,_fround$1180+1
  5062  000CE2  C029  F03E         	movff	?___ftmul+2,_fround$1180+2
  5063                           
  5064                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5065  000CE6  C03C  F027         	movff	_fround$1180,___ftmul@f1
  5066  000CEA  C03D  F028         	movff	_fround$1180+1,___ftmul@f1+1
  5067  000CEE  C03E  F029         	movff	_fround$1180+2,___ftmul@f1+2
  5068  000CF2  0E00               	movlw	0
  5069  000CF4  6E2A               	movwf	___ftmul@f2,c
  5070  000CF6  0E00               	movlw	0
  5071  000CF8  6E2B               	movwf	___ftmul@f2+1,c
  5072  000CFA  0E3F               	movlw	63
  5073  000CFC  6E2C               	movwf	___ftmul@f2+2,c
  5074  000CFE  EC62  F009         	call	___ftmul	;wreg free
  5075  000D02  C027  F036         	movff	?___ftmul,?_fround
  5076  000D06  C028  F037         	movff	?___ftmul+1,?_fround+1
  5077  000D0A  C029  F038         	movff	?___ftmul+2,?_fround+2
  5078  000D0E  0012               	return	
  5079  000D10                     l250:
  5080                           
  5081                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5082  000D10  503F               	movf	fround@prec,w,c
  5083  000D12  0D03               	mullw	3
  5084  000D14  0ED5               	movlw	low __npowers_
  5085  000D16  24F3               	addwf	prodl,w,c
  5086  000D18  6EF6               	movwf	tblptrl,c
  5087  000D1A  0E7F               	movlw	high __npowers_
  5088  000D1C  20F4               	addwfc	prodh,w,c
  5089  000D1E  6EF7               	movwf	tblptrh,c
  5090  000D20                     	if	0	;There are less than 3 active tblptr bytes
  5091  000D20                     	endif
  5092  000D20  0009               	tblrd		*+
  5093  000D22  CFF5 F027          	movff	tablat,___ftmul@f1
  5094  000D26  0009               	tblrd		*+
  5095  000D28  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5096  000D2C  000A               	tblrd		*-
  5097  000D2E  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5098  000D32  0E00               	movlw	0
  5099  000D34  6E2A               	movwf	___ftmul@f2,c
  5100  000D36  0E00               	movlw	0
  5101  000D38  6E2B               	movwf	___ftmul@f2+1,c
  5102  000D3A  0E3F               	movlw	63
  5103  000D3C  6E2C               	movwf	___ftmul@f2+2,c
  5104  000D3E  EC62  F009         	call	___ftmul	;wreg free
  5105  000D42  C027  F036         	movff	?___ftmul,?_fround
  5106  000D46  C028  F037         	movff	?___ftmul+1,?_fround+1
  5107  000D4A  C029  F038         	movff	?___ftmul+2,?_fround+2
  5108  000D4E  0012               	return	
  5109  000D50                     __end_of_fround:
  5110                           	opt stack 0
  5111                           tblptru	equ	0xFF8
  5112                           tblptrh	equ	0xFF7
  5113                           tblptrl	equ	0xFF6
  5114                           tablat	equ	0xFF5
  5115                           prodh	equ	0xFF4
  5116                           prodl	equ	0xFF3
  5117                           postinc0	equ	0xFEE
  5118                           wreg	equ	0xFE8
  5119                           postdec1	equ	0xFE5
  5120                           plusw1	equ	0xFE3
  5121                           fsr1l	equ	0xFE1
  5122                           indf2	equ	0xFDF
  5123                           postinc2	equ	0xFDE
  5124                           postdec2	equ	0xFDD
  5125                           plusw2	equ	0xFDB
  5126                           fsr2h	equ	0xFDA
  5127                           fsr2l	equ	0xFD9
  5128                           status	equ	0xFD8
  5129                           
  5130 ;; *************** function ___wmul *****************
  5131 ;; Defined at:
  5132 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  5133 ;; Parameters:    Size  Location     Type
  5134 ;;  multiplier      2   32[COMRAM] unsigned int 
  5135 ;;  multiplicand    2   34[COMRAM] unsigned int 
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;  product         2   36[COMRAM] unsigned int 
  5138 ;; Return value:  Size  Location     Type
  5139 ;;                  2   32[COMRAM] unsigned int 
  5140 ;; Registers used:
  5141 ;;		wreg, status,2, status,0, prodl, prodh
  5142 ;; Tracked objects:
  5143 ;;		On entry : 0/0
  5144 ;;		On exit  : 0/0
  5145 ;;		Unchanged: 0/0
  5146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5147 ;;      Params:         4       0       0       0       0       0       0       0       0
  5148 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5149 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5150 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5151 ;;Total ram usage:        6 bytes
  5152 ;; Hardware stack levels used:    1
  5153 ;; Hardware stack levels required when called:    1
  5154 ;; This function calls:
  5155 ;;		Nothing
  5156 ;; This function is called by:
  5157 ;;		_fround
  5158 ;;		_scale
  5159 ;;		_sprintf
  5160 ;; This function uses a non-reentrant model
  5161 ;;
  5162                           
  5163                           	psect	text4
  5164  001CE6                     __ptext4:
  5165                           	opt stack 0
  5166  001CE6                     ___wmul:
  5167                           	opt stack 27
  5168                           
  5169                           ;incstack = 0
  5170  001CE6  5021               	movf	___wmul@multiplier,w,c
  5171  001CE8  0223               	mulwf	___wmul@multiplicand,c
  5172  001CEA  CFF3 F025          	movff	prodl,___wmul@product
  5173  001CEE  CFF4 F026          	movff	prodh,___wmul@product+1
  5174  001CF2  5021               	movf	___wmul@multiplier,w,c
  5175  001CF4  0224               	mulwf	___wmul@multiplicand+1,c
  5176  001CF6  50F3               	movf	prodl,w,c
  5177  001CF8  2626               	addwf	___wmul@product+1,f,c
  5178  001CFA  5022               	movf	___wmul@multiplier+1,w,c
  5179  001CFC  0223               	mulwf	___wmul@multiplicand,c
  5180  001CFE  50F3               	movf	prodl,w,c
  5181  001D00  2626               	addwf	___wmul@product+1,f,c
  5182  001D02  C025  F021         	movff	___wmul@product,?___wmul
  5183  001D06  C026  F022         	movff	___wmul@product+1,?___wmul+1
  5184  001D0A  0012               	return	
  5185  001D0C                     __end_of___wmul:
  5186                           	opt stack 0
  5187                           tblptru	equ	0xFF8
  5188                           tblptrh	equ	0xFF7
  5189                           tblptrl	equ	0xFF6
  5190                           tablat	equ	0xFF5
  5191                           prodh	equ	0xFF4
  5192                           prodl	equ	0xFF3
  5193                           postinc0	equ	0xFEE
  5194                           wreg	equ	0xFE8
  5195                           postdec1	equ	0xFE5
  5196                           plusw1	equ	0xFE3
  5197                           fsr1l	equ	0xFE1
  5198                           indf2	equ	0xFDF
  5199                           postinc2	equ	0xFDE
  5200                           postdec2	equ	0xFDD
  5201                           plusw2	equ	0xFDB
  5202                           fsr2h	equ	0xFDA
  5203                           fsr2l	equ	0xFD9
  5204                           status	equ	0xFD8
  5205                           
  5206 ;; *************** function ___ftmul *****************
  5207 ;; Defined at:
  5208 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftmul.c"
  5209 ;; Parameters:    Size  Location     Type
  5210 ;;  f1              3   38[COMRAM] float 
  5211 ;;  f2              3   41[COMRAM] float 
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;  f3_as_produc    3   48[COMRAM] unsigned um
  5214 ;;  sign            1   52[COMRAM] unsigned char 
  5215 ;;  cntr            1   51[COMRAM] unsigned char 
  5216 ;;  exp             1   47[COMRAM] unsigned char 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  3   38[COMRAM] float 
  5219 ;; Registers used:
  5220 ;;		wreg, status,2, status,0, cstack
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5226 ;;      Params:         6       0       0       0       0       0       0       0       0
  5227 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5228 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5229 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5230 ;;Total ram usage:       15 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    2
  5233 ;; This function calls:
  5234 ;;		___ftpack
  5235 ;; This function is called by:
  5236 ;;		_fround
  5237 ;;		_scale
  5238 ;;		_sprintf
  5239 ;; This function uses a non-reentrant model
  5240 ;;
  5241                           
  5242                           	psect	text5
  5243  0012C4                     __ptext5:
  5244                           	opt stack 0
  5245  0012C4                     ___ftmul:
  5246                           	opt stack 26
  5247                           
  5248                           ;incstack = 0
  5249  0012C4  C029  F02D         	movff	___ftmul@f1+2,??___ftmul
  5250  0012C8  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  5251  0012CA  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  5252  0012CC  3428               	rlcf	___ftmul@f1+1,w,c
  5253  0012CE  362D               	rlcf	??___ftmul& (0+255),f,c
  5254  0012D0  E301               	bnc	u4241
  5255  0012D2  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  5256  0012D4                     u4241:
  5257  0012D4  502D               	movf	??___ftmul,w,c
  5258  0012D6  6E30               	movwf	___ftmul@exp,c
  5259  0012D8  5030               	movf	___ftmul@exp,w,c
  5260  0012DA  A4D8               	btfss	status,2,c
  5261  0012DC  D007               	goto	l639
  5262  0012DE  0E00               	movlw	0
  5263  0012E0  6E27               	movwf	?___ftmul,c
  5264  0012E2  0E00               	movlw	0
  5265  0012E4  6E28               	movwf	?___ftmul+1,c
  5266  0012E6  0E00               	movlw	0
  5267  0012E8  6E29               	movwf	?___ftmul+2,c
  5268  0012EA  0012               	return	
  5269  0012EC                     l639:
  5270  0012EC  C02C  F02D         	movff	___ftmul@f2+2,??___ftmul
  5271  0012F0  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  5272  0012F2  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  5273  0012F4  342B               	rlcf	___ftmul@f2+1,w,c
  5274  0012F6  362D               	rlcf	??___ftmul& (0+255),f,c
  5275  0012F8  E301               	bnc	u4261
  5276  0012FA  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  5277  0012FC                     u4261:
  5278  0012FC  502D               	movf	??___ftmul,w,c
  5279  0012FE  6E35               	movwf	___ftmul@sign,c
  5280  001300  5035               	movf	___ftmul@sign,w,c
  5281  001302  A4D8               	btfss	status,2,c
  5282  001304  D007               	goto	l641
  5283  001306  0E00               	movlw	0
  5284  001308  6E27               	movwf	?___ftmul,c
  5285  00130A  0E00               	movlw	0
  5286  00130C  6E28               	movwf	?___ftmul+1,c
  5287  00130E  0E00               	movlw	0
  5288  001310  6E29               	movwf	?___ftmul+2,c
  5289  001312  0012               	return	
  5290  001314                     l641:
  5291  001314  5035               	movf	___ftmul@sign,w,c
  5292  001316  0F7B               	addlw	123
  5293  001318  2630               	addwf	___ftmul@exp,f,c
  5294  00131A  C029  F035         	movff	___ftmul@f1+2,___ftmul@sign
  5295  00131E  502C               	movf	___ftmul@f2+2,w,c
  5296  001320  1A35               	xorwf	___ftmul@sign,f,c
  5297  001322  0E80               	movlw	128
  5298  001324  1635               	andwf	___ftmul@sign,f,c
  5299  001326  8E28               	bsf	___ftmul@f1+1,7,c
  5300  001328  8E2B               	bsf	___ftmul@f2+1,7,c
  5301  00132A  0EFF               	movlw	255
  5302  00132C  162A               	andwf	___ftmul@f2,f,c
  5303  00132E  0EFF               	movlw	255
  5304  001330  162B               	andwf	___ftmul@f2+1,f,c
  5305  001332  0E00               	movlw	0
  5306  001334  162C               	andwf	___ftmul@f2+2,f,c
  5307  001336  0E00               	movlw	0
  5308  001338  6E31               	movwf	___ftmul@f3_as_product,c
  5309  00133A  0E00               	movlw	0
  5310  00133C  6E32               	movwf	___ftmul@f3_as_product+1,c
  5311  00133E  0E00               	movlw	0
  5312  001340  6E33               	movwf	___ftmul@f3_as_product+2,c
  5313  001342  0E07               	movlw	7
  5314  001344  6E34               	movwf	___ftmul@cntr,c
  5315  001346  A027               	btfss	___ftmul@f1,0,c
  5316  001348  D006               	goto	l643
  5317  00134A  502A               	movf	___ftmul@f2,w,c
  5318  00134C  2631               	addwf	___ftmul@f3_as_product,f,c
  5319  00134E  502B               	movf	___ftmul@f2+1,w,c
  5320  001350  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  5321  001352  502C               	movf	___ftmul@f2+2,w,c
  5322  001354  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  5323  001356                     l643:
  5324  001356  90D8               	bcf	status,0,c
  5325  001358  3229               	rrcf	___ftmul@f1+2,f,c
  5326  00135A  3228               	rrcf	___ftmul@f1+1,f,c
  5327  00135C  3227               	rrcf	___ftmul@f1,f,c
  5328  00135E  90D8               	bcf	status,0,c
  5329  001360  362A               	rlcf	___ftmul@f2,f,c
  5330  001362  362B               	rlcf	___ftmul@f2+1,f,c
  5331  001364  362C               	rlcf	___ftmul@f2+2,f,c
  5332  001366  2E34               	decfsz	___ftmul@cntr,f,c
  5333  001368  D7EE               	goto	l642
  5334  00136A  0E09               	movlw	9
  5335  00136C  6E34               	movwf	___ftmul@cntr,c
  5336  00136E  A027               	btfss	___ftmul@f1,0,c
  5337  001370  D006               	goto	l646
  5338  001372  502A               	movf	___ftmul@f2,w,c
  5339  001374  2631               	addwf	___ftmul@f3_as_product,f,c
  5340  001376  502B               	movf	___ftmul@f2+1,w,c
  5341  001378  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  5342  00137A  502C               	movf	___ftmul@f2+2,w,c
  5343  00137C  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  5344  00137E                     l646:
  5345  00137E  90D8               	bcf	status,0,c
  5346  001380  3229               	rrcf	___ftmul@f1+2,f,c
  5347  001382  3228               	rrcf	___ftmul@f1+1,f,c
  5348  001384  3227               	rrcf	___ftmul@f1,f,c
  5349  001386  90D8               	bcf	status,0,c
  5350  001388  3233               	rrcf	___ftmul@f3_as_product+2,f,c
  5351  00138A  3232               	rrcf	___ftmul@f3_as_product+1,f,c
  5352  00138C  3231               	rrcf	___ftmul@f3_as_product,f,c
  5353  00138E  2E34               	decfsz	___ftmul@cntr,f,c
  5354  001390  D7EE               	goto	l645
  5355  001392  C031  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  5356  001396  C032  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5357  00139A  C033  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5358  00139E  C030  F016         	movff	___ftmul@exp,___ftpack@exp
  5359  0013A2  C035  F017         	movff	___ftmul@sign,___ftpack@sign
  5360  0013A6  EC13  F00B         	call	___ftpack	;wreg free
  5361  0013AA  C013  F027         	movff	?___ftpack,?___ftmul
  5362  0013AE  C014  F028         	movff	?___ftpack+1,?___ftmul+1
  5363  0013B2  C015  F029         	movff	?___ftpack+2,?___ftmul+2
  5364  0013B6  0012               	return	
  5365  0013B8                     __end_of___ftmul:
  5366                           	opt stack 0
  5367                           tblptru	equ	0xFF8
  5368                           tblptrh	equ	0xFF7
  5369                           tblptrl	equ	0xFF6
  5370                           tablat	equ	0xFF5
  5371                           prodh	equ	0xFF4
  5372                           prodl	equ	0xFF3
  5373                           postinc0	equ	0xFEE
  5374                           wreg	equ	0xFE8
  5375                           postdec1	equ	0xFE5
  5376                           plusw1	equ	0xFE3
  5377                           fsr1l	equ	0xFE1
  5378                           indf2	equ	0xFDF
  5379                           postinc2	equ	0xFDE
  5380                           postdec2	equ	0xFDD
  5381                           plusw2	equ	0xFDB
  5382                           fsr2h	equ	0xFDA
  5383                           fsr2l	equ	0xFD9
  5384                           status	equ	0xFD8
  5385                           
  5386 ;; *************** function ___awmod *****************
  5387 ;; Defined at:
  5388 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;  dividend        2   18[COMRAM] int 
  5391 ;;  divisor         2   20[COMRAM] int 
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;  sign            1   23[COMRAM] unsigned char 
  5394 ;;  counter         1   22[COMRAM] unsigned char 
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  2   18[COMRAM] int 
  5397 ;; Registers used:
  5398 ;;		wreg, status,2, status,0
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5404 ;;      Params:         4       0       0       0       0       0       0       0       0
  5405 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5406 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5407 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5408 ;;Total ram usage:        6 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    1
  5411 ;; This function calls:
  5412 ;;		Nothing
  5413 ;; This function is called by:
  5414 ;;		_fround
  5415 ;;		_scale
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           	psect	text6
  5420  001982                     __ptext6:
  5421                           	opt stack 0
  5422  001982                     ___awmod:
  5423                           	opt stack 27
  5424                           
  5425                           ;incstack = 0
  5426  001982  0E00               	movlw	0
  5427  001984  6E18               	movwf	___awmod@sign,c
  5428  001986  AE14               	btfss	___awmod@dividend+1,7,c
  5429  001988  D006               	goto	l492
  5430  00198A  6C13               	negf	___awmod@dividend,c
  5431  00198C  1E14               	comf	___awmod@dividend+1,f,c
  5432  00198E  B0D8               	btfsc	status,0,c
  5433  001990  2A14               	incf	___awmod@dividend+1,f,c
  5434  001992  0E01               	movlw	1
  5435  001994  6E18               	movwf	___awmod@sign,c
  5436  001996                     l492:
  5437  001996  AE16               	btfss	___awmod@divisor+1,7,c
  5438  001998  D004               	goto	l493
  5439  00199A  6C15               	negf	___awmod@divisor,c
  5440  00199C  1E16               	comf	___awmod@divisor+1,f,c
  5441  00199E  B0D8               	btfsc	status,0,c
  5442  0019A0  2A16               	incf	___awmod@divisor+1,f,c
  5443  0019A2                     l493:
  5444  0019A2  5015               	movf	___awmod@divisor,w,c
  5445  0019A4  1016               	iorwf	___awmod@divisor+1,w,c
  5446  0019A6  B4D8               	btfsc	status,2,c
  5447  0019A8  D018               	goto	l500
  5448  0019AA  0E01               	movlw	1
  5449  0019AC  6E17               	movwf	___awmod@counter,c
  5450  0019AE  D004               	goto	l495
  5451  0019B0  90D8               	bcf	status,0,c
  5452  0019B2  3615               	rlcf	___awmod@divisor,f,c
  5453  0019B4  3616               	rlcf	___awmod@divisor+1,f,c
  5454  0019B6  2A17               	incf	___awmod@counter,f,c
  5455  0019B8                     l495:
  5456  0019B8  AE16               	btfss	___awmod@divisor+1,7,c
  5457  0019BA  D7FA               	goto	l496
  5458  0019BC                     u2570:
  5459  0019BC  5015               	movf	___awmod@divisor,w,c
  5460  0019BE  5C13               	subwf	___awmod@dividend,w,c
  5461  0019C0  5016               	movf	___awmod@divisor+1,w,c
  5462  0019C2  5814               	subwfb	___awmod@dividend+1,w,c
  5463  0019C4  A0D8               	btfss	status,0,c
  5464  0019C6  D004               	goto	l499
  5465  0019C8  5015               	movf	___awmod@divisor,w,c
  5466  0019CA  5E13               	subwf	___awmod@dividend,f,c
  5467  0019CC  5016               	movf	___awmod@divisor+1,w,c
  5468  0019CE  5A14               	subwfb	___awmod@dividend+1,f,c
  5469  0019D0                     l499:
  5470  0019D0  90D8               	bcf	status,0,c
  5471  0019D2  3216               	rrcf	___awmod@divisor+1,f,c
  5472  0019D4  3215               	rrcf	___awmod@divisor,f,c
  5473  0019D6  2E17               	decfsz	___awmod@counter,f,c
  5474  0019D8  D7F1               	goto	u2570
  5475  0019DA                     l500:
  5476  0019DA  5018               	movf	___awmod@sign,w,c
  5477  0019DC  B4D8               	btfsc	status,2,c
  5478  0019DE  D004               	goto	l501
  5479  0019E0  6C13               	negf	___awmod@dividend,c
  5480  0019E2  1E14               	comf	___awmod@dividend+1,f,c
  5481  0019E4  B0D8               	btfsc	status,0,c
  5482  0019E6  2A14               	incf	___awmod@dividend+1,f,c
  5483  0019E8                     l501:
  5484  0019E8  C013  F013         	movff	___awmod@dividend,?___awmod
  5485  0019EC  C014  F014         	movff	___awmod@dividend+1,?___awmod+1
  5486  0019F0  0012               	return	
  5487  0019F2                     __end_of___awmod:
  5488                           	opt stack 0
  5489                           tblptru	equ	0xFF8
  5490                           tblptrh	equ	0xFF7
  5491                           tblptrl	equ	0xFF6
  5492                           tablat	equ	0xFF5
  5493                           prodh	equ	0xFF4
  5494                           prodl	equ	0xFF3
  5495                           postinc0	equ	0xFEE
  5496                           wreg	equ	0xFE8
  5497                           postdec1	equ	0xFE5
  5498                           plusw1	equ	0xFE3
  5499                           fsr1l	equ	0xFE1
  5500                           indf2	equ	0xFDF
  5501                           postinc2	equ	0xFDE
  5502                           postdec2	equ	0xFDD
  5503                           plusw2	equ	0xFDB
  5504                           fsr2h	equ	0xFDA
  5505                           fsr2l	equ	0xFD9
  5506                           status	equ	0xFD8
  5507                           
  5508 ;; *************** function __tdiv_to_l_ *****************
  5509 ;; Defined at:
  5510 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdivl.c"
  5511 ;; Parameters:    Size  Location     Type
  5512 ;;  f1              3   18[COMRAM] float 
  5513 ;;  f2              3   21[COMRAM] float 
  5514 ;; Auto vars:     Size  Location     Type
  5515 ;;  quot            4   27[COMRAM] unsigned long 
  5516 ;;  exp1            1   32[COMRAM] unsigned char 
  5517 ;;  cntr            1   31[COMRAM] unsigned char 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;                  4   18[COMRAM] unsigned long 
  5520 ;; Registers used:
  5521 ;;		wreg, status,2, status,0
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5527 ;;      Params:         6       0       0       0       0       0       0       0       0
  5528 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5529 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5530 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5531 ;;Total ram usage:       15 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    1
  5534 ;; This function calls:
  5535 ;;		Nothing
  5536 ;; This function is called by:
  5537 ;;		_sprintf
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           	psect	text7
  5542  000F4E                     __ptext7:
  5543                           	opt stack 0
  5544  000F4E                     __tdiv_to_l_:
  5545                           	opt stack 28
  5546                           
  5547                           ;incstack = 0
  5548  000F4E  C015  F019         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5549  000F52  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5550  000F54  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5551  000F56  3414               	rlcf	__tdiv_to_l_@f1+1,w,c
  5552  000F58  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5553  000F5A  E301               	bnc	u2771
  5554  000F5C  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5555  000F5E                     u2771:
  5556  000F5E  5019               	movf	??__tdiv_to_l_,w,c
  5557  000F60  6E21               	movwf	__tdiv_to_l_@exp1,c
  5558  000F62  5021               	movf	__tdiv_to_l_@exp1,w,c
  5559  000F64  A4D8               	btfss	status,2,c
  5560  000F66  D009               	goto	l615
  5561  000F68  0E00               	movlw	0
  5562  000F6A  6E13               	movwf	?__tdiv_to_l_,c
  5563  000F6C  0E00               	movlw	0
  5564  000F6E  6E14               	movwf	?__tdiv_to_l_+1,c
  5565  000F70  0E00               	movlw	0
  5566  000F72  6E15               	movwf	?__tdiv_to_l_+2,c
  5567  000F74  0E00               	movlw	0
  5568  000F76  6E16               	movwf	?__tdiv_to_l_+3,c
  5569  000F78  0012               	return	
  5570  000F7A                     l615:
  5571  000F7A  C018  F019         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5572  000F7E  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5573  000F80  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5574  000F82  3417               	rlcf	__tdiv_to_l_@f2+1,w,c
  5575  000F84  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5576  000F86  E301               	bnc	u2791
  5577  000F88  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5578  000F8A                     u2791:
  5579  000F8A  5019               	movf	??__tdiv_to_l_,w,c
  5580  000F8C  6E20               	movwf	__tdiv_to_l_@cntr,c
  5581  000F8E  5020               	movf	__tdiv_to_l_@cntr,w,c
  5582  000F90  A4D8               	btfss	status,2,c
  5583  000F92  D009               	goto	l617
  5584  000F94  0E00               	movlw	0
  5585  000F96  6E13               	movwf	?__tdiv_to_l_,c
  5586  000F98  0E00               	movlw	0
  5587  000F9A  6E14               	movwf	?__tdiv_to_l_+1,c
  5588  000F9C  0E00               	movlw	0
  5589  000F9E  6E15               	movwf	?__tdiv_to_l_+2,c
  5590  000FA0  0E00               	movlw	0
  5591  000FA2  6E16               	movwf	?__tdiv_to_l_+3,c
  5592  000FA4  0012               	return	
  5593  000FA6                     l617:
  5594  000FA6  8E14               	bsf	__tdiv_to_l_@f1+1,7,c
  5595  000FA8  0EFF               	movlw	255
  5596  000FAA  1613               	andwf	__tdiv_to_l_@f1,f,c
  5597  000FAC  0EFF               	movlw	255
  5598  000FAE  1614               	andwf	__tdiv_to_l_@f1+1,f,c
  5599  000FB0  0E00               	movlw	0
  5600  000FB2  1615               	andwf	__tdiv_to_l_@f1+2,f,c
  5601  000FB4  8E17               	bsf	__tdiv_to_l_@f2+1,7,c
  5602  000FB6  0EFF               	movlw	255
  5603  000FB8  1616               	andwf	__tdiv_to_l_@f2,f,c
  5604  000FBA  0EFF               	movlw	255
  5605  000FBC  1617               	andwf	__tdiv_to_l_@f2+1,f,c
  5606  000FBE  0E00               	movlw	0
  5607  000FC0  1618               	andwf	__tdiv_to_l_@f2+2,f,c
  5608  000FC2  0E00               	movlw	0
  5609  000FC4  6E1C               	movwf	__tdiv_to_l_@quot,c
  5610  000FC6  0E00               	movlw	0
  5611  000FC8  6E1D               	movwf	__tdiv_to_l_@quot+1,c
  5612  000FCA  0E00               	movlw	0
  5613  000FCC  6E1E               	movwf	__tdiv_to_l_@quot+2,c
  5614  000FCE  0E00               	movlw	0
  5615  000FD0  6E1F               	movwf	__tdiv_to_l_@quot+3,c
  5616  000FD2  0E7F               	movlw	127
  5617  000FD4  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  5618  000FD6  5020               	movf	__tdiv_to_l_@cntr,w,c
  5619  000FD8  0F98               	addlw	152
  5620  000FDA  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  5621  000FDC  0E18               	movlw	24
  5622  000FDE  6E20               	movwf	__tdiv_to_l_@cntr,c
  5623  000FE0                     l618:
  5624  000FE0  90D8               	bcf	status,0,c
  5625  000FE2  361C               	rlcf	__tdiv_to_l_@quot,f,c
  5626  000FE4  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  5627  000FE6  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  5628  000FE8  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  5629  000FEA  5016               	movf	__tdiv_to_l_@f2,w,c
  5630  000FEC  5C13               	subwf	__tdiv_to_l_@f1,w,c
  5631  000FEE  5017               	movf	__tdiv_to_l_@f2+1,w,c
  5632  000FF0  5814               	subwfb	__tdiv_to_l_@f1+1,w,c
  5633  000FF2  5018               	movf	__tdiv_to_l_@f2+2,w,c
  5634  000FF4  5815               	subwfb	__tdiv_to_l_@f1+2,w,c
  5635  000FF6  A0D8               	btfss	status,0,c
  5636  000FF8  D007               	goto	l619
  5637  000FFA  5016               	movf	__tdiv_to_l_@f2,w,c
  5638  000FFC  5E13               	subwf	__tdiv_to_l_@f1,f,c
  5639  000FFE  5017               	movf	__tdiv_to_l_@f2+1,w,c
  5640  001000  5A14               	subwfb	__tdiv_to_l_@f1+1,f,c
  5641  001002  5018               	movf	__tdiv_to_l_@f2+2,w,c
  5642  001004  5A15               	subwfb	__tdiv_to_l_@f1+2,f,c
  5643  001006  801C               	bsf	__tdiv_to_l_@quot,0,c
  5644  001008                     l619:
  5645  001008  90D8               	bcf	status,0,c
  5646  00100A  3613               	rlcf	__tdiv_to_l_@f1,f,c
  5647  00100C  3614               	rlcf	__tdiv_to_l_@f1+1,f,c
  5648  00100E  3615               	rlcf	__tdiv_to_l_@f1+2,f,c
  5649  001010  2E20               	decfsz	__tdiv_to_l_@cntr,f,c
  5650  001012  D7E6               	goto	l618
  5651  001014  AE21               	btfss	__tdiv_to_l_@exp1,7,c
  5652  001016  D016               	goto	l621
  5653  001018  5021               	movf	__tdiv_to_l_@exp1,w,c
  5654  00101A  0A80               	xorlw	128
  5655  00101C  0F97               	addlw	151
  5656  00101E  B0D8               	btfsc	status,0,c
  5657  001020  D009               	goto	l622
  5658  001022  0E00               	movlw	0
  5659  001024  6E13               	movwf	?__tdiv_to_l_,c
  5660  001026  0E00               	movlw	0
  5661  001028  6E14               	movwf	?__tdiv_to_l_+1,c
  5662  00102A  0E00               	movlw	0
  5663  00102C  6E15               	movwf	?__tdiv_to_l_+2,c
  5664  00102E  0E00               	movlw	0
  5665  001030  6E16               	movwf	?__tdiv_to_l_+3,c
  5666  001032  0012               	return	
  5667  001034                     l622:
  5668  001034  90D8               	bcf	status,0,c
  5669  001036  321F               	rrcf	__tdiv_to_l_@quot+3,f,c
  5670  001038  321E               	rrcf	__tdiv_to_l_@quot+2,f,c
  5671  00103A  321D               	rrcf	__tdiv_to_l_@quot+1,f,c
  5672  00103C  321C               	rrcf	__tdiv_to_l_@quot,f,c
  5673  00103E  3E21               	incfsz	__tdiv_to_l_@exp1,f,c
  5674  001040  D7F9               	goto	l622
  5675  001042  D015               	goto	u2850
  5676  001044                     l621:
  5677  001044  0E17               	movlw	23
  5678  001046  6421               	cpfsgt	__tdiv_to_l_@exp1,c
  5679  001048  D00F               	goto	l627
  5680  00104A  0E00               	movlw	0
  5681  00104C  6E13               	movwf	?__tdiv_to_l_,c
  5682  00104E  0E00               	movlw	0
  5683  001050  6E14               	movwf	?__tdiv_to_l_+1,c
  5684  001052  0E00               	movlw	0
  5685  001054  6E15               	movwf	?__tdiv_to_l_+2,c
  5686  001056  0E00               	movlw	0
  5687  001058  6E16               	movwf	?__tdiv_to_l_+3,c
  5688  00105A  0012               	return	
  5689  00105C  90D8               	bcf	status,0,c
  5690  00105E  361C               	rlcf	__tdiv_to_l_@quot,f,c
  5691  001060  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  5692  001062  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  5693  001064  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  5694  001066  0621               	decf	__tdiv_to_l_@exp1,f,c
  5695  001068                     l627:
  5696  001068  5021               	movf	__tdiv_to_l_@exp1,w,c
  5697  00106A  A4D8               	btfss	status,2,c
  5698  00106C  D7F7               	goto	l628
  5699  00106E                     u2850:
  5700  00106E  C01C  F013         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5701  001072  C01D  F014         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5702  001076  C01E  F015         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5703  00107A  C01F  F016         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5704  00107E  0012               	return		;funcret
  5705  001080                     __end_of__tdiv_to_l_:
  5706                           	opt stack 0
  5707                           tblptru	equ	0xFF8
  5708                           tblptrh	equ	0xFF7
  5709                           tblptrl	equ	0xFF6
  5710                           tablat	equ	0xFF5
  5711                           prodh	equ	0xFF4
  5712                           prodl	equ	0xFF3
  5713                           postinc0	equ	0xFEE
  5714                           wreg	equ	0xFE8
  5715                           postdec1	equ	0xFE5
  5716                           plusw1	equ	0xFE3
  5717                           fsr1l	equ	0xFE1
  5718                           indf2	equ	0xFDF
  5719                           postinc2	equ	0xFDE
  5720                           postdec2	equ	0xFDD
  5721                           plusw2	equ	0xFDB
  5722                           fsr2h	equ	0xFDA
  5723                           fsr2l	equ	0xFD9
  5724                           status	equ	0xFD8
  5725                           
  5726 ;; *************** function __div_to_l_ *****************
  5727 ;; Defined at:
  5728 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fldivl.c"
  5729 ;; Parameters:    Size  Location     Type
  5730 ;;  f1              3   18[COMRAM] unsigned long 
  5731 ;;  f2              3   21[COMRAM] unsigned long 
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;  quot            4   24[COMRAM] unsigned long 
  5734 ;;  exp1            1   29[COMRAM] unsigned char 
  5735 ;;  cntr            1   28[COMRAM] unsigned char 
  5736 ;; Return value:  Size  Location     Type
  5737 ;;                  4   18[COMRAM] unsigned long 
  5738 ;; Registers used:
  5739 ;;		wreg, status,2, status,0
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5745 ;;      Params:         6       0       0       0       0       0       0       0       0
  5746 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5747 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5748 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5749 ;;Total ram usage:       12 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:    1
  5752 ;; This function calls:
  5753 ;;		Nothing
  5754 ;; This function is called by:
  5755 ;;		_sprintf
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           	psect	text8
  5760  001080                     __ptext8:
  5761                           	opt stack 0
  5762  001080                     __div_to_l_:
  5763                           	opt stack 28
  5764                           
  5765                           ;incstack = 0
  5766  001080  3415               	rlcf	__div_to_l_@f1+2,w,c
  5767  001082  3416               	rlcf	__div_to_l_@f1+3,w,c
  5768  001084  6E1E               	movwf	__div_to_l_@exp1,c
  5769  001086  501E               	movf	__div_to_l_@exp1,w,c
  5770  001088  A4D8               	btfss	status,2,c
  5771  00108A  D009               	goto	l511
  5772  00108C  0E00               	movlw	0
  5773  00108E  6E13               	movwf	?__div_to_l_,c
  5774  001090  0E00               	movlw	0
  5775  001092  6E14               	movwf	?__div_to_l_+1,c
  5776  001094  0E00               	movlw	0
  5777  001096  6E15               	movwf	?__div_to_l_+2,c
  5778  001098  0E00               	movlw	0
  5779  00109A  6E16               	movwf	?__div_to_l_+3,c
  5780  00109C  0012               	return	
  5781  00109E                     l511:
  5782  00109E  3418               	rlcf	__div_to_l_@f2+2,w,c
  5783  0010A0  3419               	rlcf	__div_to_l_@f2+3,w,c
  5784  0010A2  6E1D               	movwf	__div_to_l_@cntr,c
  5785  0010A4  501D               	movf	__div_to_l_@cntr,w,c
  5786  0010A6  A4D8               	btfss	status,2,c
  5787  0010A8  D009               	goto	l513
  5788  0010AA  0E00               	movlw	0
  5789  0010AC  6E13               	movwf	?__div_to_l_,c
  5790  0010AE  0E00               	movlw	0
  5791  0010B0  6E14               	movwf	?__div_to_l_+1,c
  5792  0010B2  0E00               	movlw	0
  5793  0010B4  6E15               	movwf	?__div_to_l_+2,c
  5794  0010B6  0E00               	movlw	0
  5795  0010B8  6E16               	movwf	?__div_to_l_+3,c
  5796  0010BA  0012               	return	
  5797  0010BC                     l513:
  5798  0010BC  8E15               	bsf	__div_to_l_@f1+2,7,c
  5799  0010BE  0EFF               	movlw	255
  5800  0010C0  1613               	andwf	__div_to_l_@f1,f,c
  5801  0010C2  0EFF               	movlw	255
  5802  0010C4  1614               	andwf	__div_to_l_@f1+1,f,c
  5803  0010C6  0EFF               	movlw	255
  5804  0010C8  1615               	andwf	__div_to_l_@f1+2,f,c
  5805  0010CA  0E00               	movlw	0
  5806  0010CC  1616               	andwf	__div_to_l_@f1+3,f,c
  5807  0010CE  8E18               	bsf	__div_to_l_@f2+2,7,c
  5808  0010D0  0EFF               	movlw	255
  5809  0010D2  1616               	andwf	__div_to_l_@f2,f,c
  5810  0010D4  0EFF               	movlw	255
  5811  0010D6  1617               	andwf	__div_to_l_@f2+1,f,c
  5812  0010D8  0EFF               	movlw	255
  5813  0010DA  1618               	andwf	__div_to_l_@f2+2,f,c
  5814  0010DC  0E00               	movlw	0
  5815  0010DE  1619               	andwf	__div_to_l_@f2+3,f,c
  5816  0010E0  0E00               	movlw	0
  5817  0010E2  6E19               	movwf	__div_to_l_@quot,c
  5818  0010E4  0E00               	movlw	0
  5819  0010E6  6E1A               	movwf	__div_to_l_@quot+1,c
  5820  0010E8  0E00               	movlw	0
  5821  0010EA  6E1B               	movwf	__div_to_l_@quot+2,c
  5822  0010EC  0E00               	movlw	0
  5823  0010EE  6E1C               	movwf	__div_to_l_@quot+3,c
  5824  0010F0  0E7F               	movlw	127
  5825  0010F2  5E1E               	subwf	__div_to_l_@exp1,f,c
  5826  0010F4  501D               	movf	__div_to_l_@cntr,w,c
  5827  0010F6  0FA0               	addlw	160
  5828  0010F8  5E1E               	subwf	__div_to_l_@exp1,f,c
  5829  0010FA  0E20               	movlw	32
  5830  0010FC  6E1D               	movwf	__div_to_l_@cntr,c
  5831  0010FE  90D8               	bcf	status,0,c
  5832  001100  3619               	rlcf	__div_to_l_@quot,f,c
  5833  001102  361A               	rlcf	__div_to_l_@quot+1,f,c
  5834  001104  361B               	rlcf	__div_to_l_@quot+2,f,c
  5835  001106  361C               	rlcf	__div_to_l_@quot+3,f,c
  5836  001108  5016               	movf	__div_to_l_@f2,w,c
  5837  00110A  5C13               	subwf	__div_to_l_@f1,w,c
  5838  00110C  5017               	movf	__div_to_l_@f2+1,w,c
  5839  00110E  5814               	subwfb	__div_to_l_@f1+1,w,c
  5840  001110  5018               	movf	__div_to_l_@f2+2,w,c
  5841  001112  5815               	subwfb	__div_to_l_@f1+2,w,c
  5842  001114  5019               	movf	__div_to_l_@f2+3,w,c
  5843  001116  5816               	subwfb	__div_to_l_@f1+3,w,c
  5844  001118  A0D8               	btfss	status,0,c
  5845  00111A  D009               	goto	l515
  5846  00111C  5016               	movf	__div_to_l_@f2,w,c
  5847  00111E  5E13               	subwf	__div_to_l_@f1,f,c
  5848  001120  5017               	movf	__div_to_l_@f2+1,w,c
  5849  001122  5A14               	subwfb	__div_to_l_@f1+1,f,c
  5850  001124  5018               	movf	__div_to_l_@f2+2,w,c
  5851  001126  5A15               	subwfb	__div_to_l_@f1+2,f,c
  5852  001128  5019               	movf	__div_to_l_@f2+3,w,c
  5853  00112A  5A16               	subwfb	__div_to_l_@f1+3,f,c
  5854  00112C  8019               	bsf	__div_to_l_@quot,0,c
  5855  00112E                     l515:
  5856  00112E  90D8               	bcf	status,0,c
  5857  001130  3613               	rlcf	__div_to_l_@f1,f,c
  5858  001132  3614               	rlcf	__div_to_l_@f1+1,f,c
  5859  001134  3615               	rlcf	__div_to_l_@f1+2,f,c
  5860  001136  3616               	rlcf	__div_to_l_@f1+3,f,c
  5861  001138  2E1D               	decfsz	__div_to_l_@cntr,f,c
  5862  00113A  D7E1               	goto	l514
  5863  00113C  AE1E               	btfss	__div_to_l_@exp1,7,c
  5864  00113E  D016               	goto	l517
  5865  001140  501E               	movf	__div_to_l_@exp1,w,c
  5866  001142  0A80               	xorlw	128
  5867  001144  0F9F               	addlw	159
  5868  001146  B0D8               	btfsc	status,0,c
  5869  001148  D009               	goto	l518
  5870  00114A  0E00               	movlw	0
  5871  00114C  6E13               	movwf	?__div_to_l_,c
  5872  00114E  0E00               	movlw	0
  5873  001150  6E14               	movwf	?__div_to_l_+1,c
  5874  001152  0E00               	movlw	0
  5875  001154  6E15               	movwf	?__div_to_l_+2,c
  5876  001156  0E00               	movlw	0
  5877  001158  6E16               	movwf	?__div_to_l_+3,c
  5878  00115A  0012               	return	
  5879  00115C                     l518:
  5880  00115C  90D8               	bcf	status,0,c
  5881  00115E  321C               	rrcf	__div_to_l_@quot+3,f,c
  5882  001160  321B               	rrcf	__div_to_l_@quot+2,f,c
  5883  001162  321A               	rrcf	__div_to_l_@quot+1,f,c
  5884  001164  3219               	rrcf	__div_to_l_@quot,f,c
  5885  001166  3E1E               	incfsz	__div_to_l_@exp1,f,c
  5886  001168  D7F9               	goto	l518
  5887  00116A  D015               	goto	u2920
  5888  00116C                     l517:
  5889  00116C  0E1F               	movlw	31
  5890  00116E  641E               	cpfsgt	__div_to_l_@exp1,c
  5891  001170  D00F               	goto	l523
  5892  001172  0E00               	movlw	0
  5893  001174  6E13               	movwf	?__div_to_l_,c
  5894  001176  0E00               	movlw	0
  5895  001178  6E14               	movwf	?__div_to_l_+1,c
  5896  00117A  0E00               	movlw	0
  5897  00117C  6E15               	movwf	?__div_to_l_+2,c
  5898  00117E  0E00               	movlw	0
  5899  001180  6E16               	movwf	?__div_to_l_+3,c
  5900  001182  0012               	return	
  5901  001184  90D8               	bcf	status,0,c
  5902  001186  3619               	rlcf	__div_to_l_@quot,f,c
  5903  001188  361A               	rlcf	__div_to_l_@quot+1,f,c
  5904  00118A  361B               	rlcf	__div_to_l_@quot+2,f,c
  5905  00118C  361C               	rlcf	__div_to_l_@quot+3,f,c
  5906  00118E  061E               	decf	__div_to_l_@exp1,f,c
  5907  001190                     l523:
  5908  001190  501E               	movf	__div_to_l_@exp1,w,c
  5909  001192  A4D8               	btfss	status,2,c
  5910  001194  D7F7               	goto	l524
  5911  001196                     u2920:
  5912  001196  C019  F013         	movff	__div_to_l_@quot,?__div_to_l_
  5913  00119A  C01A  F014         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5914  00119E  C01B  F015         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5915  0011A2  C01C  F016         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5916  0011A6  0012               	return		;funcret
  5917  0011A8                     __end_of__div_to_l_:
  5918                           	opt stack 0
  5919                           tblptru	equ	0xFF8
  5920                           tblptrh	equ	0xFF7
  5921                           tblptrl	equ	0xFF6
  5922                           tablat	equ	0xFF5
  5923                           prodh	equ	0xFF4
  5924                           prodl	equ	0xFF3
  5925                           postinc0	equ	0xFEE
  5926                           wreg	equ	0xFE8
  5927                           postdec1	equ	0xFE5
  5928                           plusw1	equ	0xFE3
  5929                           fsr1l	equ	0xFE1
  5930                           indf2	equ	0xFDF
  5931                           postinc2	equ	0xFDE
  5932                           postdec2	equ	0xFDD
  5933                           plusw2	equ	0xFDB
  5934                           fsr2h	equ	0xFDA
  5935                           fsr2l	equ	0xFD9
  5936                           status	equ	0xFD8
  5937                           
  5938 ;; *************** function ___lltoft *****************
  5939 ;; Defined at:
  5940 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lltoft.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;  c               4   26[COMRAM] unsigned long 
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;  exp             1   34[COMRAM] unsigned char 
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  3   26[COMRAM] float 
  5947 ;; Registers used:
  5948 ;;		wreg, status,2, status,0, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5954 ;;      Params:         4       0       0       0       0       0       0       0       0
  5955 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5956 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5957 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5958 ;;Total ram usage:        9 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:    2
  5961 ;; This function calls:
  5962 ;;		___ftpack
  5963 ;; This function is called by:
  5964 ;;		_sprintf
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           	psect	text9
  5969  001AC6                     __ptext9:
  5970                           	opt stack 0
  5971  001AC6                     ___lltoft:
  5972                           	opt stack 27
  5973                           
  5974                           ;incstack = 0
  5975  001AC6  0E8E               	movlw	142
  5976  001AC8  6E23               	movwf	___lltoft@exp,c
  5977  001ACA  D006               	goto	l717
  5978  001ACC  90D8               	bcf	status,0,c
  5979  001ACE  321E               	rrcf	___lltoft@c+3,f,c
  5980  001AD0  321D               	rrcf	___lltoft@c+2,f,c
  5981  001AD2  321C               	rrcf	___lltoft@c+1,f,c
  5982  001AD4  321B               	rrcf	___lltoft@c,f,c
  5983  001AD6  2A23               	incf	___lltoft@exp,f,c
  5984  001AD8                     l717:
  5985  001AD8  0E00               	movlw	0
  5986  001ADA  141B               	andwf	___lltoft@c,w,c
  5987  001ADC  6E1F               	movwf	??___lltoft& (0+255),c
  5988  001ADE  0E00               	movlw	0
  5989  001AE0  141C               	andwf	___lltoft@c+1,w,c
  5990  001AE2  6E20               	movwf	(??___lltoft+1)& (0+255),c
  5991  001AE4  0E00               	movlw	0
  5992  001AE6  141D               	andwf	___lltoft@c+2,w,c
  5993  001AE8  6E21               	movwf	(??___lltoft+2)& (0+255),c
  5994  001AEA  0EFF               	movlw	255
  5995  001AEC  141E               	andwf	___lltoft@c+3,w,c
  5996  001AEE  6E22               	movwf	(??___lltoft+3)& (0+255),c
  5997  001AF0  501F               	movf	??___lltoft,w,c
  5998  001AF2  1020               	iorwf	??___lltoft+1,w,c
  5999  001AF4  1021               	iorwf	??___lltoft+2,w,c
  6000  001AF6  1022               	iorwf	??___lltoft+3,w,c
  6001  001AF8  A4D8               	btfss	status,2,c
  6002  001AFA  D7E8               	goto	l718
  6003  001AFC  C01B  F013         	movff	___lltoft@c,___ftpack@arg
  6004  001B00  C01C  F014         	movff	___lltoft@c+1,___ftpack@arg+1
  6005  001B04  C01D  F015         	movff	___lltoft@c+2,___ftpack@arg+2
  6006  001B08  C023  F016         	movff	___lltoft@exp,___ftpack@exp
  6007  001B0C  0E00               	movlw	0
  6008  001B0E  6E17               	movwf	___ftpack@sign,c
  6009  001B10  EC13  F00B         	call	___ftpack	;wreg free
  6010  001B14  C013  F01B         	movff	?___ftpack,?___lltoft
  6011  001B18  C014  F01C         	movff	?___ftpack+1,?___lltoft+1
  6012  001B1C  C015  F01D         	movff	?___ftpack+2,?___lltoft+2
  6013  001B20  0012               	return	
  6014  001B22                     __end_of___lltoft:
  6015                           	opt stack 0
  6016                           tblptru	equ	0xFF8
  6017                           tblptrh	equ	0xFF7
  6018                           tblptrl	equ	0xFF6
  6019                           tablat	equ	0xFF5
  6020                           prodh	equ	0xFF4
  6021                           prodl	equ	0xFF3
  6022                           postinc0	equ	0xFEE
  6023                           wreg	equ	0xFE8
  6024                           postdec1	equ	0xFE5
  6025                           plusw1	equ	0xFE3
  6026                           fsr1l	equ	0xFE1
  6027                           indf2	equ	0xFDF
  6028                           postinc2	equ	0xFDE
  6029                           postdec2	equ	0xFDD
  6030                           plusw2	equ	0xFDB
  6031                           fsr2h	equ	0xFDA
  6032                           fsr2l	equ	0xFD9
  6033                           status	equ	0xFD8
  6034                           
  6035 ;; *************** function ___llmod *****************
  6036 ;; Defined at:
  6037 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\llmod.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;  dividend        4   18[COMRAM] unsigned long 
  6040 ;;  divisor         4   22[COMRAM] unsigned long 
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;  counter         1   26[COMRAM] unsigned char 
  6043 ;; Return value:  Size  Location     Type
  6044 ;;                  4   18[COMRAM] unsigned long 
  6045 ;; Registers used:
  6046 ;;		wreg, status,2, status,0
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6052 ;;      Params:         8       0       0       0       0       0       0       0       0
  6053 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6054 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6055 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6056 ;;Total ram usage:        9 bytes
  6057 ;; Hardware stack levels used:    1
  6058 ;; Hardware stack levels required when called:    1
  6059 ;; This function calls:
  6060 ;;		Nothing
  6061 ;; This function is called by:
  6062 ;;		_sprintf
  6063 ;; This function uses a non-reentrant model
  6064 ;;
  6065                           
  6066                           	psect	text10
  6067  001A60                     __ptext10:
  6068                           	opt stack 0
  6069  001A60                     ___llmod:
  6070                           	opt stack 28
  6071                           
  6072                           ;incstack = 0
  6073  001A60  5017               	movf	___llmod@divisor,w,c
  6074  001A62  1018               	iorwf	___llmod@divisor+1,w,c
  6075  001A64  1019               	iorwf	___llmod@divisor+2,w,c
  6076  001A66  101A               	iorwf	___llmod@divisor+3,w,c
  6077  001A68  B4D8               	btfsc	status,2,c
  6078  001A6A  D024               	goto	l711
  6079  001A6C  0E01               	movlw	1
  6080  001A6E  6E1B               	movwf	___llmod@counter,c
  6081  001A70  D006               	goto	l706
  6082  001A72  90D8               	bcf	status,0,c
  6083  001A74  3617               	rlcf	___llmod@divisor,f,c
  6084  001A76  3618               	rlcf	___llmod@divisor+1,f,c
  6085  001A78  3619               	rlcf	___llmod@divisor+2,f,c
  6086  001A7A  361A               	rlcf	___llmod@divisor+3,f,c
  6087  001A7C  2A1B               	incf	___llmod@counter,f,c
  6088  001A7E                     l706:
  6089  001A7E  AE1A               	btfss	___llmod@divisor+3,7,c
  6090  001A80  D7F8               	goto	l707
  6091  001A82                     u3110:
  6092  001A82  5017               	movf	___llmod@divisor,w,c
  6093  001A84  5C13               	subwf	___llmod@dividend,w,c
  6094  001A86  5018               	movf	___llmod@divisor+1,w,c
  6095  001A88  5814               	subwfb	___llmod@dividend+1,w,c
  6096  001A8A  5019               	movf	___llmod@divisor+2,w,c
  6097  001A8C  5815               	subwfb	___llmod@dividend+2,w,c
  6098  001A8E  501A               	movf	___llmod@divisor+3,w,c
  6099  001A90  5816               	subwfb	___llmod@dividend+3,w,c
  6100  001A92  A0D8               	btfss	status,0,c
  6101  001A94  D008               	goto	l710
  6102  001A96  5017               	movf	___llmod@divisor,w,c
  6103  001A98  5E13               	subwf	___llmod@dividend,f,c
  6104  001A9A  5018               	movf	___llmod@divisor+1,w,c
  6105  001A9C  5A14               	subwfb	___llmod@dividend+1,f,c
  6106  001A9E  5019               	movf	___llmod@divisor+2,w,c
  6107  001AA0  5A15               	subwfb	___llmod@dividend+2,f,c
  6108  001AA2  501A               	movf	___llmod@divisor+3,w,c
  6109  001AA4  5A16               	subwfb	___llmod@dividend+3,f,c
  6110  001AA6                     l710:
  6111  001AA6  90D8               	bcf	status,0,c
  6112  001AA8  321A               	rrcf	___llmod@divisor+3,f,c
  6113  001AAA  3219               	rrcf	___llmod@divisor+2,f,c
  6114  001AAC  3218               	rrcf	___llmod@divisor+1,f,c
  6115  001AAE  3217               	rrcf	___llmod@divisor,f,c
  6116  001AB0  2E1B               	decfsz	___llmod@counter,f,c
  6117  001AB2  D7E7               	goto	u3110
  6118  001AB4                     l711:
  6119  001AB4  C013  F013         	movff	___llmod@dividend,?___llmod
  6120  001AB8  C014  F014         	movff	___llmod@dividend+1,?___llmod+1
  6121  001ABC  C015  F015         	movff	___llmod@dividend+2,?___llmod+2
  6122  001AC0  C016  F016         	movff	___llmod@dividend+3,?___llmod+3
  6123  001AC4  0012               	return		;funcret
  6124  001AC6                     __end_of___llmod:
  6125                           	opt stack 0
  6126                           tblptru	equ	0xFF8
  6127                           tblptrh	equ	0xFF7
  6128                           tblptrl	equ	0xFF6
  6129                           tablat	equ	0xFF5
  6130                           prodh	equ	0xFF4
  6131                           prodl	equ	0xFF3
  6132                           postinc0	equ	0xFEE
  6133                           wreg	equ	0xFE8
  6134                           postdec1	equ	0xFE5
  6135                           plusw1	equ	0xFE3
  6136                           fsr1l	equ	0xFE1
  6137                           indf2	equ	0xFDF
  6138                           postinc2	equ	0xFDE
  6139                           postdec2	equ	0xFDD
  6140                           plusw2	equ	0xFDB
  6141                           fsr2h	equ	0xFDA
  6142                           fsr2l	equ	0xFD9
  6143                           status	equ	0xFD8
  6144                           
  6145 ;; *************** function ___lldiv *****************
  6146 ;; Defined at:
  6147 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  6148 ;; Parameters:    Size  Location     Type
  6149 ;;  dividend        4   18[COMRAM] unsigned long 
  6150 ;;  divisor         4   22[COMRAM] unsigned long 
  6151 ;; Auto vars:     Size  Location     Type
  6152 ;;  quotient        4   26[COMRAM] unsigned long 
  6153 ;;  counter         1   30[COMRAM] unsigned char 
  6154 ;; Return value:  Size  Location     Type
  6155 ;;                  4   18[COMRAM] unsigned long 
  6156 ;; Registers used:
  6157 ;;		wreg, status,2, status,0
  6158 ;; Tracked objects:
  6159 ;;		On entry : 0/0
  6160 ;;		On exit  : 0/0
  6161 ;;		Unchanged: 0/0
  6162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6163 ;;      Params:         8       0       0       0       0       0       0       0       0
  6164 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6165 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6166 ;;      Totals:        13       0       0       0       0       0       0       0       0
  6167 ;;Total ram usage:       13 bytes
  6168 ;; Hardware stack levels used:    1
  6169 ;; Hardware stack levels required when called:    1
  6170 ;; This function calls:
  6171 ;;		Nothing
  6172 ;; This function is called by:
  6173 ;;		_sprintf
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           	psect	text11
  6178  001882                     __ptext11:
  6179                           	opt stack 0
  6180  001882                     ___lldiv:
  6181                           	opt stack 28
  6182                           
  6183                           ;incstack = 0
  6184  001882  0E00               	movlw	0
  6185  001884  6E1B               	movwf	___lldiv@quotient,c
  6186  001886  0E00               	movlw	0
  6187  001888  6E1C               	movwf	___lldiv@quotient+1,c
  6188  00188A  0E00               	movlw	0
  6189  00188C  6E1D               	movwf	___lldiv@quotient+2,c
  6190  00188E  0E00               	movlw	0
  6191  001890  6E1E               	movwf	___lldiv@quotient+3,c
  6192  001892  5017               	movf	___lldiv@divisor,w,c
  6193  001894  1018               	iorwf	___lldiv@divisor+1,w,c
  6194  001896  1019               	iorwf	___lldiv@divisor+2,w,c
  6195  001898  101A               	iorwf	___lldiv@divisor+3,w,c
  6196  00189A  B4D8               	btfsc	status,2,c
  6197  00189C  D02A               	goto	l701
  6198  00189E  0E01               	movlw	1
  6199  0018A0  6E1F               	movwf	___lldiv@counter,c
  6200  0018A2  D006               	goto	l696
  6201  0018A4  90D8               	bcf	status,0,c
  6202  0018A6  3617               	rlcf	___lldiv@divisor,f,c
  6203  0018A8  3618               	rlcf	___lldiv@divisor+1,f,c
  6204  0018AA  3619               	rlcf	___lldiv@divisor+2,f,c
  6205  0018AC  361A               	rlcf	___lldiv@divisor+3,f,c
  6206  0018AE  2A1F               	incf	___lldiv@counter,f,c
  6207  0018B0                     l696:
  6208  0018B0  AE1A               	btfss	___lldiv@divisor+3,7,c
  6209  0018B2  D7F8               	goto	l697
  6210  0018B4                     u3080:
  6211  0018B4  90D8               	bcf	status,0,c
  6212  0018B6  361B               	rlcf	___lldiv@quotient,f,c
  6213  0018B8  361C               	rlcf	___lldiv@quotient+1,f,c
  6214  0018BA  361D               	rlcf	___lldiv@quotient+2,f,c
  6215  0018BC  361E               	rlcf	___lldiv@quotient+3,f,c
  6216  0018BE  5017               	movf	___lldiv@divisor,w,c
  6217  0018C0  5C13               	subwf	___lldiv@dividend,w,c
  6218  0018C2  5018               	movf	___lldiv@divisor+1,w,c
  6219  0018C4  5814               	subwfb	___lldiv@dividend+1,w,c
  6220  0018C6  5019               	movf	___lldiv@divisor+2,w,c
  6221  0018C8  5815               	subwfb	___lldiv@dividend+2,w,c
  6222  0018CA  501A               	movf	___lldiv@divisor+3,w,c
  6223  0018CC  5816               	subwfb	___lldiv@dividend+3,w,c
  6224  0018CE  A0D8               	btfss	status,0,c
  6225  0018D0  D009               	goto	l700
  6226  0018D2  5017               	movf	___lldiv@divisor,w,c
  6227  0018D4  5E13               	subwf	___lldiv@dividend,f,c
  6228  0018D6  5018               	movf	___lldiv@divisor+1,w,c
  6229  0018D8  5A14               	subwfb	___lldiv@dividend+1,f,c
  6230  0018DA  5019               	movf	___lldiv@divisor+2,w,c
  6231  0018DC  5A15               	subwfb	___lldiv@dividend+2,f,c
  6232  0018DE  501A               	movf	___lldiv@divisor+3,w,c
  6233  0018E0  5A16               	subwfb	___lldiv@dividend+3,f,c
  6234  0018E2  801B               	bsf	___lldiv@quotient,0,c
  6235  0018E4                     l700:
  6236  0018E4  90D8               	bcf	status,0,c
  6237  0018E6  321A               	rrcf	___lldiv@divisor+3,f,c
  6238  0018E8  3219               	rrcf	___lldiv@divisor+2,f,c
  6239  0018EA  3218               	rrcf	___lldiv@divisor+1,f,c
  6240  0018EC  3217               	rrcf	___lldiv@divisor,f,c
  6241  0018EE  2E1F               	decfsz	___lldiv@counter,f,c
  6242  0018F0  D7E1               	goto	u3080
  6243  0018F2                     l701:
  6244  0018F2  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  6245  0018F6  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  6246  0018FA  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  6247  0018FE  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  6248  001902  0012               	return		;funcret
  6249  001904                     __end_of___lldiv:
  6250                           	opt stack 0
  6251                           tblptru	equ	0xFF8
  6252                           tblptrh	equ	0xFF7
  6253                           tblptrl	equ	0xFF6
  6254                           tablat	equ	0xFF5
  6255                           prodh	equ	0xFF4
  6256                           prodl	equ	0xFF3
  6257                           postinc0	equ	0xFEE
  6258                           wreg	equ	0xFE8
  6259                           postdec1	equ	0xFE5
  6260                           plusw1	equ	0xFE3
  6261                           fsr1l	equ	0xFE1
  6262                           indf2	equ	0xFDF
  6263                           postinc2	equ	0xFDE
  6264                           postdec2	equ	0xFDD
  6265                           plusw2	equ	0xFDB
  6266                           fsr2h	equ	0xFDA
  6267                           fsr2l	equ	0xFD9
  6268                           status	equ	0xFD8
  6269                           
  6270 ;; *************** function ___fttol *****************
  6271 ;; Defined at:
  6272 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fttol.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;  f1              3   60[COMRAM] float 
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;  lval            4    1[BANK0 ] unsigned long 
  6277 ;;  exp1            1    5[BANK0 ] unsigned char 
  6278 ;;  sign1           1    0[BANK0 ] unsigned char 
  6279 ;; Return value:  Size  Location     Type
  6280 ;;                  4   60[COMRAM] long 
  6281 ;; Registers used:
  6282 ;;		wreg, status,2, status,0
  6283 ;; Tracked objects:
  6284 ;;		On entry : 0/0
  6285 ;;		On exit  : 0/0
  6286 ;;		Unchanged: 0/0
  6287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6288 ;;      Params:         4       0       0       0       0       0       0       0       0
  6289 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6290 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6291 ;;      Totals:         9       6       0       0       0       0       0       0       0
  6292 ;;Total ram usage:       15 bytes
  6293 ;; Hardware stack levels used:    1
  6294 ;; Hardware stack levels required when called:    1
  6295 ;; This function calls:
  6296 ;;		Nothing
  6297 ;; This function is called by:
  6298 ;;		_sprintf
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           	psect	text12
  6303  0011A8                     __ptext12:
  6304                           	opt stack 0
  6305  0011A8                     ___fttol:
  6306                           	opt stack 28
  6307                           
  6308                           ;incstack = 0
  6309  0011A8  C03F  F041         	movff	___fttol@f1+2,??___fttol
  6310  0011AC  6A42               	clrf	(??___fttol+1)& (0+255),c
  6311  0011AE  6A43               	clrf	(??___fttol+2)& (0+255),c
  6312  0011B0  343E               	rlcf	___fttol@f1+1,w,c
  6313  0011B2  3641               	rlcf	??___fttol& (0+255),f,c
  6314  0011B4  E301               	bnc	u4391
  6315  0011B6  8042               	bsf	(??___fttol+1)& (0+255),0,c
  6316  0011B8                     u4391:
  6317  0011B8  5041               	movf	??___fttol,w,c
  6318  0011BA  0100               	movlb	0	; () banked
  6319  0011BC  6F65               	movwf	___fttol@exp1& (0+255),b
  6320  0011BE  0100               	movlb	0	; () banked
  6321  0011C0  5165               	movf	___fttol@exp1& (0+255),w,b
  6322  0011C2  A4D8               	btfss	status,2,c
  6323  0011C4  D009               	goto	l660
  6324                           
  6325                           ; BSR set to: 0
  6326  0011C6  0E00               	movlw	0
  6327  0011C8  6E3D               	movwf	?___fttol,c
  6328  0011CA  0E00               	movlw	0
  6329  0011CC  6E3E               	movwf	?___fttol+1,c
  6330  0011CE  0E00               	movlw	0
  6331  0011D0  6E3F               	movwf	?___fttol+2,c
  6332  0011D2  0E00               	movlw	0
  6333  0011D4  6E40               	movwf	?___fttol+3,c
  6334                           
  6335                           ; BSR set to: 0
  6336  0011D6  0012               	return	
  6337  0011D8                     l660:
  6338                           
  6339                           ; BSR set to: 0
  6340                           
  6341                           ; BSR set to: 0
  6342  0011D8  0E17               	movlw	23
  6343  0011DA  6E41               	movwf	??___fttol& (0+255),c
  6344  0011DC  C03D  F042         	movff	___fttol@f1,??___fttol+1
  6345  0011E0  C03E  F043         	movff	___fttol@f1+1,??___fttol+2
  6346  0011E4  C03F  F044         	movff	___fttol@f1+2,??___fttol+3
  6347  0011E8  2841               	incf	??___fttol,w,c
  6348  0011EA  6E45               	movwf	(??___fttol+4)& (0+255),c
  6349  0011EC  D004               	goto	u4410
  6350  0011EE                     u4415:
  6351  0011EE  90D8               	bcf	status,0,c
  6352  0011F0  3244               	rrcf	??___fttol+3,f,c
  6353  0011F2  3243               	rrcf	??___fttol+2,f,c
  6354  0011F4  3242               	rrcf	??___fttol+1,f,c
  6355  0011F6                     u4410:
  6356  0011F6  2E45               	decfsz	(??___fttol+4)& (0+255),f,c
  6357  0011F8  D7FA               	goto	u4415
  6358  0011FA  5042               	movf	??___fttol+1,w,c
  6359  0011FC  0100               	movlb	0	; () banked
  6360  0011FE  6F60               	movwf	___fttol@sign1& (0+255),b
  6361                           
  6362                           ; BSR set to: 0
  6363  001200  8E3E               	bsf	___fttol@f1+1,7,c
  6364                           
  6365                           ; BSR set to: 0
  6366  001202  0EFF               	movlw	255
  6367  001204  163D               	andwf	___fttol@f1,f,c
  6368  001206  0EFF               	movlw	255
  6369  001208  163E               	andwf	___fttol@f1+1,f,c
  6370  00120A  0E00               	movlw	0
  6371  00120C  163F               	andwf	___fttol@f1+2,f,c
  6372                           
  6373                           ; BSR set to: 0
  6374  00120E  503D               	movf	___fttol@f1,w,c
  6375  001210  0100               	movlb	0	; () banked
  6376  001212  6F61               	movwf	___fttol@lval& (0+255),b
  6377  001214  503E               	movf	___fttol@f1+1,w,c
  6378  001216  0100               	movlb	0	; () banked
  6379  001218  6F62               	movwf	(___fttol@lval+1)& (0+255),b
  6380  00121A  503F               	movf	___fttol@f1+2,w,c
  6381  00121C  0100               	movlb	0	; () banked
  6382  00121E  6F63               	movwf	(___fttol@lval+2)& (0+255),b
  6383  001220  0100               	movlb	0	; () banked
  6384  001222  6B64               	clrf	(___fttol@lval+3)& (0+255),b
  6385                           
  6386                           ; BSR set to: 0
  6387  001224  0E8E               	movlw	142
  6388  001226  0100               	movlb	0	; () banked
  6389  001228  5F65               	subwf	___fttol@exp1& (0+255),f,b
  6390                           
  6391                           ; BSR set to: 0
  6392  00122A  0100               	movlb	0	; () banked
  6393  00122C  AF65               	btfss	___fttol@exp1& (0+255),7,b
  6394  00122E  D019               	goto	l662
  6395                           
  6396                           ; BSR set to: 0
  6397  001230  0100               	movlb	0	; () banked
  6398  001232  5165               	movf	___fttol@exp1& (0+255),w,b
  6399  001234  0A80               	xorlw	128
  6400  001236  0F8F               	addlw	143
  6401  001238  B0D8               	btfsc	status,0,c
  6402  00123A  D009               	goto	l663
  6403                           
  6404                           ; BSR set to: 0
  6405  00123C  0E00               	movlw	0
  6406  00123E  6E3D               	movwf	?___fttol,c
  6407  001240  0E00               	movlw	0
  6408  001242  6E3E               	movwf	?___fttol+1,c
  6409  001244  0E00               	movlw	0
  6410  001246  6E3F               	movwf	?___fttol+2,c
  6411  001248  0E00               	movlw	0
  6412  00124A  6E40               	movwf	?___fttol+3,c
  6413                           
  6414                           ; BSR set to: 0
  6415  00124C  0012               	return	
  6416  00124E                     l663:
  6417                           
  6418                           ; BSR set to: 0
  6419                           
  6420                           ; BSR set to: 0
  6421                           
  6422                           ; BSR set to: 0
  6423  00124E  0100               	movlb	0	; () banked
  6424  001250  90D8               	bcf	status,0,c
  6425  001252  3364               	rrcf	(___fttol@lval+3)& (0+255),f,b
  6426  001254  3363               	rrcf	(___fttol@lval+2)& (0+255),f,b
  6427  001256  3362               	rrcf	(___fttol@lval+1)& (0+255),f,b
  6428  001258  3361               	rrcf	___fttol@lval& (0+255),f,b
  6429                           
  6430                           ; BSR set to: 0
  6431  00125A  0100               	movlb	0	; () banked
  6432  00125C  3F65               	incfsz	___fttol@exp1& (0+255),f,b
  6433  00125E  D7F7               	goto	l663
  6434                           
  6435                           ; BSR set to: 0
  6436  001260  D01A               	goto	u4450
  6437  001262                     l662:
  6438                           
  6439                           ; BSR set to: 0
  6440                           
  6441                           ; BSR set to: 0
  6442  001262  0E17               	movlw	23
  6443  001264  0100               	movlb	0	; () banked
  6444  001266  6565               	cpfsgt	___fttol@exp1& (0+255),b
  6445  001268  D011               	goto	l668
  6446                           
  6447                           ; BSR set to: 0
  6448  00126A  0E00               	movlw	0
  6449  00126C  6E3D               	movwf	?___fttol,c
  6450  00126E  0E00               	movlw	0
  6451  001270  6E3E               	movwf	?___fttol+1,c
  6452  001272  0E00               	movlw	0
  6453  001274  6E3F               	movwf	?___fttol+2,c
  6454  001276  0E00               	movlw	0
  6455  001278  6E40               	movwf	?___fttol+3,c
  6456                           
  6457                           ; BSR set to: 0
  6458  00127A  0012               	return	
  6459  00127C                     
  6460                           ; BSR set to: 0
  6461                           
  6462                           ; BSR set to: 0
  6463  00127C  0100               	movlb	0	; () banked
  6464  00127E  90D8               	bcf	status,0,c
  6465  001280  3761               	rlcf	___fttol@lval& (0+255),f,b
  6466  001282  3762               	rlcf	(___fttol@lval+1)& (0+255),f,b
  6467  001284  3763               	rlcf	(___fttol@lval+2)& (0+255),f,b
  6468  001286  3764               	rlcf	(___fttol@lval+3)& (0+255),f,b
  6469  001288  0100               	movlb	0	; () banked
  6470  00128A  0765               	decf	___fttol@exp1& (0+255),f,b
  6471  00128C                     l668:
  6472                           
  6473                           ; BSR set to: 0
  6474                           
  6475                           ; BSR set to: 0
  6476  00128C  0100               	movlb	0	; () banked
  6477  00128E  5165               	movf	___fttol@exp1& (0+255),w,b
  6478  001290  0100               	movlb	0	; () banked
  6479  001292  A4D8               	btfss	status,2,c
  6480  001294  D7F3               	goto	l669
  6481  001296                     u4450:
  6482                           
  6483                           ; BSR set to: 0
  6484                           
  6485                           ; BSR set to: 0
  6486                           
  6487                           ; BSR set to: 0
  6488  001296  0100               	movlb	0	; () banked
  6489  001298  5160               	movf	___fttol@sign1& (0+255),w,b
  6490  00129A  0100               	movlb	0	; () banked
  6491  00129C  B4D8               	btfsc	status,2,c
  6492  00129E  D009               	goto	l671
  6493                           
  6494                           ; BSR set to: 0
  6495  0012A0  0100               	movlb	0	; () banked
  6496  0012A2  1F64               	comf	(___fttol@lval+3)& (0+255),f,b
  6497  0012A4  1F63               	comf	(___fttol@lval+2)& (0+255),f,b
  6498  0012A6  1F62               	comf	(___fttol@lval+1)& (0+255),f,b
  6499  0012A8  6D61               	negf	___fttol@lval& (0+255),b
  6500  0012AA  0E00               	movlw	0
  6501  0012AC  2362               	addwfc	(___fttol@lval+1)& (0+255),f,b
  6502  0012AE  2363               	addwfc	(___fttol@lval+2)& (0+255),f,b
  6503  0012B0  2364               	addwfc	(___fttol@lval+3)& (0+255),f,b
  6504  0012B2                     l671:
  6505                           
  6506                           ; BSR set to: 0
  6507                           
  6508                           ; BSR set to: 0
  6509  0012B2  C061  F03D         	movff	___fttol@lval,?___fttol
  6510  0012B6  C062  F03E         	movff	___fttol@lval+1,?___fttol+1
  6511  0012BA  C063  F03F         	movff	___fttol@lval+2,?___fttol+2
  6512  0012BE  C064  F040         	movff	___fttol@lval+3,?___fttol+3
  6513  0012C2  0012               	return	
  6514  0012C4                     __end_of___fttol:
  6515                           	opt stack 0
  6516                           tblptru	equ	0xFF8
  6517                           tblptrh	equ	0xFF7
  6518                           tblptrl	equ	0xFF6
  6519                           tablat	equ	0xFF5
  6520                           prodh	equ	0xFF4
  6521                           prodl	equ	0xFF3
  6522                           postinc0	equ	0xFEE
  6523                           wreg	equ	0xFE8
  6524                           postdec1	equ	0xFE5
  6525                           plusw1	equ	0xFE3
  6526                           fsr1l	equ	0xFE1
  6527                           indf2	equ	0xFDF
  6528                           postinc2	equ	0xFDE
  6529                           postdec2	equ	0xFDD
  6530                           plusw2	equ	0xFDB
  6531                           fsr2h	equ	0xFDA
  6532                           fsr2l	equ	0xFD9
  6533                           status	equ	0xFD8
  6534                           
  6535 ;; *************** function ___ftsub *****************
  6536 ;; Defined at:
  6537 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftsub.c"
  6538 ;; Parameters:    Size  Location     Type
  6539 ;;  f1              3    3[BANK0 ] float 
  6540 ;;  f2              3    6[BANK0 ] float 
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;		None
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  3    3[BANK0 ] float 
  6545 ;; Registers used:
  6546 ;;		wreg, status,2, status,0, cstack
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6552 ;;      Params:         0       6       0       0       0       0       0       0       0
  6553 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6554 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6555 ;;      Totals:         0       6       0       0       0       0       0       0       0
  6556 ;;Total ram usage:        6 bytes
  6557 ;; Hardware stack levels used:    1
  6558 ;; Hardware stack levels required when called:    3
  6559 ;; This function calls:
  6560 ;;		___ftadd
  6561 ;; This function is called by:
  6562 ;;		_sprintf
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           	psect	text13
  6567  001B70                     __ptext13:
  6568                           	opt stack 0
  6569  001B70                     ___ftsub:
  6570                           	opt stack 26
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;incstack = 0
  6574  001B70  0100               	movlb	0	; () banked
  6575  001B72  5166               	movf	___ftsub@f2& (0+255),w,b
  6576  001B74  0100               	movlb	0	; () banked
  6577  001B76  1167               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  6578  001B78  0100               	movlb	0	; () banked
  6579  001B7A  1168               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  6580  001B7C  B4D8               	btfsc	status,2,c
  6581  001B7E  D009               	goto	l656
  6582                           
  6583                           ; BSR set to: 0
  6584  001B80  0E00               	movlw	0
  6585  001B82  0100               	movlb	0	; () banked
  6586  001B84  1B66               	xorwf	___ftsub@f2& (0+255),f,b
  6587  001B86  0E00               	movlw	0
  6588  001B88  0100               	movlb	0	; () banked
  6589  001B8A  1B67               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6590  001B8C  0E80               	movlw	128
  6591  001B8E  0100               	movlb	0	; () banked
  6592  001B90  1B68               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6593  001B92                     l656:
  6594                           
  6595                           ; BSR set to: 0
  6596                           
  6597                           ; BSR set to: 0
  6598  001B92  C063  F040         	movff	___ftsub@f1,___ftadd@f1
  6599  001B96  C064  F041         	movff	___ftsub@f1+1,___ftadd@f1+1
  6600  001B9A  C065  F042         	movff	___ftsub@f1+2,___ftadd@f1+2
  6601  001B9E  C066  F043         	movff	___ftsub@f2,___ftadd@f2
  6602  001BA2  C067  F044         	movff	___ftsub@f2+1,___ftadd@f2+1
  6603  001BA6  C068  F045         	movff	___ftsub@f2+2,___ftadd@f2+2
  6604  001BAA  ECA8  F006         	call	___ftadd	;wreg free
  6605  001BAE  C040  F063         	movff	?___ftadd,?___ftsub
  6606  001BB2  C041  F064         	movff	?___ftadd+1,?___ftsub+1
  6607  001BB6  C042  F065         	movff	?___ftadd+2,?___ftsub+2
  6608  001BBA  0012               	return	
  6609  001BBC                     __end_of___ftsub:
  6610                           	opt stack 0
  6611                           tblptru	equ	0xFF8
  6612                           tblptrh	equ	0xFF7
  6613                           tblptrl	equ	0xFF6
  6614                           tablat	equ	0xFF5
  6615                           prodh	equ	0xFF4
  6616                           prodl	equ	0xFF3
  6617                           postinc0	equ	0xFEE
  6618                           wreg	equ	0xFE8
  6619                           postdec1	equ	0xFE5
  6620                           plusw1	equ	0xFE3
  6621                           fsr1l	equ	0xFE1
  6622                           indf2	equ	0xFDF
  6623                           postinc2	equ	0xFDE
  6624                           postdec2	equ	0xFDD
  6625                           plusw2	equ	0xFDB
  6626                           fsr2h	equ	0xFDA
  6627                           fsr2l	equ	0xFD9
  6628                           status	equ	0xFD8
  6629                           
  6630 ;; *************** function ___ftadd *****************
  6631 ;; Defined at:
  6632 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftadd.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;  f1              3   63[COMRAM] float 
  6635 ;;  f2              3   66[COMRAM] float 
  6636 ;; Auto vars:     Size  Location     Type
  6637 ;;  exp1            1    2[BANK0 ] unsigned char 
  6638 ;;  exp2            1    1[BANK0 ] unsigned char 
  6639 ;;  sign            1    0[BANK0 ] unsigned char 
  6640 ;; Return value:  Size  Location     Type
  6641 ;;                  3   63[COMRAM] float 
  6642 ;; Registers used:
  6643 ;;		wreg, status,2, status,0, cstack
  6644 ;; Tracked objects:
  6645 ;;		On entry : 0/0
  6646 ;;		On exit  : 0/0
  6647 ;;		Unchanged: 0/0
  6648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6649 ;;      Params:         6       0       0       0       0       0       0       0       0
  6650 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6651 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6652 ;;      Totals:         9       3       0       0       0       0       0       0       0
  6653 ;;Total ram usage:       12 bytes
  6654 ;; Hardware stack levels used:    1
  6655 ;; Hardware stack levels required when called:    2
  6656 ;; This function calls:
  6657 ;;		___ftpack
  6658 ;; This function is called by:
  6659 ;;		_sprintf
  6660 ;;		___ftsub
  6661 ;; This function uses a non-reentrant model
  6662 ;;
  6663                           
  6664                           	psect	text14
  6665  000D50                     __ptext14:
  6666                           	opt stack 0
  6667  000D50                     ___ftadd:
  6668                           	opt stack 26
  6669                           
  6670                           ;incstack = 0
  6671  000D50  C042  F046         	movff	___ftadd@f1+2,??___ftadd
  6672  000D54  6A47               	clrf	(??___ftadd+1)& (0+255),c
  6673  000D56  6A48               	clrf	(??___ftadd+2)& (0+255),c
  6674  000D58  3441               	rlcf	___ftadd@f1+1,w,c
  6675  000D5A  3646               	rlcf	??___ftadd& (0+255),f,c
  6676  000D5C  E301               	bnc	u4031
  6677  000D5E  8047               	bsf	(??___ftadd+1)& (0+255),0,c
  6678  000D60                     u4031:
  6679  000D60  5046               	movf	??___ftadd,w,c
  6680  000D62  0100               	movlb	0	; () banked
  6681  000D64  6F62               	movwf	___ftadd@exp1& (0+255),b
  6682  000D66  C045  F046         	movff	___ftadd@f2+2,??___ftadd
  6683  000D6A  6A47               	clrf	(??___ftadd+1)& (0+255),c
  6684  000D6C  6A48               	clrf	(??___ftadd+2)& (0+255),c
  6685  000D6E  3444               	rlcf	___ftadd@f2+1,w,c
  6686  000D70  3646               	rlcf	??___ftadd& (0+255),f,c
  6687  000D72  E301               	bnc	u4041
  6688  000D74  8047               	bsf	(??___ftadd+1)& (0+255),0,c
  6689  000D76                     u4041:
  6690  000D76  5046               	movf	??___ftadd,w,c
  6691  000D78  0100               	movlb	0	; () banked
  6692  000D7A  6F61               	movwf	___ftadd@exp2& (0+255),b
  6693                           
  6694                           ; BSR set to: 0
  6695  000D7C  0100               	movlb	0	; () banked
  6696  000D7E  5162               	movf	___ftadd@exp1& (0+255),w,b
  6697  000D80  0100               	movlb	0	; () banked
  6698  000D82  B4D8               	btfsc	status,2,c
  6699  000D84  D00F               	goto	u4070
  6700                           
  6701                           ; BSR set to: 0
  6702  000D86  0100               	movlb	0	; () banked
  6703  000D88  5161               	movf	___ftadd@exp2& (0+255),w,b
  6704  000D8A  0100               	movlb	0	; () banked
  6705  000D8C  5D62               	subwf	___ftadd@exp1& (0+255),w,b
  6706  000D8E  B0D8               	btfsc	status,0,c
  6707  000D90  D010               	goto	l574
  6708                           
  6709                           ; BSR set to: 0
  6710  000D92  0100               	movlb	0	; () banked
  6711  000D94  5162               	movf	___ftadd@exp1& (0+255),w,b
  6712  000D96  0800               	sublw	0
  6713  000D98  0100               	movlb	0	; () banked
  6714  000D9A  2561               	addwf	___ftadd@exp2& (0+255),w,b
  6715  000D9C  6E46               	movwf	??___ftadd& (0+255),c
  6716  000D9E  0E18               	movlw	24
  6717  000DA0  6446               	cpfsgt	??___ftadd,c
  6718  000DA2  D007               	goto	l574
  6719  000DA4                     u4070:
  6720                           
  6721                           ; BSR set to: 0
  6722  000DA4  C043  F040         	movff	___ftadd@f2,?___ftadd
  6723  000DA8  C044  F041         	movff	___ftadd@f2+1,?___ftadd+1
  6724  000DAC  C045  F042         	movff	___ftadd@f2+2,?___ftadd+2
  6725  000DB0  0012               	return	
  6726  000DB2                     l574:
  6727                           
  6728                           ; BSR set to: 0
  6729                           
  6730                           ; BSR set to: 0
  6731  000DB2  0100               	movlb	0	; () banked
  6732  000DB4  5161               	movf	___ftadd@exp2& (0+255),w,b
  6733  000DB6  0100               	movlb	0	; () banked
  6734  000DB8  B4D8               	btfsc	status,2,c
  6735  000DBA  D00F               	goto	u4100
  6736                           
  6737                           ; BSR set to: 0
  6738  000DBC  0100               	movlb	0	; () banked
  6739  000DBE  5162               	movf	___ftadd@exp1& (0+255),w,b
  6740  000DC0  0100               	movlb	0	; () banked
  6741  000DC2  5D61               	subwf	___ftadd@exp2& (0+255),w,b
  6742  000DC4  B0D8               	btfsc	status,0,c
  6743  000DC6  D010               	goto	l578
  6744                           
  6745                           ; BSR set to: 0
  6746  000DC8  0100               	movlb	0	; () banked
  6747  000DCA  5161               	movf	___ftadd@exp2& (0+255),w,b
  6748  000DCC  0800               	sublw	0
  6749  000DCE  0100               	movlb	0	; () banked
  6750  000DD0  2562               	addwf	___ftadd@exp1& (0+255),w,b
  6751  000DD2  6E46               	movwf	??___ftadd& (0+255),c
  6752  000DD4  0E18               	movlw	24
  6753  000DD6  6446               	cpfsgt	??___ftadd,c
  6754  000DD8  D007               	goto	l578
  6755  000DDA                     u4100:
  6756                           
  6757                           ; BSR set to: 0
  6758  000DDA  C040  F040         	movff	___ftadd@f1,?___ftadd
  6759  000DDE  C041  F041         	movff	___ftadd@f1+1,?___ftadd+1
  6760  000DE2  C042  F042         	movff	___ftadd@f1+2,?___ftadd+2
  6761  000DE6  0012               	return	
  6762  000DE8                     l578:
  6763                           
  6764                           ; BSR set to: 0
  6765                           
  6766                           ; BSR set to: 0
  6767  000DE8  0E06               	movlw	6
  6768  000DEA  0100               	movlb	0	; () banked
  6769  000DEC  6F60               	movwf	___ftadd@sign& (0+255),b
  6770                           
  6771                           ; BSR set to: 0
  6772  000DEE  AE42               	btfss	___ftadd@f1+2,7,c
  6773  000DF0  D002               	goto	l581
  6774                           
  6775                           ; BSR set to: 0
  6776  000DF2  0100               	movlb	0	; () banked
  6777  000DF4  8F60               	bsf	___ftadd@sign& (0+255),7,b
  6778  000DF6                     l581:
  6779                           
  6780                           ; BSR set to: 0
  6781                           
  6782                           ; BSR set to: 0
  6783  000DF6  AE45               	btfss	___ftadd@f2+2,7,c
  6784  000DF8  D002               	goto	l582
  6785                           
  6786                           ; BSR set to: 0
  6787  000DFA  0100               	movlb	0	; () banked
  6788  000DFC  8D60               	bsf	___ftadd@sign& (0+255),6,b
  6789  000DFE                     l582:
  6790                           
  6791                           ; BSR set to: 0
  6792  000DFE  8E41               	bsf	___ftadd@f1+1,7,c
  6793                           
  6794                           ; BSR set to: 0
  6795  000E00  0EFF               	movlw	255
  6796  000E02  1640               	andwf	___ftadd@f1,f,c
  6797  000E04  0EFF               	movlw	255
  6798  000E06  1641               	andwf	___ftadd@f1+1,f,c
  6799  000E08  0E00               	movlw	0
  6800  000E0A  1642               	andwf	___ftadd@f1+2,f,c
  6801  000E0C  8E44               	bsf	___ftadd@f2+1,7,c
  6802                           
  6803                           ; BSR set to: 0
  6804  000E0E  0EFF               	movlw	255
  6805  000E10  1643               	andwf	___ftadd@f2,f,c
  6806  000E12  0EFF               	movlw	255
  6807  000E14  1644               	andwf	___ftadd@f2+1,f,c
  6808  000E16  0E00               	movlw	0
  6809  000E18  1645               	andwf	___ftadd@f2+2,f,c
  6810                           
  6811                           ; BSR set to: 0
  6812  000E1A  0100               	movlb	0	; () banked
  6813  000E1C  5161               	movf	___ftadd@exp2& (0+255),w,b
  6814  000E1E  0100               	movlb	0	; () banked
  6815  000E20  5D62               	subwf	___ftadd@exp1& (0+255),w,b
  6816  000E22  B0D8               	btfsc	status,0,c
  6817  000E24  D022               	goto	l583
  6818  000E26                     u4130:
  6819                           
  6820                           ; BSR set to: 0
  6821                           
  6822                           ; BSR set to: 0
  6823  000E26  90D8               	bcf	status,0,c
  6824  000E28  3643               	rlcf	___ftadd@f2,f,c
  6825  000E2A  3644               	rlcf	___ftadd@f2+1,f,c
  6826  000E2C  3645               	rlcf	___ftadd@f2+2,f,c
  6827  000E2E  0100               	movlb	0	; () banked
  6828  000E30  0761               	decf	___ftadd@exp2& (0+255),f,b
  6829                           
  6830                           ; BSR set to: 0
  6831  000E32  0100               	movlb	0	; () banked
  6832  000E34  5162               	movf	___ftadd@exp1& (0+255),w,b
  6833  000E36  0100               	movlb	0	; () banked
  6834  000E38  1961               	xorwf	___ftadd@exp2& (0+255),w,b
  6835  000E3A  B4D8               	btfsc	status,2,c
  6836  000E3C  D00F               	goto	l588
  6837                           
  6838                           ; BSR set to: 0
  6839  000E3E  0100               	movlb	0	; () banked
  6840  000E40  0760               	decf	___ftadd@sign& (0+255),f,b
  6841  000E42  C060  F046         	movff	___ftadd@sign,??___ftadd
  6842  000E46  0E07               	movlw	7
  6843  000E48  1646               	andwf	??___ftadd,f,c
  6844  000E4A  B4D8               	btfsc	status,2,c
  6845  000E4C  D007               	goto	l588
  6846  000E4E  D7EB               	goto	u4130
  6847  000E50                     
  6848                           ; BSR set to: 0
  6849                           
  6850                           ; BSR set to: 0
  6851  000E50  90D8               	bcf	status,0,c
  6852  000E52  3242               	rrcf	___ftadd@f1+2,f,c
  6853  000E54  3241               	rrcf	___ftadd@f1+1,f,c
  6854  000E56  3240               	rrcf	___ftadd@f1,f,c
  6855  000E58  0100               	movlb	0	; () banked
  6856  000E5A  2B62               	incf	___ftadd@exp1& (0+255),f,b
  6857  000E5C                     l588:
  6858                           
  6859                           ; BSR set to: 0
  6860                           
  6861                           ; BSR set to: 0
  6862  000E5C  0100               	movlb	0	; () banked
  6863  000E5E  5161               	movf	___ftadd@exp2& (0+255),w,b
  6864  000E60  0100               	movlb	0	; () banked
  6865  000E62  1962               	xorwf	___ftadd@exp1& (0+255),w,b
  6866  000E64  B4D8               	btfsc	status,2,c
  6867  000E66  D028               	goto	u4200
  6868  000E68  D7F3               	goto	l589
  6869  000E6A                     l583:
  6870                           
  6871                           ; BSR set to: 0
  6872                           
  6873                           ; BSR set to: 0
  6874  000E6A  0100               	movlb	0	; () banked
  6875  000E6C  5162               	movf	___ftadd@exp1& (0+255),w,b
  6876  000E6E  0100               	movlb	0	; () banked
  6877  000E70  5D61               	subwf	___ftadd@exp2& (0+255),w,b
  6878  000E72  B0D8               	btfsc	status,0,c
  6879  000E74  D021               	goto	u4200
  6880  000E76                     u4170:
  6881                           
  6882                           ; BSR set to: 0
  6883                           
  6884                           ; BSR set to: 0
  6885  000E76  90D8               	bcf	status,0,c
  6886  000E78  3640               	rlcf	___ftadd@f1,f,c
  6887  000E7A  3641               	rlcf	___ftadd@f1+1,f,c
  6888  000E7C  3642               	rlcf	___ftadd@f1+2,f,c
  6889  000E7E  0100               	movlb	0	; () banked
  6890  000E80  0762               	decf	___ftadd@exp1& (0+255),f,b
  6891                           
  6892                           ; BSR set to: 0
  6893  000E82  0100               	movlb	0	; () banked
  6894  000E84  5162               	movf	___ftadd@exp1& (0+255),w,b
  6895  000E86  0100               	movlb	0	; () banked
  6896  000E88  1961               	xorwf	___ftadd@exp2& (0+255),w,b
  6897  000E8A  B4D8               	btfsc	status,2,c
  6898  000E8C  D00F               	goto	l597
  6899                           
  6900                           ; BSR set to: 0
  6901  000E8E  0100               	movlb	0	; () banked
  6902  000E90  0760               	decf	___ftadd@sign& (0+255),f,b
  6903  000E92  C060  F046         	movff	___ftadd@sign,??___ftadd
  6904  000E96  0E07               	movlw	7
  6905  000E98  1646               	andwf	??___ftadd,f,c
  6906  000E9A  B4D8               	btfsc	status,2,c
  6907  000E9C  D007               	goto	l597
  6908  000E9E  D7EB               	goto	u4170
  6909  000EA0                     
  6910                           ; BSR set to: 0
  6911                           
  6912                           ; BSR set to: 0
  6913  000EA0  90D8               	bcf	status,0,c
  6914  000EA2  3245               	rrcf	___ftadd@f2+2,f,c
  6915  000EA4  3244               	rrcf	___ftadd@f2+1,f,c
  6916  000EA6  3243               	rrcf	___ftadd@f2,f,c
  6917  000EA8  0100               	movlb	0	; () banked
  6918  000EAA  2B61               	incf	___ftadd@exp2& (0+255),f,b
  6919  000EAC                     l597:
  6920                           
  6921                           ; BSR set to: 0
  6922                           
  6923                           ; BSR set to: 0
  6924  000EAC  0100               	movlb	0	; () banked
  6925  000EAE  5161               	movf	___ftadd@exp2& (0+255),w,b
  6926  000EB0  0100               	movlb	0	; () banked
  6927  000EB2  1962               	xorwf	___ftadd@exp1& (0+255),w,b
  6928  000EB4  A4D8               	btfss	status,2,c
  6929  000EB6  D7F4               	goto	l598
  6930  000EB8                     u4200:
  6931                           
  6932                           ; BSR set to: 0
  6933                           
  6934                           ; BSR set to: 0
  6935                           
  6936                           ; BSR set to: 0
  6937  000EB8  0100               	movlb	0	; () banked
  6938  000EBA  AF60               	btfss	___ftadd@sign& (0+255),7,b
  6939  000EBC  D00C               	goto	l600
  6940                           
  6941                           ; BSR set to: 0
  6942  000EBE  0EFF               	movlw	255
  6943  000EC0  1A40               	xorwf	___ftadd@f1,f,c
  6944  000EC2  0EFF               	movlw	255
  6945  000EC4  1A41               	xorwf	___ftadd@f1+1,f,c
  6946  000EC6  0EFF               	movlw	255
  6947  000EC8  1A42               	xorwf	___ftadd@f1+2,f,c
  6948  000ECA  0E01               	movlw	1
  6949  000ECC  2640               	addwf	___ftadd@f1,f,c
  6950  000ECE  0E00               	movlw	0
  6951  000ED0  2241               	addwfc	___ftadd@f1+1,f,c
  6952  000ED2  0E00               	movlw	0
  6953  000ED4  2242               	addwfc	___ftadd@f1+2,f,c
  6954  000ED6                     l600:
  6955                           
  6956                           ; BSR set to: 0
  6957  000ED6  0100               	movlb	0	; () banked
  6958  000ED8  AD60               	btfss	___ftadd@sign& (0+255),6,b
  6959  000EDA  D00C               	goto	l601
  6960                           
  6961                           ; BSR set to: 0
  6962  000EDC  0EFF               	movlw	255
  6963  000EDE  1A43               	xorwf	___ftadd@f2,f,c
  6964  000EE0  0EFF               	movlw	255
  6965  000EE2  1A44               	xorwf	___ftadd@f2+1,f,c
  6966  000EE4  0EFF               	movlw	255
  6967  000EE6  1A45               	xorwf	___ftadd@f2+2,f,c
  6968  000EE8  0E01               	movlw	1
  6969  000EEA  2643               	addwf	___ftadd@f2,f,c
  6970  000EEC  0E00               	movlw	0
  6971  000EEE  2244               	addwfc	___ftadd@f2+1,f,c
  6972  000EF0  0E00               	movlw	0
  6973  000EF2  2245               	addwfc	___ftadd@f2+2,f,c
  6974  000EF4                     l601:
  6975                           
  6976                           ; BSR set to: 0
  6977                           
  6978                           ; BSR set to: 0
  6979  000EF4  0E00               	movlw	0
  6980  000EF6  0100               	movlb	0	; () banked
  6981  000EF8  6F60               	movwf	___ftadd@sign& (0+255),b
  6982                           
  6983                           ; BSR set to: 0
  6984  000EFA  5040               	movf	___ftadd@f1,w,c
  6985  000EFC  2643               	addwf	___ftadd@f2,f,c
  6986  000EFE  5041               	movf	___ftadd@f1+1,w,c
  6987  000F00  2244               	addwfc	___ftadd@f2+1,f,c
  6988  000F02  5042               	movf	___ftadd@f1+2,w,c
  6989  000F04  2245               	addwfc	___ftadd@f2+2,f,c
  6990                           
  6991                           ; BSR set to: 0
  6992  000F06  AE45               	btfss	___ftadd@f2+2,7,c
  6993  000F08  D00F               	goto	l602
  6994                           
  6995                           ; BSR set to: 0
  6996  000F0A  0EFF               	movlw	255
  6997  000F0C  1A43               	xorwf	___ftadd@f2,f,c
  6998  000F0E  0EFF               	movlw	255
  6999  000F10  1A44               	xorwf	___ftadd@f2+1,f,c
  7000  000F12  0EFF               	movlw	255
  7001  000F14  1A45               	xorwf	___ftadd@f2+2,f,c
  7002  000F16  0E01               	movlw	1
  7003  000F18  2643               	addwf	___ftadd@f2,f,c
  7004  000F1A  0E00               	movlw	0
  7005  000F1C  2244               	addwfc	___ftadd@f2+1,f,c
  7006  000F1E  0E00               	movlw	0
  7007  000F20  2245               	addwfc	___ftadd@f2+2,f,c
  7008                           
  7009                           ; BSR set to: 0
  7010  000F22  0E01               	movlw	1
  7011  000F24  0100               	movlb	0	; () banked
  7012  000F26  6F60               	movwf	___ftadd@sign& (0+255),b
  7013  000F28                     l602:
  7014                           
  7015                           ; BSR set to: 0
  7016                           
  7017                           ; BSR set to: 0
  7018  000F28  C043  F013         	movff	___ftadd@f2,___ftpack@arg
  7019  000F2C  C044  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  7020  000F30  C045  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  7021  000F34  C062  F016         	movff	___ftadd@exp1,___ftpack@exp
  7022  000F38  C060  F017         	movff	___ftadd@sign,___ftpack@sign
  7023  000F3C  EC13  F00B         	call	___ftpack	;wreg free
  7024  000F40  C013  F040         	movff	?___ftpack,?___ftadd
  7025  000F44  C014  F041         	movff	?___ftpack+1,?___ftadd+1
  7026  000F48  C015  F042         	movff	?___ftpack+2,?___ftadd+2
  7027  000F4C  0012               	return	
  7028  000F4E                     __end_of___ftadd:
  7029                           	opt stack 0
  7030                           tblptru	equ	0xFF8
  7031                           tblptrh	equ	0xFF7
  7032                           tblptrl	equ	0xFF6
  7033                           tablat	equ	0xFF5
  7034                           prodh	equ	0xFF4
  7035                           prodl	equ	0xFF3
  7036                           postinc0	equ	0xFEE
  7037                           wreg	equ	0xFE8
  7038                           postdec1	equ	0xFE5
  7039                           plusw1	equ	0xFE3
  7040                           fsr1l	equ	0xFE1
  7041                           indf2	equ	0xFDF
  7042                           postinc2	equ	0xFDE
  7043                           postdec2	equ	0xFDD
  7044                           plusw2	equ	0xFDB
  7045                           fsr2h	equ	0xFDA
  7046                           fsr2l	equ	0xFD9
  7047                           status	equ	0xFD8
  7048                           
  7049 ;; *************** function ___ftneg *****************
  7050 ;; Defined at:
  7051 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftneg.c"
  7052 ;; Parameters:    Size  Location     Type
  7053 ;;  f1              3   18[COMRAM] float 
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;		None
  7056 ;; Return value:  Size  Location     Type
  7057 ;;                  3   18[COMRAM] float 
  7058 ;; Registers used:
  7059 ;;		wreg, status,2, status,0
  7060 ;; Tracked objects:
  7061 ;;		On entry : 0/0
  7062 ;;		On exit  : 0/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7065 ;;      Params:         3       0       0       0       0       0       0       0       0
  7066 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7067 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7068 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7069 ;;Total ram usage:        3 bytes
  7070 ;; Hardware stack levels used:    1
  7071 ;; Hardware stack levels required when called:    1
  7072 ;; This function calls:
  7073 ;;		Nothing
  7074 ;; This function is called by:
  7075 ;;		_sprintf
  7076 ;; This function uses a non-reentrant model
  7077 ;;
  7078                           
  7079                           	psect	text15
  7080  001D0C                     __ptext15:
  7081                           	opt stack 0
  7082  001D0C                     ___ftneg:
  7083                           	opt stack 28
  7084                           
  7085                           ;incstack = 0
  7086  001D0C  5013               	movf	___ftneg@f1,w,c
  7087  001D0E  1014               	iorwf	___ftneg@f1+1,w,c
  7088  001D10  1015               	iorwf	___ftneg@f1+2,w,c
  7089  001D12  B4D8               	btfsc	status,2,c
  7090  001D14  D006               	goto	l650
  7091  001D16  0E00               	movlw	0
  7092  001D18  1A13               	xorwf	___ftneg@f1,f,c
  7093  001D1A  0E00               	movlw	0
  7094  001D1C  1A14               	xorwf	___ftneg@f1+1,f,c
  7095  001D1E  0E80               	movlw	128
  7096  001D20  1A15               	xorwf	___ftneg@f1+2,f,c
  7097  001D22                     l650:
  7098  001D22  C013  F013         	movff	___ftneg@f1,?___ftneg
  7099  001D26  C014  F014         	movff	___ftneg@f1+1,?___ftneg+1
  7100  001D2A  C015  F015         	movff	___ftneg@f1+2,?___ftneg+2
  7101  001D2E  0012               	return		;funcret
  7102  001D30                     __end_of___ftneg:
  7103                           	opt stack 0
  7104                           tblptru	equ	0xFF8
  7105                           tblptrh	equ	0xFF7
  7106                           tblptrl	equ	0xFF6
  7107                           tablat	equ	0xFF5
  7108                           prodh	equ	0xFF4
  7109                           prodl	equ	0xFF3
  7110                           postinc0	equ	0xFEE
  7111                           wreg	equ	0xFE8
  7112                           postdec1	equ	0xFE5
  7113                           plusw1	equ	0xFE3
  7114                           fsr1l	equ	0xFE1
  7115                           indf2	equ	0xFDF
  7116                           postinc2	equ	0xFDE
  7117                           postdec2	equ	0xFDD
  7118                           plusw2	equ	0xFDB
  7119                           fsr2h	equ	0xFDA
  7120                           fsr2l	equ	0xFD9
  7121                           status	equ	0xFD8
  7122                           
  7123 ;; *************** function ___ftge *****************
  7124 ;; Defined at:
  7125 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftge.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  ff1             3   18[COMRAM] float 
  7128 ;;  ff2             3   21[COMRAM] float 
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;		None
  7131 ;; Return value:  Size  Location     Type
  7132 ;;		None               void
  7133 ;; Registers used:
  7134 ;;		wreg, status,2, status,0
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7140 ;;      Params:         6       0       0       0       0       0       0       0       0
  7141 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7142 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7143 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7144 ;;Total ram usage:        9 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    1
  7147 ;; This function calls:
  7148 ;;		Nothing
  7149 ;; This function is called by:
  7150 ;;		_sprintf
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           	psect	text16
  7155  00176E                     __ptext16:
  7156                           	opt stack 0
  7157  00176E                     ___ftge:
  7158                           	opt stack 28
  7159                           
  7160                           ;incstack = 0
  7161  00176E  AE15               	btfss	___ftge@ff1+2,7,c
  7162  001770  D016               	goto	l632
  7163  001772  C013  F019         	movff	___ftge@ff1,??___ftge
  7164  001776  C014  F01A         	movff	___ftge@ff1+1,??___ftge+1
  7165  00177A  C015  F01B         	movff	___ftge@ff1+2,??___ftge+2
  7166  00177E  1E19               	comf	??___ftge,f,c
  7167  001780  1E1A               	comf	??___ftge+1,f,c
  7168  001782  1E1B               	comf	??___ftge+2,f,c
  7169  001784  2A19               	incf	??___ftge,f,c
  7170  001786  0E00               	movlw	0
  7171  001788  221A               	addwfc	??___ftge+1,f,c
  7172  00178A  221B               	addwfc	??___ftge+2,f,c
  7173  00178C  0E00               	movlw	0
  7174  00178E  2419               	addwf	??___ftge,w,c
  7175  001790  6E13               	movwf	___ftge@ff1,c
  7176  001792  0E00               	movlw	0
  7177  001794  201A               	addwfc	??___ftge+1,w,c
  7178  001796  6E14               	movwf	___ftge@ff1+1,c
  7179  001798  0E80               	movlw	128
  7180  00179A  201B               	addwfc	??___ftge+2,w,c
  7181  00179C  6E15               	movwf	___ftge@ff1+2,c
  7182  00179E                     l632:
  7183  00179E  AE18               	btfss	___ftge@ff2+2,7,c
  7184  0017A0  D016               	goto	l633
  7185  0017A2  C016  F019         	movff	___ftge@ff2,??___ftge
  7186  0017A6  C017  F01A         	movff	___ftge@ff2+1,??___ftge+1
  7187  0017AA  C018  F01B         	movff	___ftge@ff2+2,??___ftge+2
  7188  0017AE  1E19               	comf	??___ftge,f,c
  7189  0017B0  1E1A               	comf	??___ftge+1,f,c
  7190  0017B2  1E1B               	comf	??___ftge+2,f,c
  7191  0017B4  2A19               	incf	??___ftge,f,c
  7192  0017B6  0E00               	movlw	0
  7193  0017B8  221A               	addwfc	??___ftge+1,f,c
  7194  0017BA  221B               	addwfc	??___ftge+2,f,c
  7195  0017BC  0E00               	movlw	0
  7196  0017BE  2419               	addwf	??___ftge,w,c
  7197  0017C0  6E16               	movwf	___ftge@ff2,c
  7198  0017C2  0E00               	movlw	0
  7199  0017C4  201A               	addwfc	??___ftge+1,w,c
  7200  0017C6  6E17               	movwf	___ftge@ff2+1,c
  7201  0017C8  0E80               	movlw	128
  7202  0017CA  201B               	addwfc	??___ftge+2,w,c
  7203  0017CC  6E18               	movwf	___ftge@ff2+2,c
  7204  0017CE                     l633:
  7205  0017CE  0E00               	movlw	0
  7206  0017D0  1A13               	xorwf	___ftge@ff1,f,c
  7207  0017D2  0E00               	movlw	0
  7208  0017D4  1A14               	xorwf	___ftge@ff1+1,f,c
  7209  0017D6  0E80               	movlw	128
  7210  0017D8  1A15               	xorwf	___ftge@ff1+2,f,c
  7211  0017DA  0E00               	movlw	0
  7212  0017DC  1A16               	xorwf	___ftge@ff2,f,c
  7213  0017DE  0E00               	movlw	0
  7214  0017E0  1A17               	xorwf	___ftge@ff2+1,f,c
  7215  0017E2  0E80               	movlw	128
  7216  0017E4  1A18               	xorwf	___ftge@ff2+2,f,c
  7217  0017E6  5016               	movf	___ftge@ff2,w,c
  7218  0017E8  5C13               	subwf	___ftge@ff1,w,c
  7219  0017EA  5017               	movf	___ftge@ff2+1,w,c
  7220  0017EC  5814               	subwfb	___ftge@ff1+1,w,c
  7221  0017EE  5018               	movf	___ftge@ff2+2,w,c
  7222  0017F0  5815               	subwfb	___ftge@ff1+2,w,c
  7223  0017F2  B0D8               	btfsc	status,0,c
  7224  0017F4  D002               	goto	l2201
  7225  0017F6  90D8               	bcf	status,0,c
  7226  0017F8  0012               	return	
  7227  0017FA                     l2201:
  7228  0017FA  80D8               	bsf	status,0,c
  7229  0017FC  0012               	return	
  7230  0017FE                     __end_of___ftge:
  7231                           	opt stack 0
  7232                           tblptru	equ	0xFF8
  7233                           tblptrh	equ	0xFF7
  7234                           tblptrl	equ	0xFF6
  7235                           tablat	equ	0xFF5
  7236                           prodh	equ	0xFF4
  7237                           prodl	equ	0xFF3
  7238                           postinc0	equ	0xFEE
  7239                           wreg	equ	0xFE8
  7240                           postdec1	equ	0xFE5
  7241                           plusw1	equ	0xFE3
  7242                           fsr1l	equ	0xFE1
  7243                           indf2	equ	0xFDF
  7244                           postinc2	equ	0xFDE
  7245                           postdec2	equ	0xFDD
  7246                           plusw2	equ	0xFDB
  7247                           fsr2h	equ	0xFDA
  7248                           fsr2l	equ	0xFD9
  7249                           status	equ	0xFD8
  7250                           
  7251 ;; *************** function _setupADC *****************
  7252 ;; Defined at:
  7253 ;;		line 21 in file "glcd_library/TS.c"
  7254 ;; Parameters:    Size  Location     Type
  7255 ;;		None
  7256 ;; Auto vars:     Size  Location     Type
  7257 ;;		None
  7258 ;; Return value:  Size  Location     Type
  7259 ;;                  1    wreg      void 
  7260 ;; Registers used:
  7261 ;;		wreg, status,2
  7262 ;; Tracked objects:
  7263 ;;		On entry : 0/0
  7264 ;;		On exit  : 0/0
  7265 ;;		Unchanged: 0/0
  7266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7267 ;;      Params:         0       0       0       0       0       0       0       0       0
  7268 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7269 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7270 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7271 ;;Total ram usage:        0 bytes
  7272 ;; Hardware stack levels used:    1
  7273 ;; Hardware stack levels required when called:    1
  7274 ;; This function calls:
  7275 ;;		Nothing
  7276 ;; This function is called by:
  7277 ;;		_main
  7278 ;; This function uses a non-reentrant model
  7279 ;;
  7280                           
  7281                           	psect	text17
  7282  001D50                     __ptext17:
  7283                           	opt stack 0
  7284  001D50                     _setupADC:
  7285                           	opt stack 29
  7286                           
  7287                           ;TS.c: 22: TRISA = 0b00000011;
  7288                           
  7289                           ;incstack = 0
  7290  001D50  0E03               	movlw	3
  7291  001D52  6E92               	movwf	3986,c	;volatile
  7292                           
  7293                           ;TS.c: 23: PORTA = 0;
  7294  001D54  0E00               	movlw	0
  7295  001D56  6E80               	movwf	3968,c	;volatile
  7296                           
  7297                           ;TS.c: 25: ADCON0 = 0b00000001;
  7298  001D58  0E01               	movlw	1
  7299  001D5A  6EC2               	movwf	4034,c	;volatile
  7300                           
  7301                           ;TS.c: 26: ADCON1 = 0b00001101;
  7302  001D5C  0E0D               	movlw	13
  7303  001D5E  6EC1               	movwf	4033,c	;volatile
  7304                           
  7305                           ;TS.c: 27: ADCON2bits.ADFM = 1;
  7306  001D60  8EC0               	bsf	4032,7,c	;volatile
  7307                           
  7308                           ;TS.c: 29: PIR1bits.ADIF = 0;
  7309  001D62  9C9E               	bcf	3998,6,c	;volatile
  7310                           
  7311                           ;TS.c: 30: PIE1bits.ADIE = 1;
  7312  001D64  8C9D               	bsf	3997,6,c	;volatile
  7313                           
  7314                           ;TS.c: 32: INTCONbits.GIE = 1;
  7315  001D66  8EF2               	bsf	intcon,7,c	;volatile
  7316                           
  7317                           ;TS.c: 33: INTCONbits.PEIE = 1;
  7318  001D68  8CF2               	bsf	intcon,6,c	;volatile
  7319  001D6A  0012               	return		;funcret
  7320  001D6C                     __end_of_setupADC:
  7321                           	opt stack 0
  7322                           tblptru	equ	0xFF8
  7323                           tblptrh	equ	0xFF7
  7324                           tblptrl	equ	0xFF6
  7325                           tablat	equ	0xFF5
  7326                           prodh	equ	0xFF4
  7327                           prodl	equ	0xFF3
  7328                           intcon	equ	0xFF2
  7329                           postinc0	equ	0xFEE
  7330                           wreg	equ	0xFE8
  7331                           postdec1	equ	0xFE5
  7332                           plusw1	equ	0xFE3
  7333                           fsr1l	equ	0xFE1
  7334                           indf2	equ	0xFDF
  7335                           postinc2	equ	0xFDE
  7336                           postdec2	equ	0xFDD
  7337                           plusw2	equ	0xFDB
  7338                           fsr2h	equ	0xFDA
  7339                           fsr2l	equ	0xFD9
  7340                           status	equ	0xFD8
  7341                           
  7342 ;; *************** function _readX *****************
  7343 ;; Defined at:
  7344 ;;		line 51 in file "glcd_library/TS.c"
  7345 ;; Parameters:    Size  Location     Type
  7346 ;;		None
  7347 ;; Auto vars:     Size  Location     Type
  7348 ;;  value           2   41[COMRAM] int 
  7349 ;; Return value:  Size  Location     Type
  7350 ;;                  3   36[COMRAM] float 
  7351 ;; Registers used:
  7352 ;;		wreg, status,2, status,0, cstack
  7353 ;; Tracked objects:
  7354 ;;		On entry : 0/0
  7355 ;;		On exit  : 0/0
  7356 ;;		Unchanged: 0/0
  7357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7358 ;;      Params:         3       0       0       0       0       0       0       0       0
  7359 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7360 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7361 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7362 ;;Total ram usage:        7 bytes
  7363 ;; Hardware stack levels used:    1
  7364 ;; Hardware stack levels required when called:    3
  7365 ;; This function calls:
  7366 ;;		_R0Value
  7367 ;;		___awdiv
  7368 ;;		___awtoft
  7369 ;; This function is called by:
  7370 ;;		_main
  7371 ;; This function uses a non-reentrant model
  7372 ;;
  7373                           
  7374                           	psect	text18
  7375  001B22                     __ptext18:
  7376                           	opt stack 0
  7377  001B22                     _readX:
  7378                           	opt stack 27
  7379                           
  7380                           ;TS.c: 53: int value = R0Value();
  7381                           
  7382                           ;incstack = 0
  7383  001B22  ECC0  F00E         	call	_R0Value	;wreg free
  7384  001B26  C013  F02A         	movff	?_R0Value,readX@value
  7385  001B2A  C014  F02B         	movff	?_R0Value+1,readX@value+1
  7386                           
  7387                           ;TS.c: 54: return (128*value)/1024;
  7388  001B2E  0E04               	movlw	4
  7389  001B30  6E1C               	movwf	___awdiv@divisor+1,c
  7390  001B32  0E00               	movlw	0
  7391  001B34  6E1B               	movwf	___awdiv@divisor,c
  7392  001B36  C02A  F028         	movff	readX@value,??_readX
  7393  001B3A  C02B  F029         	movff	readX@value+1,??_readX+1
  7394  001B3E  0E07               	movlw	7
  7395  001B40                     u4485:
  7396  001B40  90D8               	bcf	status,0,c
  7397  001B42  3628               	rlcf	??_readX,f,c
  7398  001B44  3629               	rlcf	??_readX+1,f,c
  7399  001B46  2EE8               	decfsz	wreg,f,c
  7400  001B48  D7FB               	goto	u4485
  7401  001B4A  C028  F019         	movff	??_readX,___awdiv@dividend
  7402  001B4E  C029  F01A         	movff	??_readX+1,___awdiv@dividend+1
  7403  001B52  ECFF  F00B         	call	___awdiv	;wreg free
  7404  001B56  C019  F021         	movff	?___awdiv,___awtoft@c
  7405  001B5A  C01A  F022         	movff	?___awdiv+1,___awtoft@c+1
  7406  001B5E  EC23  F00E         	call	___awtoft	;wreg free
  7407  001B62  C021  F025         	movff	?___awtoft,?_readX
  7408  001B66  C022  F026         	movff	?___awtoft+1,?_readX+1
  7409  001B6A  C023  F027         	movff	?___awtoft+2,?_readX+2
  7410  001B6E  0012               	return	
  7411  001B70                     __end_of_readX:
  7412                           	opt stack 0
  7413                           tblptru	equ	0xFF8
  7414                           tblptrh	equ	0xFF7
  7415                           tblptrl	equ	0xFF6
  7416                           tablat	equ	0xFF5
  7417                           prodh	equ	0xFF4
  7418                           prodl	equ	0xFF3
  7419                           intcon	equ	0xFF2
  7420                           postinc0	equ	0xFEE
  7421                           wreg	equ	0xFE8
  7422                           postdec1	equ	0xFE5
  7423                           plusw1	equ	0xFE3
  7424                           fsr1l	equ	0xFE1
  7425                           indf2	equ	0xFDF
  7426                           postinc2	equ	0xFDE
  7427                           postdec2	equ	0xFDD
  7428                           plusw2	equ	0xFDB
  7429                           fsr2h	equ	0xFDA
  7430                           fsr2l	equ	0xFD9
  7431                           status	equ	0xFD8
  7432                           
  7433 ;; *************** function ___awtoft *****************
  7434 ;; Defined at:
  7435 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awtoft.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;  c               2   32[COMRAM] int 
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;  sign            1   35[COMRAM] unsigned char 
  7440 ;; Return value:  Size  Location     Type
  7441 ;;                  3   32[COMRAM] float 
  7442 ;; Registers used:
  7443 ;;		wreg, status,2, status,0, cstack
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7449 ;;      Params:         3       0       0       0       0       0       0       0       0
  7450 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7451 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7452 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7453 ;;Total ram usage:        4 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    2
  7456 ;; This function calls:
  7457 ;;		___ftpack
  7458 ;; This function is called by:
  7459 ;;		_readX
  7460 ;;		_readY
  7461 ;; This function uses a non-reentrant model
  7462 ;;
  7463                           
  7464                           	psect	text19
  7465  001C46                     __ptext19:
  7466                           	opt stack 0
  7467  001C46                     ___awtoft:
  7468                           	opt stack 27
  7469                           
  7470                           ;incstack = 0
  7471  001C46  0E00               	movlw	0
  7472  001C48  6E24               	movwf	___awtoft@sign,c
  7473  001C4A  AE22               	btfss	___awtoft@c+1,7,c
  7474  001C4C  D006               	goto	l507
  7475  001C4E  6C21               	negf	___awtoft@c,c
  7476  001C50  1E22               	comf	___awtoft@c+1,f,c
  7477  001C52  B0D8               	btfsc	status,0,c
  7478  001C54  2A22               	incf	___awtoft@c+1,f,c
  7479  001C56  0E01               	movlw	1
  7480  001C58  6E24               	movwf	___awtoft@sign,c
  7481  001C5A                     l507:
  7482  001C5A  C021  F013         	movff	___awtoft@c,___ftpack@arg
  7483  001C5E  C022  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  7484  001C62  6A15               	clrf	___ftpack@arg+2,c
  7485  001C64  0E8E               	movlw	142
  7486  001C66  6E16               	movwf	___ftpack@exp,c
  7487  001C68  C024  F017         	movff	___awtoft@sign,___ftpack@sign
  7488  001C6C  EC13  F00B         	call	___ftpack	;wreg free
  7489  001C70  C013  F021         	movff	?___ftpack,?___awtoft
  7490  001C74  C014  F022         	movff	?___ftpack+1,?___awtoft+1
  7491  001C78  C015  F023         	movff	?___ftpack+2,?___awtoft+2
  7492  001C7C  0012               	return	
  7493  001C7E                     __end_of___awtoft:
  7494                           	opt stack 0
  7495                           tblptru	equ	0xFF8
  7496                           tblptrh	equ	0xFF7
  7497                           tblptrl	equ	0xFF6
  7498                           tablat	equ	0xFF5
  7499                           prodh	equ	0xFF4
  7500                           prodl	equ	0xFF3
  7501                           intcon	equ	0xFF2
  7502                           postinc0	equ	0xFEE
  7503                           wreg	equ	0xFE8
  7504                           postdec1	equ	0xFE5
  7505                           plusw1	equ	0xFE3
  7506                           fsr1l	equ	0xFE1
  7507                           indf2	equ	0xFDF
  7508                           postinc2	equ	0xFDE
  7509                           postdec2	equ	0xFDD
  7510                           plusw2	equ	0xFDB
  7511                           fsr2h	equ	0xFDA
  7512                           fsr2l	equ	0xFD9
  7513                           status	equ	0xFD8
  7514                           
  7515 ;; *************** function ___ftpack *****************
  7516 ;; Defined at:
  7517 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\float.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;  arg             3   18[COMRAM] unsigned um
  7520 ;;  exp             1   21[COMRAM] unsigned char 
  7521 ;;  sign            1   22[COMRAM] unsigned char 
  7522 ;; Auto vars:     Size  Location     Type
  7523 ;;		None
  7524 ;; Return value:  Size  Location     Type
  7525 ;;                  3   18[COMRAM] float 
  7526 ;; Registers used:
  7527 ;;		wreg, status,2, status,0
  7528 ;; Tracked objects:
  7529 ;;		On entry : 0/0
  7530 ;;		On exit  : 0/0
  7531 ;;		Unchanged: 0/0
  7532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7533 ;;      Params:         5       0       0       0       0       0       0       0       0
  7534 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7535 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7536 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7537 ;;Total ram usage:        8 bytes
  7538 ;; Hardware stack levels used:    1
  7539 ;; Hardware stack levels required when called:    1
  7540 ;; This function calls:
  7541 ;;		Nothing
  7542 ;; This function is called by:
  7543 ;;		___awtoft
  7544 ;;		___ftadd
  7545 ;;		___ftmul
  7546 ;;		___lltoft
  7547 ;; This function uses a non-reentrant model
  7548 ;;
  7549                           
  7550                           	psect	text20
  7551  001626                     __ptext20:
  7552                           	opt stack 0
  7553  001626                     ___ftpack:
  7554                           	opt stack 26
  7555                           
  7556                           ;incstack = 0
  7557  001626  5016               	movf	___ftpack@exp,w,c
  7558  001628  B4D8               	btfsc	status,2,c
  7559  00162A  D005               	goto	u3960
  7560  00162C  5013               	movf	___ftpack@arg,w,c
  7561  00162E  1014               	iorwf	___ftpack@arg+1,w,c
  7562  001630  1015               	iorwf	___ftpack@arg+2,w,c
  7563  001632  A4D8               	btfss	status,2,c
  7564  001634  D00C               	goto	l543
  7565  001636                     u3960:
  7566  001636  0E00               	movlw	0
  7567  001638  6E13               	movwf	?___ftpack,c
  7568  00163A  0E00               	movlw	0
  7569  00163C  6E14               	movwf	?___ftpack+1,c
  7570  00163E  0E00               	movlw	0
  7571  001640  6E15               	movwf	?___ftpack+2,c
  7572  001642  0012               	return	
  7573  001644  2A16               	incf	___ftpack@exp,f,c
  7574  001646  90D8               	bcf	status,0,c
  7575  001648  3215               	rrcf	___ftpack@arg+2,f,c
  7576  00164A  3214               	rrcf	___ftpack@arg+1,f,c
  7577  00164C  3213               	rrcf	___ftpack@arg,f,c
  7578  00164E                     l543:
  7579  00164E  0E00               	movlw	0
  7580  001650  1413               	andwf	___ftpack@arg,w,c
  7581  001652  6E18               	movwf	??___ftpack& (0+255),c
  7582  001654  0E00               	movlw	0
  7583  001656  1414               	andwf	___ftpack@arg+1,w,c
  7584  001658  6E19               	movwf	(??___ftpack+1)& (0+255),c
  7585  00165A  0EFE               	movlw	254
  7586  00165C  1415               	andwf	___ftpack@arg+2,w,c
  7587  00165E  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  7588  001660  5018               	movf	??___ftpack,w,c
  7589  001662  1019               	iorwf	??___ftpack+1,w,c
  7590  001664  101A               	iorwf	??___ftpack+2,w,c
  7591  001666  B4D8               	btfsc	status,2,c
  7592  001668  D00C               	goto	l546
  7593  00166A  D7EC               	goto	l544
  7594  00166C  2A16               	incf	___ftpack@exp,f,c
  7595  00166E  0E01               	movlw	1
  7596  001670  2613               	addwf	___ftpack@arg,f,c
  7597  001672  0E00               	movlw	0
  7598  001674  2214               	addwfc	___ftpack@arg+1,f,c
  7599  001676  0E00               	movlw	0
  7600  001678  2215               	addwfc	___ftpack@arg+2,f,c
  7601  00167A  90D8               	bcf	status,0,c
  7602  00167C  3215               	rrcf	___ftpack@arg+2,f,c
  7603  00167E  3214               	rrcf	___ftpack@arg+1,f,c
  7604  001680  3213               	rrcf	___ftpack@arg,f,c
  7605  001682                     l546:
  7606  001682  0E00               	movlw	0
  7607  001684  1413               	andwf	___ftpack@arg,w,c
  7608  001686  6E18               	movwf	??___ftpack& (0+255),c
  7609  001688  0E00               	movlw	0
  7610  00168A  1414               	andwf	___ftpack@arg+1,w,c
  7611  00168C  6E19               	movwf	(??___ftpack+1)& (0+255),c
  7612  00168E  0EFF               	movlw	255
  7613  001690  1415               	andwf	___ftpack@arg+2,w,c
  7614  001692  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  7615  001694  5018               	movf	??___ftpack,w,c
  7616  001696  1019               	iorwf	??___ftpack+1,w,c
  7617  001698  101A               	iorwf	??___ftpack+2,w,c
  7618  00169A  B4D8               	btfsc	status,2,c
  7619  00169C  D006               	goto	l549
  7620  00169E  D7E6               	goto	l547
  7621  0016A0  0616               	decf	___ftpack@exp,f,c
  7622  0016A2  90D8               	bcf	status,0,c
  7623  0016A4  3613               	rlcf	___ftpack@arg,f,c
  7624  0016A6  3614               	rlcf	___ftpack@arg+1,f,c
  7625  0016A8  3615               	rlcf	___ftpack@arg+2,f,c
  7626  0016AA                     l549:
  7627  0016AA  BE14               	btfsc	___ftpack@arg+1,7,c
  7628  0016AC  D003               	goto	u4000
  7629  0016AE  0E02               	movlw	2
  7630  0016B0  6016               	cpfslt	___ftpack@exp,c
  7631  0016B2  D7F6               	goto	l550
  7632  0016B4                     u4000:
  7633  0016B4  A016               	btfss	___ftpack@exp,0,c
  7634  0016B6  9E14               	bcf	___ftpack@arg+1,7,c
  7635  0016B8  90D8               	bcf	status,0,c
  7636  0016BA  3216               	rrcf	___ftpack@exp,f,c
  7637  0016BC  5016               	movf	___ftpack@exp,w,c
  7638  0016BE  1215               	iorwf	___ftpack@arg+2,f,c
  7639  0016C0  5017               	movf	___ftpack@sign,w,c
  7640  0016C2  A4D8               	btfss	status,2,c
  7641  0016C4  8E15               	bsf	___ftpack@arg+2,7,c
  7642  0016C6  C013  F013         	movff	___ftpack@arg,?___ftpack
  7643  0016CA  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  7644  0016CE  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  7645  0016D2  0012               	return	
  7646  0016D4                     __end_of___ftpack:
  7647                           	opt stack 0
  7648                           tblptru	equ	0xFF8
  7649                           tblptrh	equ	0xFF7
  7650                           tblptrl	equ	0xFF6
  7651                           tablat	equ	0xFF5
  7652                           prodh	equ	0xFF4
  7653                           prodl	equ	0xFF3
  7654                           intcon	equ	0xFF2
  7655                           postinc0	equ	0xFEE
  7656                           wreg	equ	0xFE8
  7657                           postdec1	equ	0xFE5
  7658                           plusw1	equ	0xFE3
  7659                           fsr1l	equ	0xFE1
  7660                           indf2	equ	0xFDF
  7661                           postinc2	equ	0xFDE
  7662                           postdec2	equ	0xFDD
  7663                           plusw2	equ	0xFDB
  7664                           fsr2h	equ	0xFDA
  7665                           fsr2l	equ	0xFD9
  7666                           status	equ	0xFD8
  7667                           
  7668 ;; *************** function ___awdiv *****************
  7669 ;; Defined at:
  7670 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  7671 ;; Parameters:    Size  Location     Type
  7672 ;;  dividend        2   24[COMRAM] int 
  7673 ;;  divisor         2   26[COMRAM] int 
  7674 ;; Auto vars:     Size  Location     Type
  7675 ;;  quotient        2   30[COMRAM] int 
  7676 ;;  sign            1   29[COMRAM] unsigned char 
  7677 ;;  counter         1   28[COMRAM] unsigned char 
  7678 ;; Return value:  Size  Location     Type
  7679 ;;                  2   24[COMRAM] int 
  7680 ;; Registers used:
  7681 ;;		wreg, status,2, status,0
  7682 ;; Tracked objects:
  7683 ;;		On entry : 0/0
  7684 ;;		On exit  : 0/0
  7685 ;;		Unchanged: 0/0
  7686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7687 ;;      Params:         4       0       0       0       0       0       0       0       0
  7688 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7689 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7690 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7691 ;;Total ram usage:        8 bytes
  7692 ;; Hardware stack levels used:    1
  7693 ;; Hardware stack levels required when called:    1
  7694 ;; This function calls:
  7695 ;;		Nothing
  7696 ;; This function is called by:
  7697 ;;		_readX
  7698 ;;		_fround
  7699 ;;		_scale
  7700 ;;		_sprintf
  7701 ;;		_glcd_PlotPixel
  7702 ;;		_readY
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           	psect	text21
  7707  0017FE                     __ptext21:
  7708                           	opt stack 0
  7709  0017FE                     ___awdiv:
  7710                           	opt stack 27
  7711                           
  7712                           ;incstack = 0
  7713  0017FE  0E00               	movlw	0
  7714  001800  6E1E               	movwf	___awdiv@sign,c
  7715  001802  AE1C               	btfss	___awdiv@divisor+1,7,c
  7716  001804  D006               	goto	l479
  7717  001806  6C1B               	negf	___awdiv@divisor,c
  7718  001808  1E1C               	comf	___awdiv@divisor+1,f,c
  7719  00180A  B0D8               	btfsc	status,0,c
  7720  00180C  2A1C               	incf	___awdiv@divisor+1,f,c
  7721  00180E  0E01               	movlw	1
  7722  001810  6E1E               	movwf	___awdiv@sign,c
  7723  001812                     l479:
  7724  001812  AE1A               	btfss	___awdiv@dividend+1,7,c
  7725  001814  D006               	goto	l480
  7726  001816  6C19               	negf	___awdiv@dividend,c
  7727  001818  1E1A               	comf	___awdiv@dividend+1,f,c
  7728  00181A  B0D8               	btfsc	status,0,c
  7729  00181C  2A1A               	incf	___awdiv@dividend+1,f,c
  7730  00181E  0E01               	movlw	1
  7731  001820  1A1E               	xorwf	___awdiv@sign,f,c
  7732  001822                     l480:
  7733  001822  0E00               	movlw	0
  7734  001824  6E20               	movwf	___awdiv@quotient+1,c
  7735  001826  0E00               	movlw	0
  7736  001828  6E1F               	movwf	___awdiv@quotient,c
  7737  00182A  501B               	movf	___awdiv@divisor,w,c
  7738  00182C  101C               	iorwf	___awdiv@divisor+1,w,c
  7739  00182E  B4D8               	btfsc	status,2,c
  7740  001830  D01C               	goto	l487
  7741  001832  0E01               	movlw	1
  7742  001834  6E1D               	movwf	___awdiv@counter,c
  7743  001836  D004               	goto	l482
  7744  001838  90D8               	bcf	status,0,c
  7745  00183A  361B               	rlcf	___awdiv@divisor,f,c
  7746  00183C  361C               	rlcf	___awdiv@divisor+1,f,c
  7747  00183E  2A1D               	incf	___awdiv@counter,f,c
  7748  001840                     l482:
  7749  001840  AE1C               	btfss	___awdiv@divisor+1,7,c
  7750  001842  D7FA               	goto	l483
  7751  001844                     u2510:
  7752  001844  90D8               	bcf	status,0,c
  7753  001846  361F               	rlcf	___awdiv@quotient,f,c
  7754  001848  3620               	rlcf	___awdiv@quotient+1,f,c
  7755  00184A  501B               	movf	___awdiv@divisor,w,c
  7756  00184C  5C19               	subwf	___awdiv@dividend,w,c
  7757  00184E  501C               	movf	___awdiv@divisor+1,w,c
  7758  001850  581A               	subwfb	___awdiv@dividend+1,w,c
  7759  001852  A0D8               	btfss	status,0,c
  7760  001854  D005               	goto	l486
  7761  001856  501B               	movf	___awdiv@divisor,w,c
  7762  001858  5E19               	subwf	___awdiv@dividend,f,c
  7763  00185A  501C               	movf	___awdiv@divisor+1,w,c
  7764  00185C  5A1A               	subwfb	___awdiv@dividend+1,f,c
  7765  00185E  801F               	bsf	___awdiv@quotient,0,c
  7766  001860                     l486:
  7767  001860  90D8               	bcf	status,0,c
  7768  001862  321C               	rrcf	___awdiv@divisor+1,f,c
  7769  001864  321B               	rrcf	___awdiv@divisor,f,c
  7770  001866  2E1D               	decfsz	___awdiv@counter,f,c
  7771  001868  D7ED               	goto	u2510
  7772  00186A                     l487:
  7773  00186A  501E               	movf	___awdiv@sign,w,c
  7774  00186C  B4D8               	btfsc	status,2,c
  7775  00186E  D004               	goto	l488
  7776  001870  6C1F               	negf	___awdiv@quotient,c
  7777  001872  1E20               	comf	___awdiv@quotient+1,f,c
  7778  001874  B0D8               	btfsc	status,0,c
  7779  001876  2A20               	incf	___awdiv@quotient+1,f,c
  7780  001878                     l488:
  7781  001878  C01F  F019         	movff	___awdiv@quotient,?___awdiv
  7782  00187C  C020  F01A         	movff	___awdiv@quotient+1,?___awdiv+1
  7783  001880  0012               	return	
  7784  001882                     __end_of___awdiv:
  7785                           	opt stack 0
  7786                           tblptru	equ	0xFF8
  7787                           tblptrh	equ	0xFF7
  7788                           tblptrl	equ	0xFF6
  7789                           tablat	equ	0xFF5
  7790                           prodh	equ	0xFF4
  7791                           prodl	equ	0xFF3
  7792                           intcon	equ	0xFF2
  7793                           postinc0	equ	0xFEE
  7794                           wreg	equ	0xFE8
  7795                           postdec1	equ	0xFE5
  7796                           plusw1	equ	0xFE3
  7797                           fsr1l	equ	0xFE1
  7798                           indf2	equ	0xFDF
  7799                           postinc2	equ	0xFDE
  7800                           postdec2	equ	0xFDD
  7801                           plusw2	equ	0xFDB
  7802                           fsr2h	equ	0xFDA
  7803                           fsr2l	equ	0xFD9
  7804                           status	equ	0xFD8
  7805                           
  7806 ;; *************** function _R0Value *****************
  7807 ;; Defined at:
  7808 ;;		line 43 in file "glcd_library/TS.c"
  7809 ;; Parameters:    Size  Location     Type
  7810 ;;		None
  7811 ;; Auto vars:     Size  Location     Type
  7812 ;;		None
  7813 ;; Return value:  Size  Location     Type
  7814 ;;                  2   18[COMRAM] int 
  7815 ;; Registers used:
  7816 ;;		wreg, status,2
  7817 ;; Tracked objects:
  7818 ;;		On entry : 0/0
  7819 ;;		On exit  : 0/0
  7820 ;;		Unchanged: 0/0
  7821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7822 ;;      Params:         2       0       0       0       0       0       0       0       0
  7823 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7824 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7825 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7826 ;;Total ram usage:        2 bytes
  7827 ;; Hardware stack levels used:    1
  7828 ;; Hardware stack levels required when called:    1
  7829 ;; This function calls:
  7830 ;;		Nothing
  7831 ;; This function is called by:
  7832 ;;		_readX
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           	psect	text22
  7837  001D80                     __ptext22:
  7838                           	opt stack 0
  7839  001D80                     _R0Value:
  7840                           	opt stack 28
  7841                           
  7842                           ;TS.c: 45: ADCON0 = 0b00000001;
  7843                           
  7844                           ;incstack = 0
  7845  001D80  0E01               	movlw	1
  7846  001D82  6EC2               	movwf	4034,c	;volatile
  7847                           
  7848                           ;TS.c: 46: ADCON0bits.GO=1;
  7849  001D84  82C2               	bsf	4034,1,c	;volatile
  7850  001D86  B2C2               	btfsc	4034,1,c	;volatile
  7851  001D88  D7FE               	goto	l222
  7852                           
  7853                           ;TS.c: 48: return ADRES;
  7854  001D8A  CFC3 F013          	movff	4035,?_R0Value	;volatile
  7855  001D8E  CFC4 F014          	movff	4036,?_R0Value+1	;volatile
  7856  001D92  0012               	return		;funcret
  7857  001D94                     __end_of_R0Value:
  7858                           	opt stack 0
  7859                           tblptru	equ	0xFF8
  7860                           tblptrh	equ	0xFF7
  7861                           tblptrl	equ	0xFF6
  7862                           tablat	equ	0xFF5
  7863                           prodh	equ	0xFF4
  7864                           prodl	equ	0xFF3
  7865                           intcon	equ	0xFF2
  7866                           postinc0	equ	0xFEE
  7867                           wreg	equ	0xFE8
  7868                           postdec1	equ	0xFE5
  7869                           plusw1	equ	0xFE3
  7870                           fsr1l	equ	0xFE1
  7871                           indf2	equ	0xFDF
  7872                           postinc2	equ	0xFDE
  7873                           postdec2	equ	0xFDD
  7874                           plusw2	equ	0xFDB
  7875                           fsr2h	equ	0xFDA
  7876                           fsr2l	equ	0xFD9
  7877                           status	equ	0xFD8
  7878                           
  7879 ;; *************** function _glcd_text_write *****************
  7880 ;; Defined at:
  7881 ;;		line 684 in file "glcd_library/glcd.c"
  7882 ;; Parameters:    Size  Location     Type
  7883 ;;  str             2   33[COMRAM] PTR const unsigned char 
  7884 ;;		 -> main@str(20), 
  7885 ;;  x               1   35[COMRAM] unsigned char 
  7886 ;;  y               1   36[COMRAM] unsigned char 
  7887 ;; Auto vars:     Size  Location     Type
  7888 ;;		None
  7889 ;; Return value:  Size  Location     Type
  7890 ;;                  1    wreg      void 
  7891 ;; Registers used:
  7892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7893 ;; Tracked objects:
  7894 ;;		On entry : 0/0
  7895 ;;		On exit  : 0/0
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7898 ;;      Params:         4       0       0       0       0       0       0       0       0
  7899 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7900 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7901 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7902 ;;Total ram usage:        4 bytes
  7903 ;; Hardware stack levels used:    1
  7904 ;; Hardware stack levels required when called:    4
  7905 ;; This function calls:
  7906 ;;		_glcd_SetCursor
  7907 ;;		_glcd_WriteString
  7908 ;; This function is called by:
  7909 ;;		_main
  7910 ;; This function uses a non-reentrant model
  7911 ;;
  7912                           
  7913                           	psect	text23
  7914  001D30                     __ptext23:
  7915                           	opt stack 0
  7916  001D30                     _glcd_text_write:
  7917                           	opt stack 26
  7918                           
  7919                           ;glcd.c: 687: glcd_SetCursor(x, y);
  7920                           
  7921                           ;incstack = 0
  7922  001D30  C025  F015         	movff	glcd_text_write@y,glcd_SetCursor@ypos
  7923  001D34  5024               	movf	glcd_text_write@x,w,c
  7924  001D36  ECDE  F00D         	call	_glcd_SetCursor
  7925                           
  7926                           ;glcd.c: 688: glcd_WriteString(str, 1, 1);
  7927  001D3A  C022  F01E         	movff	glcd_text_write@str,glcd_WriteString@str
  7928  001D3E  C023  F01F         	movff	glcd_text_write@str+1,glcd_WriteString@str+1
  7929  001D42  0E01               	movlw	1
  7930  001D44  6E20               	movwf	glcd_WriteString@font,c
  7931  001D46  0E01               	movlw	1
  7932  001D48  6E21               	movwf	glcd_WriteString@color,c
  7933  001D4A  EC02  F00E         	call	_glcd_WriteString	;wreg free
  7934  001D4E  0012               	return		;funcret
  7935  001D50                     __end_of_glcd_text_write:
  7936                           	opt stack 0
  7937                           tblptru	equ	0xFF8
  7938                           tblptrh	equ	0xFF7
  7939                           tblptrl	equ	0xFF6
  7940                           tablat	equ	0xFF5
  7941                           prodh	equ	0xFF4
  7942                           prodl	equ	0xFF3
  7943                           intcon	equ	0xFF2
  7944                           postinc0	equ	0xFEE
  7945                           wreg	equ	0xFE8
  7946                           postdec1	equ	0xFE5
  7947                           plusw1	equ	0xFE3
  7948                           fsr1l	equ	0xFE1
  7949                           indf2	equ	0xFDF
  7950                           postinc2	equ	0xFDE
  7951                           postdec2	equ	0xFDD
  7952                           plusw2	equ	0xFDB
  7953                           fsr2h	equ	0xFDA
  7954                           fsr2l	equ	0xFD9
  7955                           status	equ	0xFD8
  7956                           
  7957 ;; *************** function _glcd_WriteString *****************
  7958 ;; Defined at:
  7959 ;;		line 672 in file "glcd_library/glcd.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;  str             2   29[COMRAM] PTR const unsigned char 
  7962 ;;		 -> main@str(20), 
  7963 ;;  font            1   31[COMRAM] unsigned char 
  7964 ;;  color           1   32[COMRAM] unsigned char 
  7965 ;; Auto vars:     Size  Location     Type
  7966 ;;		None
  7967 ;; Return value:  Size  Location     Type
  7968 ;;                  1    wreg      void 
  7969 ;; Registers used:
  7970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7971 ;; Tracked objects:
  7972 ;;		On entry : 0/0
  7973 ;;		On exit  : 0/0
  7974 ;;		Unchanged: 0/0
  7975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7976 ;;      Params:         4       0       0       0       0       0       0       0       0
  7977 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7978 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7979 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7980 ;;Total ram usage:        4 bytes
  7981 ;; Hardware stack levels used:    1
  7982 ;; Hardware stack levels required when called:    3
  7983 ;; This function calls:
  7984 ;;		_glcd_WriteChar3x6
  7985 ;;		_glcd_WriteChar8X8
  7986 ;; This function is called by:
  7987 ;;		_glcd_text_write
  7988 ;; This function uses a non-reentrant model
  7989 ;;
  7990                           
  7991                           	psect	text24
  7992  001C04                     __ptext24:
  7993                           	opt stack 0
  7994  001C04                     _glcd_WriteString:
  7995                           	opt stack 26
  7996                           
  7997                           ;glcd.c: 674: while(*str)
  7998                           
  7999                           ;incstack = 0
  8000  001C04  D018               	goto	l166
  8001  001C06                     
  8002                           ;glcd.c: 675: {
  8003                           ;glcd.c: 676: if(font)
  8004  001C06  5020               	movf	glcd_WriteString@font,w,c
  8005  001C08  B4D8               	btfsc	status,2,c
  8006  001C0A  D00A               	goto	l168
  8007                           
  8008                           ;glcd.c: 677: glcd_WriteChar8X8(*str, color);
  8009  001C0C  C021  F015         	movff	glcd_WriteString@color,glcd_WriteChar8X8@color
  8010  001C10  C01E  FFD9         	movff	glcd_WriteString@str,fsr2l
  8011  001C14  C01F  FFDA         	movff	glcd_WriteString@str+1,fsr2h
  8012  001C18  50DF               	movf	indf2,w,c
  8013  001C1A  EC4E  F00A         	call	_glcd_WriteChar8X8
  8014  001C1E  D009               	goto	l169
  8015  001C20                     l168:
  8016                           
  8017                           ;glcd.c: 678: else
  8018                           ;glcd.c: 679: glcd_WriteChar3x6(*str, color);
  8019  001C20  C021  F015         	movff	glcd_WriteString@color,glcd_WriteChar3x6@color
  8020  001C24  C01E  FFD9         	movff	glcd_WriteString@str,fsr2l
  8021  001C28  C01F  FFDA         	movff	glcd_WriteString@str+1,fsr2h
  8022  001C2C  50DF               	movf	indf2,w,c
  8023  001C2E  ECDC  F009         	call	_glcd_WriteChar3x6
  8024  001C32                     l169:
  8025                           
  8026                           ;glcd.c: 680: str++;
  8027  001C32  4A1E               	infsnz	glcd_WriteString@str,f,c
  8028  001C34  2A1F               	incf	glcd_WriteString@str+1,f,c
  8029  001C36                     l166:
  8030  001C36  C01E  FFD9         	movff	glcd_WriteString@str,fsr2l
  8031  001C3A  C01F  FFDA         	movff	glcd_WriteString@str+1,fsr2h
  8032  001C3E  50DF               	movf	indf2,w,c
  8033  001C40  B4D8               	btfsc	status,2,c
  8034  001C42  0012               	return	
  8035  001C44  D7E0               	goto	l167
  8036  001C46                     __end_of_glcd_WriteString:
  8037                           	opt stack 0
  8038                           tblptru	equ	0xFF8
  8039                           tblptrh	equ	0xFF7
  8040                           tblptrl	equ	0xFF6
  8041                           tablat	equ	0xFF5
  8042                           prodh	equ	0xFF4
  8043                           prodl	equ	0xFF3
  8044                           intcon	equ	0xFF2
  8045                           postinc0	equ	0xFEE
  8046                           wreg	equ	0xFE8
  8047                           postdec1	equ	0xFE5
  8048                           plusw1	equ	0xFE3
  8049                           fsr1l	equ	0xFE1
  8050                           indf2	equ	0xFDF
  8051                           postinc2	equ	0xFDE
  8052                           postdec2	equ	0xFDD
  8053                           plusw2	equ	0xFDB
  8054                           fsr2h	equ	0xFDA
  8055                           fsr2l	equ	0xFD9
  8056                           status	equ	0xFD8
  8057                           
  8058 ;; *************** function _glcd_WriteChar8X8 *****************
  8059 ;; Defined at:
  8060 ;;		line 578 in file "glcd_library/glcd.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;  ch              1    wreg     unsigned char 
  8063 ;;  color           1   20[COMRAM] unsigned char 
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;  ch              1   25[COMRAM] unsigned char 
  8066 ;;  chr             2   23[COMRAM] unsigned int 
  8067 ;;  side            1   28[COMRAM] unsigned char 
  8068 ;;  i               1   27[COMRAM] unsigned char 
  8069 ;;  xpos            1   26[COMRAM] unsigned char 
  8070 ;; Return value:  Size  Location     Type
  8071 ;;                  1    wreg      void 
  8072 ;; Registers used:
  8073 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8074 ;; Tracked objects:
  8075 ;;		On entry : 0/0
  8076 ;;		On exit  : 0/0
  8077 ;;		Unchanged: 0/0
  8078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8079 ;;      Params:         1       0       0       0       0       0       0       0       0
  8080 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8081 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8082 ;;      Totals:         9       0       0       0       0       0       0       0       0
  8083 ;;Total ram usage:        9 bytes
  8084 ;; Hardware stack levels used:    1
  8085 ;; Hardware stack levels required when called:    2
  8086 ;; This function calls:
  8087 ;;		_glcd_WriteByte
  8088 ;; This function is called by:
  8089 ;;		_glcd_WriteString
  8090 ;; This function uses a non-reentrant model
  8091 ;;
  8092                           
  8093                           	psect	text25
  8094  00149C                     __ptext25:
  8095                           	opt stack 0
  8096  00149C                     _glcd_WriteChar8X8:
  8097                           	opt stack 26
  8098                           
  8099                           ;incstack = 0
  8100                           ;glcd_WriteChar8X8@ch stored from wreg
  8101  00149C  6E1A               	movwf	glcd_WriteChar8X8@ch,c
  8102                           
  8103                           ;glcd.c: 580: unsigned char i,xpos;
  8104                           ;glcd.c: 581: unsigned char side = 0;
  8105  00149E  0E00               	movlw	0
  8106  0014A0  6E1D               	movwf	glcd_WriteChar8X8@side,c
  8107                           
  8108                           ;glcd.c: 582: unsigned int chr;
  8109                           ;glcd.c: 584: if (ch=='\n')
  8110  0014A2  0E0A               	movlw	10
  8111  0014A4  181A               	xorwf	glcd_WriteChar8X8@ch,w,c
  8112  0014A6  A4D8               	btfss	status,2,c
  8113  0014A8  D004               	goto	l144
  8114                           
  8115                           ;glcd.c: 585: {
  8116                           ;glcd.c: 586: x=0;
  8117  0014AA  0E00               	movlw	0
  8118  0014AC  6E4C               	movwf	_x,c
  8119                           
  8120                           ;glcd.c: 587: y++;
  8121  0014AE  2A4B               	incf	_y,f,c
  8122                           
  8123                           ;glcd.c: 588: return;
  8124  0014B0  0012               	return	
  8125  0014B2                     l144:
  8126                           
  8127                           ;glcd.c: 589: }
  8128                           ;glcd.c: 591: if(x > 63)
  8129  0014B2  0E3F               	movlw	63
  8130  0014B4  644C               	cpfsgt	_x,c
  8131  0014B6  D006               	goto	l146
  8132                           
  8133                           ;glcd.c: 592: {
  8134                           ;glcd.c: 593: side = 1;
  8135  0014B8  0E01               	movlw	1
  8136  0014BA  6E1D               	movwf	glcd_WriteChar8X8@side,c
  8137                           
  8138                           ;glcd.c: 594: xpos=x-64;
  8139  0014BC  504C               	movf	_x,w,c
  8140  0014BE  0FC0               	addlw	192
  8141  0014C0  6E1B               	movwf	glcd_WriteChar8X8@xpos,c
  8142                           
  8143                           ;glcd.c: 595: }
  8144  0014C2  D002               	goto	l147
  8145  0014C4                     l146:
  8146                           
  8147                           ;glcd.c: 596: else
  8148                           ;glcd.c: 597: xpos=x;
  8149  0014C4  C04C  F01B         	movff	_x,glcd_WriteChar8X8@xpos
  8150  0014C8                     l147:
  8151                           
  8152                           ;glcd.c: 599: chr = (int)ch*8;
  8153  0014C8  501A               	movf	glcd_WriteChar8X8@ch,w,c
  8154  0014CA  0D08               	mullw	8
  8155  0014CC  CFF3 F018          	movff	prodl,glcd_WriteChar8X8@chr
  8156  0014D0  CFF4 F019          	movff	prodh,glcd_WriteChar8X8@chr+1
  8157                           
  8158                           ;glcd.c: 601: for(i = 0; i < 8; i++)
  8159  0014D4  0E00               	movlw	0
  8160  0014D6  6E1C               	movwf	glcd_WriteChar8X8@i,c
  8161  0014D8                     l2283:
  8162  0014D8  0E07               	movlw	7
  8163  0014DA  641C               	cpfsgt	glcd_WriteChar8X8@i,c
  8164  0014DC  D001               	goto	l148
  8165  0014DE  D041               	goto	u2140
  8166  0014E0                     l148:
  8167                           
  8168                           ;glcd.c: 602: {
  8169                           ;glcd.c: 604: if(xpos > 63)
  8170  0014E0  0E3F               	movlw	63
  8171  0014E2  641B               	cpfsgt	glcd_WriteChar8X8@xpos,c
  8172  0014E4  D012               	goto	l150
  8173                           
  8174                           ;glcd.c: 605: {
  8175                           ;glcd.c: 606: xpos -= 64;
  8176  0014E6  0E40               	movlw	64
  8177  0014E8  5E1B               	subwf	glcd_WriteChar8X8@xpos,f,c
  8178                           
  8179                           ;glcd.c: 607: side = 1;
  8180  0014EA  0E01               	movlw	1
  8181  0014EC  6E1D               	movwf	glcd_WriteChar8X8@side,c
  8182                           
  8183                           ;glcd.c: 608: LATBbits.LATB2=0;
  8184  0014EE  948A               	bcf	3978,2,c	;volatile
  8185                           
  8186                           ;glcd.c: 609: glcd_WriteByte(side, 0x40 | xpos);
  8187  0014F0  501B               	movf	glcd_WriteChar8X8@xpos,w,c
  8188  0014F2  0940               	iorlw	64
  8189  0014F4  6E13               	movwf	glcd_WriteByte@data,c
  8190  0014F6  501D               	movf	glcd_WriteChar8X8@side,w,c
  8191  0014F8  EC3F  F00E         	call	_glcd_WriteByte
  8192                           
  8193                           ;glcd.c: 610: glcd_WriteByte(side, 0xB8 | y);
  8194  0014FC  504B               	movf	_y,w,c
  8195  0014FE  09B8               	iorlw	184
  8196  001500  6E13               	movwf	glcd_WriteByte@data,c
  8197  001502  501D               	movf	glcd_WriteChar8X8@side,w,c
  8198  001504  EC3F  F00E         	call	_glcd_WriteByte
  8199                           
  8200                           ;glcd.c: 611: LATBbits.LATB2=1;
  8201  001508  848A               	bsf	3978,2,c	;volatile
  8202  00150A                     l150:
  8203                           
  8204                           ;glcd.c: 612: }
  8205                           ;glcd.c: 613: if(color)
  8206  00150A  5015               	movf	glcd_WriteChar8X8@color,w,c
  8207  00150C  B4D8               	btfsc	status,2,c
  8208  00150E  D013               	goto	l151
  8209                           
  8210                           ;glcd.c: 614: glcd_WriteByte(side,Font8x8[chr+i]);
  8211  001510  501C               	movf	glcd_WriteChar8X8@i,w,c
  8212  001512  2418               	addwf	glcd_WriteChar8X8@chr,w,c
  8213  001514  6E16               	movwf	??_glcd_WriteChar8X8& (0+255),c
  8214  001516  0E00               	movlw	0
  8215  001518  2019               	addwfc	glcd_WriteChar8X8@chr+1,w,c
  8216  00151A  6E17               	movwf	(??_glcd_WriteChar8X8+1)& (0+255),c
  8217  00151C  0EC3               	movlw	low _Font8x8
  8218  00151E  2416               	addwf	??_glcd_WriteChar8X8,w,c
  8219  001520  6EF6               	movwf	tblptrl,c
  8220  001522  0E76               	movlw	high _Font8x8
  8221  001524  2017               	addwfc	??_glcd_WriteChar8X8+1,w,c
  8222  001526  6EF7               	movwf	tblptrh,c
  8223  001528                     	if	0	;There are less than 3 active tblptr bytes
  8224  001528                     	endif
  8225  001528  0008               	tblrd		*
  8226  00152A  CFF5 F013          	movff	tablat,glcd_WriteByte@data
  8227  00152E  501D               	movf	glcd_WriteChar8X8@side,w,c
  8228  001530  EC3F  F00E         	call	_glcd_WriteByte
  8229  001534  D013               	goto	l152
  8230  001536                     l151:
  8231                           
  8232                           ;glcd.c: 615: else
  8233                           ;glcd.c: 616: glcd_WriteByte(side,~(Font8x8[chr+i]));
  8234  001536  501C               	movf	glcd_WriteChar8X8@i,w,c
  8235  001538  2418               	addwf	glcd_WriteChar8X8@chr,w,c
  8236  00153A  6E16               	movwf	??_glcd_WriteChar8X8& (0+255),c
  8237  00153C  0E00               	movlw	0
  8238  00153E  2019               	addwfc	glcd_WriteChar8X8@chr+1,w,c
  8239  001540  6E17               	movwf	(??_glcd_WriteChar8X8+1)& (0+255),c
  8240  001542  0EC3               	movlw	low _Font8x8
  8241  001544  2416               	addwf	??_glcd_WriteChar8X8,w,c
  8242  001546  6EF6               	movwf	tblptrl,c
  8243  001548  0E76               	movlw	high _Font8x8
  8244  00154A  2017               	addwfc	??_glcd_WriteChar8X8+1,w,c
  8245  00154C  6EF7               	movwf	tblptrh,c
  8246  00154E                     	if	0	;There are less than 3 active tblptr bytes
  8247  00154E                     	endif
  8248  00154E  0008               	tblrd		*
  8249  001550  50F5               	movf	tablat,w,c
  8250  001552  0AFF               	xorlw	255
  8251  001554  6E13               	movwf	glcd_WriteByte@data,c
  8252  001556  501D               	movf	glcd_WriteChar8X8@side,w,c
  8253  001558  EC3F  F00E         	call	_glcd_WriteByte
  8254  00155C                     l152:
  8255                           
  8256                           ;glcd.c: 617: xpos++;
  8257  00155C  2A1B               	incf	glcd_WriteChar8X8@xpos,f,c
  8258  00155E  2A1C               	incf	glcd_WriteChar8X8@i,f,c
  8259  001560  D7BB               	goto	l2283
  8260  001562                     u2140:
  8261                           
  8262                           ;glcd.c: 618: }
  8263                           ;glcd.c: 619: x+=8;
  8264  001562  0E08               	movlw	8
  8265  001564  264C               	addwf	_x,f,c
  8266  001566  0012               	return		;funcret
  8267  001568                     __end_of_glcd_WriteChar8X8:
  8268                           	opt stack 0
  8269                           tblptru	equ	0xFF8
  8270                           tblptrh	equ	0xFF7
  8271                           tblptrl	equ	0xFF6
  8272                           tablat	equ	0xFF5
  8273                           prodh	equ	0xFF4
  8274                           prodl	equ	0xFF3
  8275                           intcon	equ	0xFF2
  8276                           postinc0	equ	0xFEE
  8277                           wreg	equ	0xFE8
  8278                           postdec1	equ	0xFE5
  8279                           plusw1	equ	0xFE3
  8280                           fsr1l	equ	0xFE1
  8281                           indf2	equ	0xFDF
  8282                           postinc2	equ	0xFDE
  8283                           postdec2	equ	0xFDD
  8284                           plusw2	equ	0xFDB
  8285                           fsr2h	equ	0xFDA
  8286                           fsr2l	equ	0xFD9
  8287                           status	equ	0xFD8
  8288                           
  8289 ;; *************** function _glcd_WriteChar3x6 *****************
  8290 ;; Defined at:
  8291 ;;		line 626 in file "glcd_library/glcd.c"
  8292 ;; Parameters:    Size  Location     Type
  8293 ;;  ch              1    wreg     unsigned char 
  8294 ;;  color           1   20[COMRAM] unsigned char 
  8295 ;; Auto vars:     Size  Location     Type
  8296 ;;  ch              1   24[COMRAM] unsigned char 
  8297 ;;  side            1   26[COMRAM] unsigned char 
  8298 ;;  i               1   25[COMRAM] unsigned char 
  8299 ;;  xpos            1   23[COMRAM] unsigned char 
  8300 ;; Return value:  Size  Location     Type
  8301 ;;                  1    wreg      void 
  8302 ;; Registers used:
  8303 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8304 ;; Tracked objects:
  8305 ;;		On entry : 0/0
  8306 ;;		On exit  : 0/0
  8307 ;;		Unchanged: 0/0
  8308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8309 ;;      Params:         1       0       0       0       0       0       0       0       0
  8310 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8311 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8312 ;;      Totals:         7       0       0       0       0       0       0       0       0
  8313 ;;Total ram usage:        7 bytes
  8314 ;; Hardware stack levels used:    1
  8315 ;; Hardware stack levels required when called:    2
  8316 ;; This function calls:
  8317 ;;		_glcd_WriteByte
  8318 ;; This function is called by:
  8319 ;;		_glcd_WriteString
  8320 ;; This function uses a non-reentrant model
  8321 ;;
  8322                           
  8323                           	psect	text26
  8324  0013B8                     __ptext26:
  8325                           	opt stack 0
  8326  0013B8                     _glcd_WriteChar3x6:
  8327                           	opt stack 26
  8328                           
  8329                           ;incstack = 0
  8330                           ;glcd_WriteChar3x6@ch stored from wreg
  8331  0013B8  6E19               	movwf	glcd_WriteChar3x6@ch,c
  8332                           
  8333                           ;glcd.c: 628: unsigned char i,xpos;
  8334                           ;glcd.c: 629: unsigned char side = 0;
  8335  0013BA  0E00               	movlw	0
  8336  0013BC  6E1B               	movwf	glcd_WriteChar3x6@side,c
  8337                           
  8338                           ;glcd.c: 631: if (ch=='\n')
  8339  0013BE  0E0A               	movlw	10
  8340  0013C0  1819               	xorwf	glcd_WriteChar3x6@ch,w,c
  8341  0013C2  A4D8               	btfss	status,2,c
  8342  0013C4  D004               	goto	l155
  8343                           
  8344                           ;glcd.c: 632: {
  8345                           ;glcd.c: 633: x=0;
  8346  0013C6  0E00               	movlw	0
  8347  0013C8  6E4C               	movwf	_x,c
  8348                           
  8349                           ;glcd.c: 634: y++;
  8350  0013CA  2A4B               	incf	_y,f,c
  8351                           
  8352                           ;glcd.c: 635: return;
  8353  0013CC  0012               	return	
  8354  0013CE                     l155:
  8355                           
  8356                           ;glcd.c: 636: }
  8357                           ;glcd.c: 638: if(x > 63)
  8358  0013CE  0E3F               	movlw	63
  8359  0013D0  644C               	cpfsgt	_x,c
  8360  0013D2  D006               	goto	l157
  8361                           
  8362                           ;glcd.c: 639: {
  8363                           ;glcd.c: 640: side = 1;
  8364  0013D4  0E01               	movlw	1
  8365  0013D6  6E1B               	movwf	glcd_WriteChar3x6@side,c
  8366                           
  8367                           ;glcd.c: 641: xpos=x-64;
  8368  0013D8  504C               	movf	_x,w,c
  8369  0013DA  0FC0               	addlw	192
  8370  0013DC  6E18               	movwf	glcd_WriteChar3x6@xpos,c
  8371                           
  8372                           ;glcd.c: 642: }
  8373  0013DE  D002               	goto	l158
  8374  0013E0                     l157:
  8375                           
  8376                           ;glcd.c: 643: else
  8377                           ;glcd.c: 644: xpos=x;
  8378  0013E0  C04C  F018         	movff	_x,glcd_WriteChar3x6@xpos
  8379  0013E4                     l158:
  8380                           
  8381                           ;glcd.c: 646: ch -= 32;
  8382  0013E4  0E20               	movlw	32
  8383  0013E6  5E19               	subwf	glcd_WriteChar3x6@ch,f,c
  8384                           
  8385                           ;glcd.c: 648: for(i = 0; i < 3; i++)
  8386  0013E8  0E00               	movlw	0
  8387  0013EA  6E1A               	movwf	glcd_WriteChar3x6@i,c
  8388  0013EC                     l2335:
  8389  0013EC  0E02               	movlw	2
  8390  0013EE  641A               	cpfsgt	glcd_WriteChar3x6@i,c
  8391  0013F0  D001               	goto	l159
  8392  0013F2  D051               	goto	u2200
  8393  0013F4                     l159:
  8394                           
  8395                           ;glcd.c: 649: {
  8396                           ;glcd.c: 650: if(xpos > 63)
  8397  0013F4  0E3F               	movlw	63
  8398  0013F6  6418               	cpfsgt	glcd_WriteChar3x6@xpos,c
  8399  0013F8  D012               	goto	l161
  8400                           
  8401                           ;glcd.c: 651: {
  8402                           ;glcd.c: 652: xpos -= 64;
  8403  0013FA  0E40               	movlw	64
  8404  0013FC  5E18               	subwf	glcd_WriteChar3x6@xpos,f,c
  8405                           
  8406                           ;glcd.c: 653: side = 1;
  8407  0013FE  0E01               	movlw	1
  8408  001400  6E1B               	movwf	glcd_WriteChar3x6@side,c
  8409                           
  8410                           ;glcd.c: 654: LATBbits.LATB2=0;
  8411  001402  948A               	bcf	3978,2,c	;volatile
  8412                           
  8413                           ;glcd.c: 655: glcd_WriteByte(side, 0x40 | xpos);
  8414  001404  5018               	movf	glcd_WriteChar3x6@xpos,w,c
  8415  001406  0940               	iorlw	64
  8416  001408  6E13               	movwf	glcd_WriteByte@data,c
  8417  00140A  501B               	movf	glcd_WriteChar3x6@side,w,c
  8418  00140C  EC3F  F00E         	call	_glcd_WriteByte
  8419                           
  8420                           ;glcd.c: 656: glcd_WriteByte(side, 0xB8 | y);
  8421  001410  504B               	movf	_y,w,c
  8422  001412  09B8               	iorlw	184
  8423  001414  6E13               	movwf	glcd_WriteByte@data,c
  8424  001416  501B               	movf	glcd_WriteChar3x6@side,w,c
  8425  001418  EC3F  F00E         	call	_glcd_WriteByte
  8426                           
  8427                           ;glcd.c: 657: LATBbits.LATB2=1;
  8428  00141C  848A               	bsf	3978,2,c	;volatile
  8429  00141E                     l161:
  8430                           
  8431                           ;glcd.c: 658: }
  8432                           ;glcd.c: 659: if(color)
  8433  00141E  5015               	movf	glcd_WriteChar3x6@color,w,c
  8434  001420  B4D8               	btfsc	status,2,c
  8435  001422  D01B               	goto	l162
  8436                           
  8437                           ;glcd.c: 660: glcd_WriteByte(side,Font3x6[ch][i]);
  8438  001424  5019               	movf	glcd_WriteChar3x6@ch,w,c
  8439  001426  0D03               	mullw	3
  8440  001428  0EC3               	movlw	low _Font3x6
  8441  00142A  6E16               	movwf	??_glcd_WriteChar3x6& (0+255),c
  8442  00142C  0E7E               	movlw	high _Font3x6
  8443  00142E  6E17               	movwf	(??_glcd_WriteChar3x6+1)& (0+255),c
  8444  001430  50F3               	movf	prodl,w,c
  8445  001432  2616               	addwf	??_glcd_WriteChar3x6,f,c
  8446  001434  50F4               	movf	prodh,w,c
  8447  001436  2217               	addwfc	??_glcd_WriteChar3x6+1,f,c
  8448  001438  501A               	movf	glcd_WriteChar3x6@i,w,c
  8449  00143A  0D01               	mullw	1
  8450  00143C  50F3               	movf	prodl,w,c
  8451  00143E  2616               	addwf	??_glcd_WriteChar3x6,f,c
  8452  001440  50F4               	movf	prodh,w,c
  8453  001442  2217               	addwfc	??_glcd_WriteChar3x6+1,f,c
  8454  001444  C016  FFF6         	movff	??_glcd_WriteChar3x6,tblptrl
  8455  001448  C017  FFF7         	movff	??_glcd_WriteChar3x6+1,tblptrh
  8456  00144C                     	if	0	;tblptru may be non-zero
  8457  00144C                     	endif
  8458  00144C                     	if	0	;tblptru may be non-zero
  8459  00144C                     	endif
  8460  00144C  0008               	tblrd		*
  8461  00144E  CFF5 F013          	movff	tablat,glcd_WriteByte@data
  8462  001452  501B               	movf	glcd_WriteChar3x6@side,w,c
  8463  001454  EC3F  F00E         	call	_glcd_WriteByte
  8464  001458  D01B               	goto	l163
  8465  00145A                     l162:
  8466                           
  8467                           ;glcd.c: 661: else
  8468                           ;glcd.c: 662: glcd_WriteByte(side,~(Font3x6[ch][i]));
  8469  00145A  5019               	movf	glcd_WriteChar3x6@ch,w,c
  8470  00145C  0D03               	mullw	3
  8471  00145E  0EC3               	movlw	low _Font3x6
  8472  001460  6E16               	movwf	??_glcd_WriteChar3x6& (0+255),c
  8473  001462  0E7E               	movlw	high _Font3x6
  8474  001464  6E17               	movwf	(??_glcd_WriteChar3x6+1)& (0+255),c
  8475  001466  50F3               	movf	prodl,w,c
  8476  001468  2616               	addwf	??_glcd_WriteChar3x6,f,c
  8477  00146A  50F4               	movf	prodh,w,c
  8478  00146C  2217               	addwfc	??_glcd_WriteChar3x6+1,f,c
  8479  00146E  501A               	movf	glcd_WriteChar3x6@i,w,c
  8480  001470  0D01               	mullw	1
  8481  001472  50F3               	movf	prodl,w,c
  8482  001474  2616               	addwf	??_glcd_WriteChar3x6,f,c
  8483  001476  50F4               	movf	prodh,w,c
  8484  001478  2217               	addwfc	??_glcd_WriteChar3x6+1,f,c
  8485  00147A  C016  FFF6         	movff	??_glcd_WriteChar3x6,tblptrl
  8486  00147E  C017  FFF7         	movff	??_glcd_WriteChar3x6+1,tblptrh
  8487  001482                     	if	0	;tblptru may be non-zero
  8488  001482                     	endif
  8489  001482                     	if	0	;tblptru may be non-zero
  8490  001482                     	endif
  8491  001482  0008               	tblrd		*
  8492  001484  50F5               	movf	tablat,w,c
  8493  001486  0AFF               	xorlw	255
  8494  001488  6E13               	movwf	glcd_WriteByte@data,c
  8495  00148A  501B               	movf	glcd_WriteChar3x6@side,w,c
  8496  00148C  EC3F  F00E         	call	_glcd_WriteByte
  8497  001490                     l163:
  8498                           
  8499                           ;glcd.c: 663: xpos++;
  8500  001490  2A18               	incf	glcd_WriteChar3x6@xpos,f,c
  8501  001492  2A1A               	incf	glcd_WriteChar3x6@i,f,c
  8502  001494  D7AB               	goto	l2335
  8503  001496                     u2200:
  8504                           
  8505                           ;glcd.c: 664: }
  8506                           ;glcd.c: 665: x+=5;
  8507  001496  0E05               	movlw	5
  8508  001498  264C               	addwf	_x,f,c
  8509  00149A  0012               	return		;funcret
  8510  00149C                     __end_of_glcd_WriteChar3x6:
  8511                           	opt stack 0
  8512                           tblptru	equ	0xFF8
  8513                           tblptrh	equ	0xFF7
  8514                           tblptrl	equ	0xFF6
  8515                           tablat	equ	0xFF5
  8516                           prodh	equ	0xFF4
  8517                           prodl	equ	0xFF3
  8518                           intcon	equ	0xFF2
  8519                           postinc0	equ	0xFEE
  8520                           wreg	equ	0xFE8
  8521                           postdec1	equ	0xFE5
  8522                           plusw1	equ	0xFE3
  8523                           fsr1l	equ	0xFE1
  8524                           indf2	equ	0xFDF
  8525                           postinc2	equ	0xFDE
  8526                           postdec2	equ	0xFDD
  8527                           plusw2	equ	0xFDB
  8528                           fsr2h	equ	0xFDA
  8529                           fsr2l	equ	0xFD9
  8530                           status	equ	0xFD8
  8531                           
  8532 ;; *************** function _glcd_SetCursor *****************
  8533 ;; Defined at:
  8534 ;;		line 553 in file "glcd_library/glcd.c"
  8535 ;; Parameters:    Size  Location     Type
  8536 ;;  xpos            1    wreg     unsigned char 
  8537 ;;  ypos            1   20[COMRAM] unsigned char 
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;  xpos            1   22[COMRAM] unsigned char 
  8540 ;;  side            1   21[COMRAM] unsigned char 
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  1    wreg      void 
  8543 ;; Registers used:
  8544 ;;		wreg, status,2, status,0, cstack
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8550 ;;      Params:         1       0       0       0       0       0       0       0       0
  8551 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8552 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8553 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8554 ;;Total ram usage:        3 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    2
  8557 ;; This function calls:
  8558 ;;		_glcd_WriteByte
  8559 ;; This function is called by:
  8560 ;;		_main
  8561 ;;		_glcd_text_write
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           	psect	text27
  8566  001BBC                     __ptext27:
  8567                           	opt stack 0
  8568  001BBC                     _glcd_SetCursor:
  8569                           	opt stack 27
  8570                           
  8571                           ;incstack = 0
  8572                           ;glcd_SetCursor@xpos stored from wreg
  8573  001BBC  6E17               	movwf	glcd_SetCursor@xpos,c
  8574                           
  8575                           ;glcd.c: 555: unsigned char side = 0;
  8576  001BBE  0E00               	movlw	0
  8577  001BC0  6E16               	movwf	glcd_SetCursor@side,c
  8578                           
  8579                           ;glcd.c: 557: if(xpos > 127 | ypos > 7)
  8580  001BC2  0E80               	movlw	128
  8581  001BC4  6017               	cpfslt	glcd_SetCursor@xpos,c
  8582  001BC6  0012               	return	
  8583  001BC8  0E07               	movlw	7
  8584  001BCA  6415               	cpfsgt	glcd_SetCursor@ypos,c
  8585  001BCC  D001               	goto	l137
  8586  001BCE  0012               	return	
  8587  001BD0                     l137:
  8588                           
  8589                           ;glcd.c: 560: x = xpos;
  8590  001BD0  C017  F04C         	movff	glcd_SetCursor@xpos,_x
  8591                           
  8592                           ;glcd.c: 561: y = ypos;
  8593  001BD4  C015  F04B         	movff	glcd_SetCursor@ypos,_y
  8594                           
  8595                           ;glcd.c: 563: if(xpos > 63)
  8596  001BD8  0E3F               	movlw	63
  8597  001BDA  6417               	cpfsgt	glcd_SetCursor@xpos,c
  8598  001BDC  D004               	goto	l141
  8599                           
  8600                           ;glcd.c: 564: {
  8601                           ;glcd.c: 565: xpos -= 64;
  8602  001BDE  0E40               	movlw	64
  8603  001BE0  5E17               	subwf	glcd_SetCursor@xpos,f,c
  8604                           
  8605                           ;glcd.c: 566: side = 1;
  8606  001BE2  0E01               	movlw	1
  8607  001BE4  6E16               	movwf	glcd_SetCursor@side,c
  8608  001BE6                     l141:
  8609                           
  8610                           ;glcd.c: 567: }
  8611                           ;glcd.c: 569: LATBbits.LATB2=0;
  8612  001BE6  948A               	bcf	3978,2,c	;volatile
  8613                           
  8614                           ;glcd.c: 570: glcd_WriteByte(side, 0x40 | xpos);
  8615  001BE8  5017               	movf	glcd_SetCursor@xpos,w,c
  8616  001BEA  0940               	iorlw	64
  8617  001BEC  6E13               	movwf	glcd_WriteByte@data,c
  8618  001BEE  5016               	movf	glcd_SetCursor@side,w,c
  8619  001BF0  EC3F  F00E         	call	_glcd_WriteByte
  8620                           
  8621                           ;glcd.c: 571: glcd_WriteByte(side, 0xB8 | ypos);
  8622  001BF4  5015               	movf	glcd_SetCursor@ypos,w,c
  8623  001BF6  09B8               	iorlw	184
  8624  001BF8  6E13               	movwf	glcd_WriteByte@data,c
  8625  001BFA  5016               	movf	glcd_SetCursor@side,w,c
  8626  001BFC  EC3F  F00E         	call	_glcd_WriteByte
  8627                           
  8628                           ;glcd.c: 572: LATBbits.LATB2=1;
  8629  001C00  848A               	bsf	3978,2,c	;volatile
  8630  001C02  0012               	return		;funcret
  8631  001C04                     __end_of_glcd_SetCursor:
  8632                           	opt stack 0
  8633                           tblptru	equ	0xFF8
  8634                           tblptrh	equ	0xFF7
  8635                           tblptrl	equ	0xFF6
  8636                           tablat	equ	0xFF5
  8637                           prodh	equ	0xFF4
  8638                           prodl	equ	0xFF3
  8639                           intcon	equ	0xFF2
  8640                           postinc0	equ	0xFEE
  8641                           wreg	equ	0xFE8
  8642                           postdec1	equ	0xFE5
  8643                           plusw1	equ	0xFE3
  8644                           fsr1l	equ	0xFE1
  8645                           indf2	equ	0xFDF
  8646                           postinc2	equ	0xFDE
  8647                           postdec2	equ	0xFDD
  8648                           plusw2	equ	0xFDB
  8649                           fsr2h	equ	0xFDA
  8650                           fsr2l	equ	0xFD9
  8651                           status	equ	0xFD8
  8652                           
  8653 ;; *************** function _glcd_Init *****************
  8654 ;; Defined at:
  8655 ;;		line 339 in file "glcd_library/glcd.c"
  8656 ;; Parameters:    Size  Location     Type
  8657 ;;  mode            1    wreg     unsigned char 
  8658 ;; Auto vars:     Size  Location     Type
  8659 ;;  mode            1   24[COMRAM] unsigned char 
  8660 ;;  k               1    0        unsigned char 
  8661 ;;  j               1    0        unsigned char 
  8662 ;;  i               1    0        unsigned char 
  8663 ;; Return value:  Size  Location     Type
  8664 ;;                  1    wreg      void 
  8665 ;; Registers used:
  8666 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8667 ;; Tracked objects:
  8668 ;;		On entry : 0/0
  8669 ;;		On exit  : 0/0
  8670 ;;		Unchanged: 0/0
  8671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8672 ;;      Params:         0       0       0       0       0       0       0       0       0
  8673 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8674 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8675 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8676 ;;Total ram usage:        2 bytes
  8677 ;; Hardware stack levels used:    1
  8678 ;; Hardware stack levels required when called:    3
  8679 ;; This function calls:
  8680 ;;		_glcd_FillScreen
  8681 ;;		_glcd_WriteByte
  8682 ;; This function is called by:
  8683 ;;		_main
  8684 ;; This function uses a non-reentrant model
  8685 ;;
  8686                           
  8687                           	psect	text28
  8688  001568                     __ptext28:
  8689                           	opt stack 0
  8690  001568                     _glcd_Init:
  8691                           	opt stack 27
  8692                           
  8693                           ;incstack = 0
  8694                           ;glcd_Init@mode stored from wreg
  8695  001568  6E19               	movwf	glcd_Init@mode,c
  8696                           
  8697                           ;glcd.c: 341: TRISA = 0xFF;
  8698  00156A  6892               	setf	3986,c	;volatile
  8699                           
  8700                           ;glcd.c: 342: PORTA = 0x00;
  8701  00156C  0E00               	movlw	0
  8702  00156E  6E80               	movwf	3968,c	;volatile
  8703                           
  8704                           ;glcd.c: 343: ADCON1 = 0x0F;
  8705  001570  0E0F               	movlw	15
  8706  001572  6EC1               	movwf	4033,c	;volatile
  8707                           
  8708                           ;glcd.c: 345: TRISB = 0x00;
  8709  001574  0E00               	movlw	0
  8710  001576  6E93               	movwf	3987,c	;volatile
  8711                           
  8712                           ;glcd.c: 346: PORTB = 0x00;
  8713  001578  0E00               	movlw	0
  8714  00157A  6E81               	movwf	3969,c	;volatile
  8715                           
  8716                           ;glcd.c: 348: TRISD = 0x00;
  8717  00157C  0E00               	movlw	0
  8718  00157E  6E95               	movwf	3989,c	;volatile
  8719                           
  8720                           ;glcd.c: 349: PORTD = 0x00;
  8721  001580  0E00               	movlw	0
  8722  001582  6E83               	movwf	3971,c	;volatile
  8723                           
  8724                           ;glcd.c: 351: unsigned char i, j, k;
  8725                           ;glcd.c: 354: PORTD = 0x00;
  8726  001584  0E00               	movlw	0
  8727  001586  6E83               	movwf	3971,c	;volatile
  8728                           
  8729                           ;glcd.c: 355: LATBbits.LATB5 = 0;
  8730  001588  9A8A               	bcf	3978,5,c	;volatile
  8731                           
  8732                           ;glcd.c: 357: _delay((unsigned long)((1500)*(100000/4000.0)));
  8733  00158A  0E31               	movlw	49
  8734  00158C  6E18               	movwf	??_glcd_Init& (0+255),c
  8735  00158E  0EB2               	movlw	178
  8736  001590                     u4787:
  8737  001590  2EE8               	decfsz	wreg,f,c
  8738  001592  D7FE               	bra	u4787
  8739  001594  2E18               	decfsz	??_glcd_Init& (0+255),f,c
  8740  001596  D7FC               	bra	u4787
  8741  001598  D000               	nop2	
  8742                           
  8743                           ;glcd.c: 358: LATBbits.LATB5 = 1;
  8744  00159A  8A8A               	bsf	3978,5,c	;volatile
  8745                           
  8746                           ;glcd.c: 360: LATBbits.LATB4=0;
  8747  00159C  988A               	bcf	3978,4,c	;volatile
  8748                           
  8749                           ;glcd.c: 361: LATBbits.LATB0=0;
  8750  00159E  908A               	bcf	3978,0,c	;volatile
  8751                           
  8752                           ;glcd.c: 362: LATBbits.LATB1=0;
  8753  0015A0  928A               	bcf	3978,1,c	;volatile
  8754                           
  8755                           ;glcd.c: 363: LATBbits.LATB2=0;
  8756  0015A2  948A               	bcf	3978,2,c	;volatile
  8757                           
  8758                           ;glcd.c: 366: _delay((unsigned long)((10)*(100000/4000.0)));
  8759  0015A4  0E53               	movlw	83
  8760  0015A6                     u4797:
  8761  0015A6  2EE8               	decfsz	wreg,f,c
  8762  0015A8  D7FE               	bra	u4797
  8763  0015AA  F000               	nop	
  8764                           
  8765                           ;glcd.c: 367: glcd_WriteByte(0, 0xC0);
  8766  0015AC  0EC0               	movlw	192
  8767  0015AE  6E13               	movwf	glcd_WriteByte@data,c
  8768  0015B0  0E00               	movlw	0
  8769  0015B2  EC3F  F00E         	call	_glcd_WriteByte
  8770                           
  8771                           ;glcd.c: 368: glcd_WriteByte(1, 0xC0);
  8772  0015B6  0EC0               	movlw	192
  8773  0015B8  6E13               	movwf	glcd_WriteByte@data,c
  8774  0015BA  0E01               	movlw	1
  8775  0015BC  EC3F  F00E         	call	_glcd_WriteByte
  8776                           
  8777                           ;glcd.c: 369: glcd_WriteByte(0, 0x40);
  8778  0015C0  0E40               	movlw	64
  8779  0015C2  6E13               	movwf	glcd_WriteByte@data,c
  8780  0015C4  0E00               	movlw	0
  8781  0015C6  EC3F  F00E         	call	_glcd_WriteByte
  8782                           
  8783                           ;glcd.c: 370: glcd_WriteByte(1, 0x40);
  8784  0015CA  0E40               	movlw	64
  8785  0015CC  6E13               	movwf	glcd_WriteByte@data,c
  8786  0015CE  0E01               	movlw	1
  8787  0015D0  EC3F  F00E         	call	_glcd_WriteByte
  8788                           
  8789                           ;glcd.c: 371: glcd_WriteByte(0, 0xB8);
  8790  0015D4  0EB8               	movlw	184
  8791  0015D6  6E13               	movwf	glcd_WriteByte@data,c
  8792  0015D8  0E00               	movlw	0
  8793  0015DA  EC3F  F00E         	call	_glcd_WriteByte
  8794                           
  8795                           ;glcd.c: 372: glcd_WriteByte(1, 0xB8);
  8796  0015DE  0EB8               	movlw	184
  8797  0015E0  6E13               	movwf	glcd_WriteByte@data,c
  8798  0015E2  0E01               	movlw	1
  8799  0015E4  EC3F  F00E         	call	_glcd_WriteByte
  8800                           
  8801                           ;glcd.c: 374: if(mode == 1)
  8802  0015E8  0419               	decf	glcd_Init@mode,w,c
  8803  0015EA  A4D8               	btfss	status,2,c
  8804  0015EC  D00E               	goto	l95
  8805                           
  8806                           ;glcd.c: 375: {
  8807                           ;glcd.c: 376: TRISA = 0x00;
  8808  0015EE  0E00               	movlw	0
  8809  0015F0  6E92               	movwf	3986,c	;volatile
  8810                           
  8811                           ;glcd.c: 377: PORTA = 0xFF;
  8812  0015F2  6880               	setf	3968,c	;volatile
  8813                           
  8814                           ;glcd.c: 378: glcd_WriteByte(0, 0x3F);
  8815  0015F4  0E3F               	movlw	63
  8816  0015F6  6E13               	movwf	glcd_WriteByte@data,c
  8817  0015F8  0E00               	movlw	0
  8818  0015FA  EC3F  F00E         	call	_glcd_WriteByte
  8819                           
  8820                           ;glcd.c: 379: glcd_WriteByte(1, 0x3F);
  8821  0015FE  0E3F               	movlw	63
  8822  001600  6E13               	movwf	glcd_WriteByte@data,c
  8823  001602  0E01               	movlw	1
  8824  001604  EC3F  F00E         	call	_glcd_WriteByte
  8825                           
  8826                           ;glcd.c: 380: }
  8827  001608  D00A               	goto	l96
  8828  00160A                     l95:
  8829                           
  8830                           ;glcd.c: 381: else
  8831                           ;glcd.c: 382: {
  8832                           ;glcd.c: 383: glcd_WriteByte(0, 0x3E);
  8833  00160A  0E3E               	movlw	62
  8834  00160C  6E13               	movwf	glcd_WriteByte@data,c
  8835  00160E  0E00               	movlw	0
  8836  001610  EC3F  F00E         	call	_glcd_WriteByte
  8837                           
  8838                           ;glcd.c: 384: glcd_WriteByte(1, 0x3E);
  8839  001614  0E3E               	movlw	62
  8840  001616  6E13               	movwf	glcd_WriteByte@data,c
  8841  001618  0E01               	movlw	1
  8842  00161A  EC3F  F00E         	call	_glcd_WriteByte
  8843  00161E                     l96:
  8844                           
  8845                           ;glcd.c: 385: }
  8846                           ;glcd.c: 387: glcd_FillScreen(0);
  8847  00161E  0E00               	movlw	0
  8848  001620  ECF9  F00C         	call	_glcd_FillScreen
  8849  001624  0012               	return		;funcret
  8850  001626                     __end_of_glcd_Init:
  8851                           	opt stack 0
  8852                           tblptru	equ	0xFF8
  8853                           tblptrh	equ	0xFF7
  8854                           tblptrl	equ	0xFF6
  8855                           tablat	equ	0xFF5
  8856                           prodh	equ	0xFF4
  8857                           prodl	equ	0xFF3
  8858                           intcon	equ	0xFF2
  8859                           postinc0	equ	0xFEE
  8860                           wreg	equ	0xFE8
  8861                           postdec1	equ	0xFE5
  8862                           plusw1	equ	0xFE3
  8863                           fsr1l	equ	0xFE1
  8864                           indf2	equ	0xFDF
  8865                           postinc2	equ	0xFDE
  8866                           postdec2	equ	0xFDD
  8867                           plusw2	equ	0xFDB
  8868                           fsr2h	equ	0xFDA
  8869                           fsr2l	equ	0xFD9
  8870                           status	equ	0xFD8
  8871                           
  8872 ;; *************** function _glcd_FillScreen *****************
  8873 ;; Defined at:
  8874 ;;		line 529 in file "glcd_library/glcd.c"
  8875 ;; Parameters:    Size  Location     Type
  8876 ;;  color           1    wreg     unsigned char 
  8877 ;; Auto vars:     Size  Location     Type
  8878 ;;  color           1   20[COMRAM] unsigned char 
  8879 ;;  i               1   22[COMRAM] unsigned char 
  8880 ;;  j               1   21[COMRAM] unsigned char 
  8881 ;; Return value:  Size  Location     Type
  8882 ;;                  1    wreg      void 
  8883 ;; Registers used:
  8884 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8885 ;; Tracked objects:
  8886 ;;		On entry : 0/0
  8887 ;;		On exit  : 0/0
  8888 ;;		Unchanged: 0/0
  8889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8890 ;;      Params:         0       0       0       0       0       0       0       0       0
  8891 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8892 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8893 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8894 ;;Total ram usage:        3 bytes
  8895 ;; Hardware stack levels used:    1
  8896 ;; Hardware stack levels required when called:    2
  8897 ;; This function calls:
  8898 ;;		_glcd_WriteByte
  8899 ;; This function is called by:
  8900 ;;		_glcd_Init
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           	psect	text29
  8905  0019F2                     __ptext29:
  8906                           	opt stack 0
  8907  0019F2                     _glcd_FillScreen:
  8908                           	opt stack 27
  8909                           
  8910                           ;incstack = 0
  8911                           ;glcd_FillScreen@color stored from wreg
  8912  0019F2  6E15               	movwf	glcd_FillScreen@color,c
  8913                           
  8914                           ;glcd.c: 531: unsigned char i, j;
  8915                           ;glcd.c: 533: for(i = 0; i < 8; i ++)
  8916  0019F4  0E00               	movlw	0
  8917  0019F6  6E17               	movwf	glcd_FillScreen@i,c
  8918  0019F8                     l2593:
  8919  0019F8  0E07               	movlw	7
  8920  0019FA  6417               	cpfsgt	glcd_FillScreen@i,c
  8921  0019FC  D001               	goto	l130
  8922  0019FE  0012               	return	
  8923  001A00                     l130:
  8924                           
  8925                           ;glcd.c: 534: {
  8926                           ;glcd.c: 535: LATBbits.LATB2=0;
  8927  001A00  948A               	bcf	3978,2,c	;volatile
  8928                           
  8929                           ;glcd.c: 536: glcd_WriteByte(0, 0b01000000);
  8930  001A02  0E40               	movlw	64
  8931  001A04  6E13               	movwf	glcd_WriteByte@data,c
  8932  001A06  0E00               	movlw	0
  8933  001A08  EC3F  F00E         	call	_glcd_WriteByte
  8934                           
  8935                           ;glcd.c: 537: glcd_WriteByte(1, 0b01000000);
  8936  001A0C  0E40               	movlw	64
  8937  001A0E  6E13               	movwf	glcd_WriteByte@data,c
  8938  001A10  0E01               	movlw	1
  8939  001A12  EC3F  F00E         	call	_glcd_WriteByte
  8940                           
  8941                           ;glcd.c: 538: glcd_WriteByte(0, i | 0b10111000);
  8942  001A16  5017               	movf	glcd_FillScreen@i,w,c
  8943  001A18  09B8               	iorlw	184
  8944  001A1A  6E13               	movwf	glcd_WriteByte@data,c
  8945  001A1C  0E00               	movlw	0
  8946  001A1E  EC3F  F00E         	call	_glcd_WriteByte
  8947                           
  8948                           ;glcd.c: 539: glcd_WriteByte(1, i | 0b10111000);
  8949  001A22  5017               	movf	glcd_FillScreen@i,w,c
  8950  001A24  09B8               	iorlw	184
  8951  001A26  6E13               	movwf	glcd_WriteByte@data,c
  8952  001A28  0E01               	movlw	1
  8953  001A2A  EC3F  F00E         	call	_glcd_WriteByte
  8954                           
  8955                           ;glcd.c: 540: LATBbits.LATB2=1;
  8956  001A2E  848A               	bsf	3978,2,c	;volatile
  8957                           
  8958                           ;glcd.c: 542: for(j = 0; j < 64; j++)
  8959  001A30  0E00               	movlw	0
  8960  001A32  6E16               	movwf	glcd_FillScreen@j,c
  8961  001A34                     l2607:
  8962  001A34  0E3F               	movlw	63
  8963  001A36  6416               	cpfsgt	glcd_FillScreen@j,c
  8964  001A38  D001               	goto	l132
  8965  001A3A  D010               	goto	u2650
  8966  001A3C                     l132:
  8967                           
  8968                           ;glcd.c: 543: {
  8969                           ;glcd.c: 544: glcd_WriteByte(0, 0xFF*color);
  8970  001A3C  5015               	movf	glcd_FillScreen@color,w,c
  8971  001A3E  0DFF               	mullw	255
  8972  001A40  CFF3 F013          	movff	prodl,glcd_WriteByte@data
  8973  001A44  0E00               	movlw	0
  8974  001A46  EC3F  F00E         	call	_glcd_WriteByte
  8975                           
  8976                           ;glcd.c: 545: glcd_WriteByte(1, 0xFF*color);
  8977  001A4A  5015               	movf	glcd_FillScreen@color,w,c
  8978  001A4C  0DFF               	mullw	255
  8979  001A4E  CFF3 F013          	movff	prodl,glcd_WriteByte@data
  8980  001A52  0E01               	movlw	1
  8981  001A54  EC3F  F00E         	call	_glcd_WriteByte
  8982  001A58  2A16               	incf	glcd_FillScreen@j,f,c
  8983  001A5A  D7EC               	goto	l2607
  8984  001A5C                     u2650:
  8985  001A5C  2A17               	incf	glcd_FillScreen@i,f,c
  8986  001A5E  D7CC               	goto	l2593
  8987  001A60                     __end_of_glcd_FillScreen:
  8988                           	opt stack 0
  8989                           tblptru	equ	0xFF8
  8990                           tblptrh	equ	0xFF7
  8991                           tblptrl	equ	0xFF6
  8992                           tablat	equ	0xFF5
  8993                           prodh	equ	0xFF4
  8994                           prodl	equ	0xFF3
  8995                           intcon	equ	0xFF2
  8996                           postinc0	equ	0xFEE
  8997                           wreg	equ	0xFE8
  8998                           postdec1	equ	0xFE5
  8999                           plusw1	equ	0xFE3
  9000                           fsr1l	equ	0xFE1
  9001                           indf2	equ	0xFDF
  9002                           postinc2	equ	0xFDE
  9003                           postdec2	equ	0xFDD
  9004                           plusw2	equ	0xFDB
  9005                           fsr2h	equ	0xFDA
  9006                           fsr2l	equ	0xFD9
  9007                           status	equ	0xFD8
  9008                           
  9009 ;; *************** function _glcd_WriteByte *****************
  9010 ;; Defined at:
  9011 ;;		line 394 in file "glcd_library/glcd.c"
  9012 ;; Parameters:    Size  Location     Type
  9013 ;;  side            1    wreg     unsigned char 
  9014 ;;  data            1   18[COMRAM] unsigned char 
  9015 ;; Auto vars:     Size  Location     Type
  9016 ;;  side            1   19[COMRAM] unsigned char 
  9017 ;; Return value:  Size  Location     Type
  9018 ;;                  1    wreg      void 
  9019 ;; Registers used:
  9020 ;;		wreg, status,2
  9021 ;; Tracked objects:
  9022 ;;		On entry : 0/0
  9023 ;;		On exit  : 0/0
  9024 ;;		Unchanged: 0/0
  9025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9026 ;;      Params:         1       0       0       0       0       0       0       0       0
  9027 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9028 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9029 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9030 ;;Total ram usage:        2 bytes
  9031 ;; Hardware stack levels used:    1
  9032 ;; Hardware stack levels required when called:    1
  9033 ;; This function calls:
  9034 ;;		Nothing
  9035 ;; This function is called by:
  9036 ;;		_glcd_Init
  9037 ;;		_glcd_FillScreen
  9038 ;;		_glcd_SetCursor
  9039 ;;		_glcd_WriteChar8X8
  9040 ;;		_glcd_WriteChar3x6
  9041 ;;		_glcd_PlotPixel
  9042 ;;		_glcd_Image
  9043 ;; This function uses a non-reentrant model
  9044 ;;
  9045                           
  9046                           	psect	text30
  9047  001C7E                     __ptext30:
  9048                           	opt stack 0
  9049  001C7E                     _glcd_WriteByte:
  9050                           	opt stack 26
  9051                           
  9052                           ;incstack = 0
  9053                           ;glcd_WriteByte@side stored from wreg
  9054  001C7E  6E14               	movwf	glcd_WriteByte@side,c
  9055                           
  9056                           ;glcd.c: 396: if(side)
  9057  001C80  5014               	movf	glcd_WriteByte@side,w,c
  9058  001C82  B4D8               	btfsc	status,2,c
  9059  001C84  D003               	goto	l100
  9060                           
  9061                           ;glcd.c: 397: {
  9062                           ;glcd.c: 398: LATBbits.LATB0 = 1;
  9063  001C86  808A               	bsf	3978,0,c	;volatile
  9064                           
  9065                           ;glcd.c: 399: LATBbits.LATB1 = 0;
  9066  001C88  928A               	bcf	3978,1,c	;volatile
  9067                           
  9068                           ;glcd.c: 400: }
  9069  001C8A  D002               	goto	l101
  9070  001C8C                     l100:
  9071                           
  9072                           ;glcd.c: 401: else
  9073                           ;glcd.c: 402: {
  9074                           ;glcd.c: 403: LATBbits.LATB1 = 0;
  9075  001C8C  928A               	bcf	3978,1,c	;volatile
  9076                           
  9077                           ;glcd.c: 404: LATBbits.LATB1 = 1;
  9078  001C8E  828A               	bsf	3978,1,c	;volatile
  9079  001C90                     l101:
  9080                           
  9081                           ;glcd.c: 405: }
  9082                           ;glcd.c: 407: TRISD=0;
  9083  001C90  0E00               	movlw	0
  9084  001C92  6E95               	movwf	3989,c	;volatile
  9085                           
  9086                           ;glcd.c: 408: LATBbits.LATB3=0;
  9087  001C94  968A               	bcf	3978,3,c	;volatile
  9088                           
  9089                           ;glcd.c: 410: LATD = data;
  9090  001C96  C013  FF8C         	movff	glcd_WriteByte@data,3980	;volatile
  9091                           
  9092                           ;glcd.c: 414: LATBbits.LATB4 = 1;
  9093  001C9A  888A               	bsf	3978,4,c	;volatile
  9094                           
  9095                           ;glcd.c: 416: _delay((unsigned long)((1)*(100000/4000.0)));
  9096  001C9C  0E08               	movlw	8
  9097  001C9E                     u4807:
  9098  001C9E  2EE8               	decfsz	wreg,f,c
  9099  001CA0  D7FE               	bra	u4807
  9100  001CA2  F000               	nop	
  9101                           
  9102                           ;glcd.c: 417: LATBbits.LATB4 = 0;
  9103  001CA4  988A               	bcf	3978,4,c	;volatile
  9104                           
  9105                           ;glcd.c: 419: _delay((unsigned long)((1)*(100000/4000.0)));
  9106  001CA6  0E08               	movlw	8
  9107  001CA8                     u4817:
  9108  001CA8  2EE8               	decfsz	wreg,f,c
  9109  001CAA  D7FE               	bra	u4817
  9110  001CAC  F000               	nop	
  9111                           
  9112                           ;glcd.c: 422: LATBbits.LATB0 = 0;
  9113  001CAE  908A               	bcf	3978,0,c	;volatile
  9114                           
  9115                           ;glcd.c: 423: LATBbits.LATB1 = 0;
  9116  001CB0  928A               	bcf	3978,1,c	;volatile
  9117  001CB2  0012               	return		;funcret
  9118  001CB4                     __end_of_glcd_WriteByte:
  9119                           	opt stack 0
  9120                           tblptru	equ	0xFF8
  9121                           tblptrh	equ	0xFF7
  9122                           tblptrl	equ	0xFF6
  9123                           tablat	equ	0xFF5
  9124                           prodh	equ	0xFF4
  9125                           prodl	equ	0xFF3
  9126                           intcon	equ	0xFF2
  9127                           postinc0	equ	0xFEE
  9128                           wreg	equ	0xFE8
  9129                           postdec1	equ	0xFE5
  9130                           plusw1	equ	0xFE3
  9131                           fsr1l	equ	0xFE1
  9132                           indf2	equ	0xFDF
  9133                           postinc2	equ	0xFDE
  9134                           postdec2	equ	0xFDD
  9135                           plusw2	equ	0xFDB
  9136                           fsr2h	equ	0xFDA
  9137                           fsr2l	equ	0xFD9
  9138                           status	equ	0xFD8
  9139                           
  9140 ;; *************** function _ISR *****************
  9141 ;; Defined at:
  9142 ;;		line 11 in file "glcd_library/TS.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;		None
  9145 ;; Auto vars:     Size  Location     Type
  9146 ;;		None
  9147 ;; Return value:  Size  Location     Type
  9148 ;;                  1    wreg      void 
  9149 ;; Registers used:
  9150 ;;		None
  9151 ;; Tracked objects:
  9152 ;;		On entry : 0/0
  9153 ;;		On exit  : 0/0
  9154 ;;		Unchanged: 0/0
  9155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9156 ;;      Params:         0       0       0       0       0       0       0       0       0
  9157 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9158 ;;      Temps:         18       0       0       0       0       0       0       0       0
  9159 ;;      Totals:        18       0       0       0       0       0       0       0       0
  9160 ;;Total ram usage:       18 bytes
  9161 ;; Hardware stack levels used:    1
  9162 ;; This function calls:
  9163 ;;		Nothing
  9164 ;; This function is called by:
  9165 ;;		Interrupt level 2
  9166 ;; This function uses a non-reentrant model
  9167 ;;
  9168                           
  9169                           	psect	intcode
  9170  000008                     __pintcode:
  9171                           	opt stack 0
  9172  000008                     _ISR:
  9173                           	opt stack 26
  9174                           
  9175                           ;incstack = 0
  9176  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9177  00000A  ED6A  F00B         	call	int_func,f	;refresh shadow registers
  9178                           tblptru	equ	0xFF8
  9179                           tblptrh	equ	0xFF7
  9180                           tblptrl	equ	0xFF6
  9181                           tablat	equ	0xFF5
  9182                           prodh	equ	0xFF4
  9183                           prodl	equ	0xFF3
  9184                           intcon	equ	0xFF2
  9185                           postinc0	equ	0xFEE
  9186                           wreg	equ	0xFE8
  9187                           postdec1	equ	0xFE5
  9188                           plusw1	equ	0xFE3
  9189                           fsr1l	equ	0xFE1
  9190                           indf2	equ	0xFDF
  9191                           postinc2	equ	0xFDE
  9192                           postdec2	equ	0xFDD
  9193                           plusw2	equ	0xFDB
  9194                           fsr2h	equ	0xFDA
  9195                           fsr2l	equ	0xFD9
  9196                           status	equ	0xFD8
  9197                           
  9198                           	psect	intcode_body
  9199  0016D4                     __pintcode_body:
  9200                           	opt stack 26
  9201  0016D4                     int_func:
  9202                           	opt stack 26
  9203  0016D4  0006               	pop		; remove dummy address from shadow register refresh
  9204  0016D6  CFFA F001          	movff	pclath,??_ISR
  9205  0016DA  CFFB F002          	movff	pclatu,??_ISR+1
  9206  0016DE  CFE9 F003          	movff	fsr0l,??_ISR+2
  9207  0016E2  CFEA F004          	movff	fsr0h,??_ISR+3
  9208  0016E6  CFE1 F005          	movff	fsr1l,??_ISR+4
  9209  0016EA  CFE2 F006          	movff	fsr1h,??_ISR+5
  9210  0016EE  CFD9 F007          	movff	fsr2l,??_ISR+6
  9211  0016F2  CFDA F008          	movff	fsr2h,??_ISR+7
  9212  0016F6  CFF3 F009          	movff	prodl,??_ISR+8
  9213  0016FA  CFF4 F00A          	movff	prodh,??_ISR+9
  9214  0016FE  CFF6 F00B          	movff	tblptrl,??_ISR+10
  9215  001702  CFF7 F00C          	movff	tblptrh,??_ISR+11
  9216  001706  CFF8 F00D          	movff	tblptru,??_ISR+12
  9217  00170A  CFF5 F00E          	movff	tablat,??_ISR+13
  9218  00170E  C04D  F00F         	movff	btemp,??_ISR+14
  9219  001712  C04E  F010         	movff	btemp+1,??_ISR+15
  9220  001716  C04F  F011         	movff	btemp+2,??_ISR+16
  9221  00171A  C050  F012         	movff	btemp+3,??_ISR+17
  9222                           
  9223                           ;TS.c: 13: if(PIR1bits.ADIF)
  9224  00171E  BC9E               	btfsc	3998,6,c	;volatile
  9225                           
  9226                           ;TS.c: 14: {
  9227                           ;TS.c: 15: PIR1bits.ADIF = 0;
  9228  001720  9C9E               	bcf	3998,6,c	;volatile
  9229  001722  C012  F050         	movff	??_ISR+17,btemp+3
  9230  001726  C011  F04F         	movff	??_ISR+16,btemp+2
  9231  00172A  C010  F04E         	movff	??_ISR+15,btemp+1
  9232  00172E  C00F  F04D         	movff	??_ISR+14,btemp
  9233  001732  C00E  FFF5         	movff	??_ISR+13,tablat
  9234  001736  C00D  FFF8         	movff	??_ISR+12,tblptru
  9235  00173A  C00C  FFF7         	movff	??_ISR+11,tblptrh
  9236  00173E  C00B  FFF6         	movff	??_ISR+10,tblptrl
  9237  001742  C00A  FFF4         	movff	??_ISR+9,prodh
  9238  001746  C009  FFF3         	movff	??_ISR+8,prodl
  9239  00174A  C008  FFDA         	movff	??_ISR+7,fsr2h
  9240  00174E  C007  FFD9         	movff	??_ISR+6,fsr2l
  9241  001752  C006  FFE2         	movff	??_ISR+5,fsr1h
  9242  001756  C005  FFE1         	movff	??_ISR+4,fsr1l
  9243  00175A  C004  FFEA         	movff	??_ISR+3,fsr0h
  9244  00175E  C003  FFE9         	movff	??_ISR+2,fsr0l
  9245  001762  C002  FFFB         	movff	??_ISR+1,pclatu
  9246  001766  C001  FFFA         	movff	??_ISR,pclath
  9247  00176A  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9248  00176C  0011               	retfie		f
  9249  00176E                     __end_of_ISR:
  9250                           	opt stack 0
  9251                           pclatu	equ	0xFFB
  9252                           pclath	equ	0xFFA
  9253                           tblptru	equ	0xFF8
  9254                           tblptrh	equ	0xFF7
  9255                           tblptrl	equ	0xFF6
  9256                           tablat	equ	0xFF5
  9257                           prodh	equ	0xFF4
  9258                           prodl	equ	0xFF3
  9259                           intcon	equ	0xFF2
  9260                           postinc0	equ	0xFEE
  9261                           fsr0h	equ	0xFEA
  9262                           fsr0l	equ	0xFE9
  9263                           wreg	equ	0xFE8
  9264                           postdec1	equ	0xFE5
  9265                           plusw1	equ	0xFE3
  9266                           fsr1h	equ	0xFE2
  9267                           fsr1l	equ	0xFE1
  9268                           indf2	equ	0xFDF
  9269                           postinc2	equ	0xFDE
  9270                           postdec2	equ	0xFDD
  9271                           plusw2	equ	0xFDB
  9272                           fsr2h	equ	0xFDA
  9273                           fsr2l	equ	0xFD9
  9274                           status	equ	0xFD8
  9275                           pclatu	equ	0xFFB
  9276                           pclath	equ	0xFFA
  9277                           tblptru	equ	0xFF8
  9278                           tblptrh	equ	0xFF7
  9279                           tblptrl	equ	0xFF6
  9280                           tablat	equ	0xFF5
  9281                           prodh	equ	0xFF4
  9282                           prodl	equ	0xFF3
  9283                           intcon	equ	0xFF2
  9284                           postinc0	equ	0xFEE
  9285                           fsr0h	equ	0xFEA
  9286                           fsr0l	equ	0xFE9
  9287                           wreg	equ	0xFE8
  9288                           postdec1	equ	0xFE5
  9289                           plusw1	equ	0xFE3
  9290                           fsr1h	equ	0xFE2
  9291                           fsr1l	equ	0xFE1
  9292                           indf2	equ	0xFDF
  9293                           postinc2	equ	0xFDE
  9294                           postdec2	equ	0xFDD
  9295                           plusw2	equ	0xFDB
  9296                           fsr2h	equ	0xFDA
  9297                           fsr2l	equ	0xFD9
  9298                           status	equ	0xFD8
  9299                           
  9300                           	psect	rparam
  9301  0000                     pclatu	equ	0xFFB
  9302                           pclath	equ	0xFFA
  9303                           tblptru	equ	0xFF8
  9304                           tblptrh	equ	0xFF7
  9305                           tblptrl	equ	0xFF6
  9306                           tablat	equ	0xFF5
  9307                           prodh	equ	0xFF4
  9308                           prodl	equ	0xFF3
  9309                           intcon	equ	0xFF2
  9310                           postinc0	equ	0xFEE
  9311                           fsr0h	equ	0xFEA
  9312                           fsr0l	equ	0xFE9
  9313                           wreg	equ	0xFE8
  9314                           postdec1	equ	0xFE5
  9315                           plusw1	equ	0xFE3
  9316                           fsr1h	equ	0xFE2
  9317                           fsr1l	equ	0xFE1
  9318                           indf2	equ	0xFDF
  9319                           postinc2	equ	0xFDE
  9320                           postdec2	equ	0xFDD
  9321                           plusw2	equ	0xFDB
  9322                           fsr2h	equ	0xFDA
  9323                           fsr2l	equ	0xFD9
  9324                           status	equ	0xFD8
  9325                           
  9326                           	psect	temp
  9327  00004D                     btemp:
  9328                           	opt stack 0
  9329  00004D                     	ds	1
  9330  0000                     int$flags	set	btemp
  9331  0000                     wtemp6	set	btemp+1
  9332                           pclatu	equ	0xFFB
  9333                           pclath	equ	0xFFA
  9334                           tblptru	equ	0xFF8
  9335                           tblptrh	equ	0xFF7
  9336                           tblptrl	equ	0xFF6
  9337                           tablat	equ	0xFF5
  9338                           prodh	equ	0xFF4
  9339                           prodl	equ	0xFF3
  9340                           intcon	equ	0xFF2
  9341                           postinc0	equ	0xFEE
  9342                           fsr0h	equ	0xFEA
  9343                           fsr0l	equ	0xFE9
  9344                           wreg	equ	0xFE8
  9345                           postdec1	equ	0xFE5
  9346                           plusw1	equ	0xFE3
  9347                           fsr1h	equ	0xFE2
  9348                           fsr1l	equ	0xFE1
  9349                           indf2	equ	0xFDF
  9350                           postinc2	equ	0xFDE
  9351                           postdec2	equ	0xFDD
  9352                           plusw2	equ	0xFDB
  9353                           fsr2h	equ	0xFDA
  9354                           fsr2l	equ	0xFD9
  9355                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    2361
    Data        20
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     74      76
    BANK0           160     65      85
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@str(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    glcd_text_write@str	PTR const unsigned char  size(2) Largest target is 20
		 -> main@str(BANK0[20]), 

    glcd_WriteString@str	PTR const unsigned char  size(2) Largest target is 20
		 -> main@str(BANK0[20]), 


Critical Paths under _main in COMRAM

    _sprintf->___ftadd
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _readX->___awtoft
    ___awtoft->___awdiv
    ___awdiv->___awmod
    _glcd_text_write->_glcd_WriteString
    _glcd_WriteString->_glcd_WriteChar8X8
    _glcd_WriteChar8X8->_glcd_WriteByte
    _glcd_WriteChar3x6->_glcd_WriteByte
    _glcd_SetCursor->_glcd_WriteByte
    _glcd_Init->_glcd_FillScreen
    _glcd_FillScreen->_glcd_WriteByte

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    ___ftsub->___ftadd

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   78774
                                             72 COMRAM     2     2      0
                                             45 BANK0     20    20      0
                          _glcd_Init
                     _glcd_SetCursor
                    _glcd_text_write
                              _readX
                           _setupADC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   55901
                                              9 BANK0     36    29      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _readX (ARG)
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   13269
                                             53 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   12990
                                             53 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2591
                                             32 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6041
                                             38 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                             18 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                             18 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3085
                                             26 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                             18 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     641
                                             60 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5034
                                              3 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4618
                                             63 COMRAM     9     3      6
                                              0 BANK0      3     3      0
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                             18 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                             18 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readX                                                7     4      3    5516
                                             36 COMRAM     7     4      3
                            _R0Value
                            ___awdiv
                           ___awtoft
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3206
                                             32 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2893
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2276
                                             24 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _R0Value                                              2     0      2       0
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _glcd_text_write                                      4     0      4    9246
                                             33 COMRAM     4     0      4
                     _glcd_SetCursor
                   _glcd_WriteString
 ---------------------------------------------------------------------------------
 (2) _glcd_WriteString                                     4     0      4    6123
                                             29 COMRAM     4     0      4
                  _glcd_WriteChar3x6
                  _glcd_WriteChar8X8
 ---------------------------------------------------------------------------------
 (3) _glcd_WriteChar8X8                                    9     8      1    2892
                                             20 COMRAM     9     8      1
                     _glcd_WriteByte
 ---------------------------------------------------------------------------------
 (3) _glcd_WriteChar3x6                                    7     6      1    2870
                                             20 COMRAM     7     6      1
                     _glcd_WriteByte
 ---------------------------------------------------------------------------------
 (2) _glcd_SetCursor                                       3     2      1    2829
                                             20 COMRAM     3     2      1
                     _glcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) _glcd_Init                                            5     5      0    5154
                                             23 COMRAM     2     2      0
                    _glcd_FillScreen
                     _glcd_WriteByte
 ---------------------------------------------------------------------------------
 (2) _glcd_FillScreen                                      3     3      0    2656
                                             20 COMRAM     3     3      0
                     _glcd_WriteByte
 ---------------------------------------------------------------------------------
 (4) _glcd_WriteByte                                       2     1      1    2476
                                             18 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _glcd_Init
     _glcd_FillScreen
       _glcd_WriteByte
     _glcd_WriteByte
   _glcd_SetCursor
     _glcd_WriteByte
   _glcd_text_write
     _glcd_SetCursor
       _glcd_WriteByte
     _glcd_WriteString
       _glcd_WriteChar3x6
         _glcd_WriteByte
       _glcd_WriteChar8X8
         _glcd_WriteByte
   _readX
     _R0Value
     ___awdiv
       ___awmod (ARG)
     ___awtoft
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
   _setupADC
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _readX (ARG)
       _R0Value
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     41      55       5       53.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4A      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A1      20        0.0%
DATA                 0      0      A1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Nov 21 12:44:51 2021

                         _x 004C                           _y 004B                          l49 192A  
                        l95 160A                          l96 161E                ___awdiv@sign 001E  
       ___wmul@multiplicand 0023                ___ftadd@exp1 0062                ___ftadd@exp2 0061  
              ___ftadd@sign 0060                         l100 1C8C                         l101 1C90  
                       l130 1A00                         l132 1A3C                         l300 04F8  
                       l141 1BE6                         l301 04FC                         l150 150A  
                       l222 1D86                         l302 052C                         l151 1536  
                       l303 0664                         l152 155C                         l144 14B2  
                       l304 057E                         l137 1BD0                         l161 141E  
                       l162 145A                         l146 14C4                         l250 0D10  
                       l306 068C                         l163 1490                         l155 13CE  
                       l147 14C8                         l307 0672                         l148 14E0  
                       l500 19DA                         l260 0ADA                         l157 13E0  
                       l501 19E8                         l253 08FE                         l309 06CC  
                       l158 13E4                         l166 1C36                         l254 082A  
                       l270 0070                         l159 13F4                         l167 1C06  
                       l511 109E                         l247 0C44                         l168 1C20  
                       l600 0ED6                         l272 069A                         l280 0328  
                       l264 0020                         l169 1C32                         l601 0EF4  
                       l513 10BC                         l257 08DA                         l273 00CA  
                       l265 0038                         l602 0F28                         l514 10FE  
                       l258 0A2A                         l266 004A                         l507 1C5A  
                       l523 1190                         l515 112E                         l283 02CA  
                       l275 0178                         l700 18E4                         l524 1184  
                       l276 01E0                         l701 18F2                         l517 116C  
                       l621 1044                         l269 0044                         l550 16A0  
                       l710 1AA6                         l518 115C                         l622 1034  
                       l294 049E                         l278 0206                         l543 164E  
                       l711 1AB4                         l615 0F7A                         l295 0406  
                       l279 024C                         l480 1822                         l544 1644  
                       l632 179E                         l633 17CE                         l617 0FA6  
                       l641 1314                         l297 04C6                         l289 038E  
                       l482 1840                         l546 1682                         l650 1D22  
                       l706 1A7E                         l618 0FE0                         l642 1346  
                       l298 04AC                         l483 1838                         l547 166C  
                       l707 1A72                         l627 1068                         l619 1008  
                       l643 1356                         l660 11D8                         l628 105C  
                       l492 1996                         l549 16AA                         l581 0DF6  
                       l717 1AD8                         l493 19A2                         l645 136E  
                       l486 1860                         l582 0DFE                         l574 0DB2  
                       l662 1262                         l718 1ACC                         l646 137E  
                       l487 186A                         l479 1812                         l583 0E6A  
                       l671 12B2                         l663 124E                         l495 19B8  
                       l639 12EC                         l488 1878                         l656 1B92  
                       l496 19B0                         l578 0DE8                         l499 19D0  
                       l588 0E5C                         l668 128C                         l597 0EAC  
                       l589 0E50                         l669 127C                         l598 0EA0  
                       l696 18B0                         l697 18A4                         _ISR 0008  
              ___awmod@sign 0018                         wreg 000FE8                __CFG_FOSC$HS 000000  
              __CFG_LVP$OFF 000000                        ?_ISR 0001                __CFG_WDT$OFF 000000  
                      l2201 17FA                        l2335 13EC                        l2283 14D8  
                      l2607 1A34                        l2593 19F8                        l3809 04AC  
                      l3761 02A4                        l3753 024C             __end_of_R0Value 1D94  
                      l3781 0394                        l3857 06C6                        STR_1 7FFC  
                      u2200 1496                        u2140 1562                        u3110 1A82  
                      u4000 16B4                        _LATD 000F8C                        u4100 0DDA  
                      u2510 1844                        u4031 0D60                        u4200 0EB8  
                      u3080 18B4                        u4041 0D76                        u4130 0E26  
                      u4070 0DA4                        u4241 12D4                        u2650 1A5C  
                      u4170 0E76                        u4410 11F6                        u2570 19BC  
                      u4261 12FC                        u4415 11EE                        u2920 1196  
                      u4450 1296                        u2850 106E                        u4610 02A4  
                      u4530 0110                        u2771 0F5E                        u4391 11B8  
                      u2791 0F8A                        u4535 0104                        u4650 03DA  
                      u4570 021C                        u4740 06E8                        u4580 0262  
                      u4485 1B40                        u4807 1C9E                        u4751 1922  
                      u3960 1636                        u4680 04DA                        u4817 1CA8  
                      u4690 04F0                        u4777 1934                        u4787 1590  
                      u4797 15A6            ??_glcd_WriteByte 0014                        _main 1904  
              ___ftpack@arg 0013                ___ftpack@exp 0016                        fsr0h 000FEA  
                      fsr1h 000FE2                        fsr2h 000FDA                        fsr0l 000FE9  
                      indf2 000FDF                        fsr1l 000FE1                        fsr2l 000FD9  
                      btemp 004D                        prodh 000FF4                        prodl 000FF3  
                      start 000E                _sprintf$1183 0076                ___ftmul@cntr 0034  
           __end_of_Font3x6 7F86                ___param_bank 000000                ___ftmul@sign 0035  
           __end_of_Font8x8 7EC3                       ??_ISR 0001                ___fttol@exp1 0065  
              ___fttol@lval 0061          glcd_WriteChar8X8@i 001C          glcd_WriteChar3x6@i 001A  
                     ?_main 0001             __end_of___awdiv 1882                       _ADRES 000FC3  
           __end_of___ftadd 0F4E             __end_of___awmod 19F2             __end_of___ftneg 1D30  
           __end_of___lldiv 1904             __end_of___ftmul 13B8             ___awdiv@divisor 001B  
           __end_of___llmod 1AC6             __end_of___ftsub 1BBC             __end_of___fttol 12C4  
           ___awdiv@counter 001D                       _PORTA 000F80                       _PORTB 000F81  
                     _PORTD 000F83                       _TRISA 000F92                       _TRISB 000F93  
                     _TRISD 000F95                ___lltoft@exp 0023               ___awtoft@sign 0024  
           __end_of_dpowers 7FAE                       _readX 1B22                       _scale 06F6  
             ___ftpack@sign 0017                       pclath 000FFA                       tablat 000FF5  
                     plusw1 000FE3                       plusw2 000FDB                       status 000FD8  
                     wtemp6 004E             __end_of_sprintf 06F6          glcd_WriteByte@data 0013  
           __initialization 1CB4          glcd_WriteByte@side 0014                __end_of_main 1982  
                    ??_main 0049               ___fttol@sign1 0060               __activetblptr 000002  
           _glcd_FillScreen 19F2        __size_of__tdiv_to_l_ 0132         glcd_WriteChar8X8@ch 001A  
                 ??_R0Value 0015         glcd_WriteChar3x6@ch 0019                      _ADCON0 000FC2  
                    _ADCON1 000FC1                      ?_readX 0025            ___llmod@dividend 0013  
                    ?_scale 0036            ___awdiv@dividend 0019            __end_of___awtoft 1C7E  
          __end_of___ftpack 16D4            __end_of___lltoft 1B22    __size_of_glcd_text_write 0020  
         ?_glcd_WriteString 001E            __end_of__powers_ 7FD5                      ___ftge 176E  
                    ___wmul 1CE6                   ??___awdiv 001D                   ??___ftadd 0046  
                 ??___awmod 0017          ??_glcd_WriteString 0022                   ??___ftneg 0016  
                 ??___lldiv 001B                   ??___ftmul 002D                   ??___llmod 001B  
                 ??___ftsub 0049                   ??___fttol 0041                      _fround 0AFE  
          ___awdiv@quotient 001F             ___awmod@divisor 0015             ___awmod@counter 0017  
     ___ftmul@f3_as_product 0031            __end_of_setupADC 1D6C                __mediumconst 76C2  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                 ??_sprintf 0070                  __accesstop 0060     __end_of__initialization 1CD8  
                ___ftadd@f1 0040                  ___ftadd@f2 0043                  ___ftge@ff1 0013  
                ___ftge@ff2 0016               ___rparam_used 000001                  ___ftneg@f1 0013  
                ___awtoft@c 0021                  ___ftmul@f1 0027                  ___ftmul@f2 002A  
                ___ftsub@f1 0063                  ___ftsub@f2 0066                  ___fttol@f1 003D  
            __pcstackCOMRAM 0001                __pidataBANK0 1D6C     __end_of_glcd_FillScreen 1A60  
                ___lltoft@c 001B               __end_of_readX 1B70               __end_of_scale 0AFE  
    glcd_WriteChar8X8@color 0015                  __div_to_l_ 1080          __size_of_glcd_Init 00BE  
           __div_to_l_@exp1 001E             __div_to_l_@cntr 001D                     ??_readX 0028  
                   ??_scale 0039             __div_to_l_@quot 0019        glcd_WriteChar8X8@chr 0018  
             __div_to_l_@f1 0013               __div_to_l_@f2 0016           ??_glcd_text_write 0026  
    glcd_WriteChar3x6@color 0015                     ?___ftge 0013                     ?___wmul 0021  
                   ?_fround 0036                   ?___awtoft 0021                   ?___ftpack 0013  
                 ?___lltoft 001B           _glcd_WriteChar8X8 149C           _glcd_WriteChar3x6 13B8  
                   _R0Value 1D80          ?_glcd_WriteChar8X8 0015          ?_glcd_WriteChar3x6 0015  
       ??_glcd_WriteChar8X8 0016         ??_glcd_WriteChar3x6 0016                     _Font3x6 7EC3  
                   _Font8x8 76C3           __end_of_glcd_Init 1626           __end_of__npowers_ 7FFC  
                   __Hparam 0000                  _scale$1182 0039                     __Lparam 0000  
                 ?_setupADC 0001             __size_of___ftge 0090                     ___awdiv 17FE  
                   ___ftadd 0D50                     ___awmod 1982                     ___ftneg 1D0C  
                   ___lldiv 1882             __size_of___wmul 0026                     ___ftmul 12C4  
                   ___llmod 1A60                     ___ftsub 1B70                     ___fttol 11A8  
          ?_glcd_FillScreen 0001         glcd_WriteString@str 001E                     __pcinit 1CB4  
                ??___awtoft 0024                  ??___ftpack 0018             __size_of_fround 0252  
                   __ramtop 0800   __end_of_glcd_WriteChar8X8 1568                  ??___lltoft 001F  
 __end_of_glcd_WriteChar3x6 149C                     __ptext0 1904                     __ptext1 0012  
                   __ptext2 06F6                     __ptext3 0AFE                     __ptext4 1CE6  
                   __ptext5 12C4                     __ptext6 1982                     __ptext7 0F4E  
                   __ptext8 1080                     __ptext9 1AC6                __size_of_ISR 1766  
               ?__div_to_l_ 0013                     _dpowers 7F86     __size_of_glcd_SetCursor 0048  
          ___awmod@dividend 0013                     _sprintf 0012                     main@str 008D  
            __pintcode_body 16D4        end_of_initialization 1CD8               __Lmediumconst 76C2  
                   int_func 16D4             ___lldiv@divisor 0017            glcd_text_write@x 0024  
          glcd_text_write@y 0025             ___lldiv@counter 001F                  ??_setupADC 0013  
                   postdec1 000FE5                     postdec2 000FDD                     postinc0 000FEE  
                   postinc2 000FDE     __size_of_glcd_WriteByte 0036              __tdiv_to_l_@f1 0013  
            __tdiv_to_l_@f2 0016               ??__tdiv_to_l_ 0019                   _PORTEbits 000F84  
 __size_of_glcd_WriteString 0042         __size_of__div_to_l_ 0128                 ___ftmul@exp 0030  
            __end_of___ftge 17FE              __end_of___wmul 1D0C  __size_of_glcd_WriteChar8X8 00CC  
__size_of_glcd_WriteChar3x6 00E4              __end_of_fround 0D50         start_initialization 1CB4  
               __end_of_ISR 176E         __end_of__tdiv_to_l_ 1080             _glcd_text_write 1D30  
        glcd_SetCursor@side 0016          glcd_SetCursor@xpos 0017          glcd_SetCursor@ypos 0015  
           ___llmod@divisor 0017             ___llmod@counter 001B                  readX@value 002A  
                  ??___ftge 0019                    ??___wmul 0025        glcd_FillScreen@color 0015  
               __pdataBANK0 00A1                    ??_fround 0039               sprintf@tmpval 0085  
            _glcd_SetCursor 1BBC                  fround@prec 003F           __size_of___awtoft 0038  
         __size_of___ftpack 00AE           __size_of___lltoft 005C                 __pbssCOMRAM 004B  
                  ?_R0Value 0013               __pcstackBANK0 0060       glcd_WriteString@color 0021  
     glcd_WriteChar8X8@side 001D       glcd_WriteChar8X8@xpos 001B                 sprintf@flag 007B  
               sprintf@fval 0089                 sprintf@prec 007D       glcd_WriteChar3x6@side 001B  
     glcd_WriteChar3x6@xpos 0018                   __pintcode 0008               __pmediumconst 76C2  
            _glcd_WriteByte 1C7E                    ?___awdiv 0019                    ?___ftadd 0040  
                  ?___awmod 0013                    ?___ftneg 0013                    ?___lldiv 0013  
                 _glcd_Init 1568                    ?___ftmul 0027                    ?___llmod 0013  
                  ?___ftsub 0063                   __npowers_ 7FD5                    ?___fttol 003D  
         __size_of_setupADC 001C      __end_of_glcd_SetCursor 1C04                 __tdiv_to_l_ 0F4E  
              ??__div_to_l_ 0019     __end_of_glcd_text_write 1D50            _glcd_WriteString 1C04  
                  ?_sprintf 0069              __size_of_readX 004E              __size_of_scale 0408  
            ___wmul@product 0025                    _LATBbits 000F8A                    _PIE1bits 000F9D  
    __end_of_glcd_WriteByte 1CB4                    _PIR1bits 000F9E          __end_of__div_to_l_ 11A8  
                 main@F4119 00A1                  ?_glcd_Init 0001             ?_glcd_SetCursor 0015  
                _ADCON0bits 000FC2                  _ADCON2bits 000FC0           ___wmul@multiplier 0021  
  __size_of_glcd_FillScreen 006E            __size_of_R0Value 0014                   copy_data0 1CC8  
          glcd_FillScreen@i 0017            glcd_FillScreen@j 0016                    __Hrparam 0000  
           ?_glcd_WriteByte 0013                    __Lrparam 0000            __size_of___awdiv 0084  
          __size_of___ftadd 01FE            __size_of___awmod 0070            __size_of___ftneg 0024  
          __size_of___lldiv 0082            __size_of___ftmul 00F4            __size_of___llmod 0066  
          __size_of___ftsub 004C            __size_of___fttol 011C                    ___awtoft 1C46  
                  ___ftpack 1626                 _fround$1180 003C                 _fround$1181 0039  
                  ___lltoft 1AC6        glcd_WriteString@font 0020                  sprintf@exp 0083  
                sprintf@val 007F            ?_glcd_text_write 0022                    __ptext10 1A60  
                  __ptext11 1882                    __ptext20 1626                    __ptext12 11A8  
                  __ptext21 17FE                    __ptext13 1B70                    __ptext30 1C7E  
                  __ptext22 1D80                    __ptext14 0D50                    __ptext23 1D30  
                  __ptext15 1D0C                    __ptext24 1C04                    __ptext16 176E  
                  __ptext25 149C                    __ptext17 1D50                    __ptext26 13B8  
                  __ptext18 1B22                    __ptext27 1BBC                    __ptext19 1C46  
                  __ptext28 1568                    __ptext29 19F2                    __powers_ 7FAE  
          __size_of_sprintf 06E4          glcd_text_write@str 0022               __size_of_main 007E  
                  _setupADC 1D50               glcd_Init@mode 0019                    int$flags 004D  
               ??_glcd_Init 0018                  _INTCONbits 000FF2                    scale@scl 003C  
                  intlevel2 0000                   sprintf@ap 0079           ??_glcd_FillScreen 0015  
          __tdiv_to_l_@exp1 0021            __tdiv_to_l_@cntr 0020                   sprintf@sp 0069  
          __tdiv_to_l_@quot 001C            ___lldiv@dividend 0013    __end_of_glcd_WriteString 1C46  
              ?__tdiv_to_l_ 0013                    sprintf@c 008C                    sprintf@f 006B  
          ___lldiv@quotient 001B            ??_glcd_SetCursor 0016  
